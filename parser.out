Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> global_declaration_list
Rule 2     global_declaration_list -> global_declaration
Rule 3     global_declaration_list -> global_declaration_list global_declaration
Rule 4     global_declaration -> function_definition
Rule 5     global_declaration -> declaration
Rule 6     declaration -> decl_body SEMI
Rule 7     declaration_list -> declaration
Rule 8     declaration_list -> declaration_list declaration
Rule 9     declaration_list_opt -> declaration_list
Rule 10    declaration_list_opt -> empty
Rule 11    decl_body -> type_specifier init_declarator_list_opt
Rule 12    declarator -> pointer direct_declarator
Rule 13    declarator -> direct_declarator
Rule 14    init_declarator -> declarator
Rule 15    init_declarator -> declarator EQ initializer
Rule 16    init_declarator_list -> init_declarator
Rule 17    init_declarator_list -> init_declarator_list COMMA init_declarator
Rule 18    init_declarator_list_opt -> init_declarator_list
Rule 19    init_declarator_list_opt -> empty
Rule 20    direct_declarator -> identifier
Rule 21    direct_declarator -> LPAREN declarator RPAREN
Rule 22    direct_declarator -> direct_declarator LPAREN parameter_list RPAREN
Rule 23    direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET
Rule 24    direct_declarator -> direct_declarator LPAREN id_list_opt RPAREN
Rule 25    initializer -> assignment_expression
Rule 26    initializer -> LBRACE initializer_list RBRACE
Rule 27    initializer -> LBRACE initializer_list COMMA RBRACE
Rule 28    postfix_expression -> primary_expression
Rule 29    postfix_expression -> postfix_expression PLUSPLUS
Rule 30    postfix_expression -> postfix_expression MINUSMINUS
Rule 31    postfix_expression -> postfix_expression LBRACKET expression RBRACKET
Rule 32    postfix_expression -> postfix_expression LPAREN argument_expression_opt RPAREN
Rule 33    cast_expression -> unary_expression
Rule 34    cast_expression -> LPAREN type_specifier RPAREN cast_expression
Rule 35    identifier -> ID
Rule 36    unary_operator -> ADDRESS
Rule 37    unary_operator -> TIMES
Rule 38    unary_operator -> PLUS
Rule 39    unary_operator -> MINUS
Rule 40    unary_operator -> NOT
Rule 41    type_specifier -> VOID
Rule 42    type_specifier -> INT
Rule 43    type_specifier -> FLOAT
Rule 44    type_specifier -> CHAR
Rule 45    constant_expression -> binary_expression
Rule 46    constant_expression_opt -> constant_expression
Rule 47    constant_expression_opt -> empty
Rule 48    constant -> INT_CONST
Rule 49    constant -> FLOAT_CONST
Rule 50    constant -> CHAR_CONST
Rule 51    block_item -> statement
Rule 52    block_item -> declaration
Rule 53    block_item_list -> block_item
Rule 54    block_item_list -> block_item_list block_item
Rule 55    block_item_list_opt -> block_item_list
Rule 56    block_item_list_opt -> empty
Rule 57    selection_statement -> IF LPAREN expression RPAREN statement
Rule 58    selection_statement -> IF LPAREN expression RPAREN statement ELSE statement
Rule 59    iteration_statement -> WHILE LPAREN expression RPAREN statement
Rule 60    iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
Rule 61    iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement
Rule 62    initializer_list -> initializer
Rule 63    initializer_list -> initializer_list COMMA initializer
Rule 64    argument_expression_list -> assignment_expression
Rule 65    argument_expression_list -> argument_expression_list COMMA assignment_expression
Rule 66    argument_expression_opt -> argument_expression_list
Rule 67    argument_expression_opt -> empty
Rule 68    function_definition -> type_specifier declarator declaration_list_opt compound_statement
Rule 69    function_definition -> declarator declaration_list_opt compound_statement
Rule 70    assert_statement -> ASSERT expression SEMI
Rule 71    print_statement -> PRINT LPAREN expression_opt RPAREN SEMI
Rule 72    read_statement -> READ LPAREN argument_expression_list RPAREN SEMI
Rule 73    expression_statement -> expression_opt SEMI
Rule 74    compound_statement -> LBRACE block_item_list_opt RBRACE
Rule 75    statement -> expression_statement
Rule 76    statement -> selection_statement
Rule 77    statement -> jump_statement
Rule 78    statement -> print_statement
Rule 79    statement -> assert_statement
Rule 80    statement -> read_statement
Rule 81    statement -> iteration_statement
Rule 82    statement -> compound_statement
Rule 83    jump_statement -> BREAK SEMI
Rule 84    jump_statement -> RETURN expression SEMI
Rule 85    jump_statement -> RETURN SEMI
Rule 86    pointer -> TIMES pointer
Rule 87    pointer -> TIMES
Rule 88    parameter_declaration -> type_specifier declarator
Rule 89    expression -> assignment_expression
Rule 90    expression -> expression COMMA assignment_expression
Rule 91    string_literal -> STRING
Rule 92    primary_expression -> identifier
Rule 93    primary_expression -> constant
Rule 94    primary_expression -> string_literal
Rule 95    primary_expression -> LPAREN expression RPAREN
Rule 96    expression_opt -> expression
Rule 97    expression_opt -> empty
Rule 98    assignment_expression -> binary_expression
Rule 99    assignment_expression -> unary_expression assignment_operator assignment_expression
Rule 100   assignment_operator -> EQ
Rule 101   assignment_operator -> ASSIGN_TIMES
Rule 102   assignment_operator -> ASSIGN_DIVIDE
Rule 103   assignment_operator -> ASSIGN_MOD
Rule 104   assignment_operator -> ASSIGN_PLUS
Rule 105   assignment_operator -> ASSIGN_MINUS
Rule 106   unary_expression -> postfix_expression
Rule 107   unary_expression -> PLUSPLUS unary_expression
Rule 108   unary_expression -> MINUSMINUS unary_expression
Rule 109   unary_expression -> unary_operator cast_expression
Rule 110   binary_expression -> cast_expression
Rule 111   binary_expression -> binary_expression TIMES binary_expression
Rule 112   binary_expression -> binary_expression DIVIDE binary_expression
Rule 113   binary_expression -> binary_expression MOD binary_expression
Rule 114   binary_expression -> binary_expression PLUS binary_expression
Rule 115   binary_expression -> binary_expression MINUS binary_expression
Rule 116   binary_expression -> binary_expression LT binary_expression
Rule 117   binary_expression -> binary_expression LE binary_expression
Rule 118   binary_expression -> binary_expression HT binary_expression
Rule 119   binary_expression -> binary_expression HE binary_expression
Rule 120   binary_expression -> binary_expression EQUALS binary_expression
Rule 121   binary_expression -> binary_expression DIFF binary_expression
Rule 122   binary_expression -> binary_expression AND binary_expression
Rule 123   binary_expression -> binary_expression OR binary_expression
Rule 124   empty -> <empty>
Rule 125   parameter_list -> parameter_declaration
Rule 126   parameter_list -> parameter_list COMMA parameter_declaration
Rule 127   id_list_opt -> id_list
Rule 128   id_list_opt -> empty
Rule 129   id_list -> identifier
Rule 130   id_list -> id_list identifier

Terminals, with rules where they appear

ADDRESS              : 36
AND                  : 122
ASSERT               : 70
ASSIGN_DIVIDE        : 102
ASSIGN_MINUS         : 105
ASSIGN_MOD           : 103
ASSIGN_PLUS          : 104
ASSIGN_TIMES         : 101
BREAK                : 83
CHAR                 : 44
CHAR_CONST           : 50
COMMA                : 17 27 63 65 90 126
DIFF                 : 121
DIVIDE               : 112
ELSE                 : 58
EQ                   : 15 100
EQUALS               : 120
FLOAT                : 43
FLOAT_CONST          : 49
FOR                  : 60 61
HE                   : 119
HT                   : 118
ID                   : 35
IF                   : 57 58
INT                  : 42
INT_CONST            : 48
LBRACE               : 26 27 74
LBRACKET             : 23 31
LE                   : 117
LPAREN               : 21 22 24 32 34 57 58 59 60 61 71 72 95
LT                   : 116
MINUS                : 39 115
MINUSMINUS           : 30 108
MOD                  : 113
NOT                  : 40
OR                   : 123
PLUS                 : 38 114
PLUSPLUS             : 29 107
PRINT                : 71
RBRACE               : 26 27 74
RBRACKET             : 23 31
READ                 : 72
RETURN               : 84 85
RPAREN               : 21 22 24 32 34 57 58 59 60 61 71 72 95
SEMI                 : 6 60 60 61 70 71 72 73 83 84 85
STRING               : 91
TIMES                : 37 86 87 111
VOID                 : 41
WHILE                : 59
error                : 

Nonterminals, with rules where they appear

argument_expression_list : 65 66 72
argument_expression_opt : 32
assert_statement     : 79
assignment_expression : 25 64 65 89 90 99
assignment_operator  : 99
binary_expression    : 45 98 111 111 112 112 113 113 114 114 115 115 116 116 117 117 118 118 119 119 120 120 121 121 122 122 123 123
block_item           : 53 54
block_item_list      : 54 55
block_item_list_opt  : 74
cast_expression      : 34 109 110
compound_statement   : 68 69 82
constant             : 93
constant_expression  : 46
constant_expression_opt : 23
decl_body            : 6
declaration          : 5 7 8 52 61
declaration_list     : 8 9
declaration_list_opt : 68 69
declarator           : 14 15 21 68 69 88
direct_declarator    : 12 13 22 23 24
empty                : 10 19 47 56 67 97 128
expression           : 31 57 58 59 70 84 90 95 96
expression_opt       : 60 60 60 61 61 71 73
expression_statement : 75
function_definition  : 4
global_declaration   : 2 3
global_declaration_list : 1 3
id_list              : 127 130
id_list_opt          : 24
identifier           : 20 92 129 130
init_declarator      : 16 17
init_declarator_list : 17 18
init_declarator_list_opt : 11
initializer          : 15 62 63
initializer_list     : 26 27 63
iteration_statement  : 81
jump_statement       : 77
parameter_declaration : 125 126
parameter_list       : 22 126
pointer              : 12 86
postfix_expression   : 29 30 31 32 106
primary_expression   : 28
print_statement      : 78
program              : 0
read_statement       : 80
selection_statement  : 76
statement            : 51 57 58 58 59 60 61
string_literal       : 94
type_specifier       : 11 34 68 88
unary_expression     : 33 99 107 108
unary_operator       : 109

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . global_declaration_list
    (2) global_declaration_list -> . global_declaration
    (3) global_declaration_list -> . global_declaration_list global_declaration
    (4) global_declaration -> . function_definition
    (5) global_declaration -> . declaration
    (68) function_definition -> . type_specifier declarator declaration_list_opt compound_statement
    (69) function_definition -> . declarator declaration_list_opt compound_statement
    (6) declaration -> . decl_body SEMI
    (41) type_specifier -> . VOID
    (42) type_specifier -> . INT
    (43) type_specifier -> . FLOAT
    (44) type_specifier -> . CHAR
    (12) declarator -> . pointer direct_declarator
    (13) declarator -> . direct_declarator
    (11) decl_body -> . type_specifier init_declarator_list_opt
    (86) pointer -> . TIMES pointer
    (87) pointer -> . TIMES
    (20) direct_declarator -> . identifier
    (21) direct_declarator -> . LPAREN declarator RPAREN
    (22) direct_declarator -> . direct_declarator LPAREN parameter_list RPAREN
    (23) direct_declarator -> . direct_declarator LBRACKET constant_expression_opt RBRACKET
    (24) direct_declarator -> . direct_declarator LPAREN id_list_opt RPAREN
    (35) identifier -> . ID

    VOID            shift and go to state 9
    INT             shift and go to state 10
    FLOAT           shift and go to state 11
    CHAR            shift and go to state 12
    TIMES           shift and go to state 15
    LPAREN          shift and go to state 17
    ID              shift and go to state 18

    program                        shift and go to state 1
    global_declaration_list        shift and go to state 2
    global_declaration             shift and go to state 3
    function_definition            shift and go to state 4
    declaration                    shift and go to state 5
    type_specifier                 shift and go to state 6
    declarator                     shift and go to state 7
    decl_body                      shift and go to state 8
    pointer                        shift and go to state 13
    direct_declarator              shift and go to state 14
    identifier                     shift and go to state 16

state 1

    (0) S' -> program .



state 2

    (1) program -> global_declaration_list .
    (3) global_declaration_list -> global_declaration_list . global_declaration
    (4) global_declaration -> . function_definition
    (5) global_declaration -> . declaration
    (68) function_definition -> . type_specifier declarator declaration_list_opt compound_statement
    (69) function_definition -> . declarator declaration_list_opt compound_statement
    (6) declaration -> . decl_body SEMI
    (41) type_specifier -> . VOID
    (42) type_specifier -> . INT
    (43) type_specifier -> . FLOAT
    (44) type_specifier -> . CHAR
    (12) declarator -> . pointer direct_declarator
    (13) declarator -> . direct_declarator
    (11) decl_body -> . type_specifier init_declarator_list_opt
    (86) pointer -> . TIMES pointer
    (87) pointer -> . TIMES
    (20) direct_declarator -> . identifier
    (21) direct_declarator -> . LPAREN declarator RPAREN
    (22) direct_declarator -> . direct_declarator LPAREN parameter_list RPAREN
    (23) direct_declarator -> . direct_declarator LBRACKET constant_expression_opt RBRACKET
    (24) direct_declarator -> . direct_declarator LPAREN id_list_opt RPAREN
    (35) identifier -> . ID

    $end            reduce using rule 1 (program -> global_declaration_list .)
    VOID            shift and go to state 9
    INT             shift and go to state 10
    FLOAT           shift and go to state 11
    CHAR            shift and go to state 12
    TIMES           shift and go to state 15
    LPAREN          shift and go to state 17
    ID              shift and go to state 18

    global_declaration             shift and go to state 19
    function_definition            shift and go to state 4
    declaration                    shift and go to state 5
    type_specifier                 shift and go to state 6
    declarator                     shift and go to state 7
    decl_body                      shift and go to state 8
    pointer                        shift and go to state 13
    direct_declarator              shift and go to state 14
    identifier                     shift and go to state 16

state 3

    (2) global_declaration_list -> global_declaration .

    VOID            reduce using rule 2 (global_declaration_list -> global_declaration .)
    INT             reduce using rule 2 (global_declaration_list -> global_declaration .)
    FLOAT           reduce using rule 2 (global_declaration_list -> global_declaration .)
    CHAR            reduce using rule 2 (global_declaration_list -> global_declaration .)
    TIMES           reduce using rule 2 (global_declaration_list -> global_declaration .)
    LPAREN          reduce using rule 2 (global_declaration_list -> global_declaration .)
    ID              reduce using rule 2 (global_declaration_list -> global_declaration .)
    $end            reduce using rule 2 (global_declaration_list -> global_declaration .)


state 4

    (4) global_declaration -> function_definition .

    VOID            reduce using rule 4 (global_declaration -> function_definition .)
    INT             reduce using rule 4 (global_declaration -> function_definition .)
    FLOAT           reduce using rule 4 (global_declaration -> function_definition .)
    CHAR            reduce using rule 4 (global_declaration -> function_definition .)
    TIMES           reduce using rule 4 (global_declaration -> function_definition .)
    LPAREN          reduce using rule 4 (global_declaration -> function_definition .)
    ID              reduce using rule 4 (global_declaration -> function_definition .)
    $end            reduce using rule 4 (global_declaration -> function_definition .)


state 5

    (5) global_declaration -> declaration .

    VOID            reduce using rule 5 (global_declaration -> declaration .)
    INT             reduce using rule 5 (global_declaration -> declaration .)
    FLOAT           reduce using rule 5 (global_declaration -> declaration .)
    CHAR            reduce using rule 5 (global_declaration -> declaration .)
    TIMES           reduce using rule 5 (global_declaration -> declaration .)
    LPAREN          reduce using rule 5 (global_declaration -> declaration .)
    ID              reduce using rule 5 (global_declaration -> declaration .)
    $end            reduce using rule 5 (global_declaration -> declaration .)


state 6

    (68) function_definition -> type_specifier . declarator declaration_list_opt compound_statement
    (11) decl_body -> type_specifier . init_declarator_list_opt
    (12) declarator -> . pointer direct_declarator
    (13) declarator -> . direct_declarator
    (18) init_declarator_list_opt -> . init_declarator_list
    (19) init_declarator_list_opt -> . empty
    (86) pointer -> . TIMES pointer
    (87) pointer -> . TIMES
    (20) direct_declarator -> . identifier
    (21) direct_declarator -> . LPAREN declarator RPAREN
    (22) direct_declarator -> . direct_declarator LPAREN parameter_list RPAREN
    (23) direct_declarator -> . direct_declarator LBRACKET constant_expression_opt RBRACKET
    (24) direct_declarator -> . direct_declarator LPAREN id_list_opt RPAREN
    (16) init_declarator_list -> . init_declarator
    (17) init_declarator_list -> . init_declarator_list COMMA init_declarator
    (124) empty -> .
    (35) identifier -> . ID
    (14) init_declarator -> . declarator
    (15) init_declarator -> . declarator EQ initializer

    TIMES           shift and go to state 15
    LPAREN          shift and go to state 17
    SEMI            reduce using rule 124 (empty -> .)
    ID              shift and go to state 18

    declarator                     shift and go to state 20
    init_declarator_list_opt       shift and go to state 21
    pointer                        shift and go to state 13
    direct_declarator              shift and go to state 14
    init_declarator_list           shift and go to state 22
    empty                          shift and go to state 23
    identifier                     shift and go to state 16
    init_declarator                shift and go to state 24

state 7

    (69) function_definition -> declarator . declaration_list_opt compound_statement
    (9) declaration_list_opt -> . declaration_list
    (10) declaration_list_opt -> . empty
    (7) declaration_list -> . declaration
    (8) declaration_list -> . declaration_list declaration
    (124) empty -> .
    (6) declaration -> . decl_body SEMI
    (11) decl_body -> . type_specifier init_declarator_list_opt
    (41) type_specifier -> . VOID
    (42) type_specifier -> . INT
    (43) type_specifier -> . FLOAT
    (44) type_specifier -> . CHAR

    LBRACE          reduce using rule 124 (empty -> .)
    VOID            shift and go to state 9
    INT             shift and go to state 10
    FLOAT           shift and go to state 11
    CHAR            shift and go to state 12

    declaration_list_opt           shift and go to state 25
    declaration_list               shift and go to state 26
    empty                          shift and go to state 27
    declaration                    shift and go to state 28
    decl_body                      shift and go to state 8
    type_specifier                 shift and go to state 29

state 8

    (6) declaration -> decl_body . SEMI

    SEMI            shift and go to state 30


state 9

    (41) type_specifier -> VOID .

    TIMES           reduce using rule 41 (type_specifier -> VOID .)
    LPAREN          reduce using rule 41 (type_specifier -> VOID .)
    ID              reduce using rule 41 (type_specifier -> VOID .)
    SEMI            reduce using rule 41 (type_specifier -> VOID .)
    RPAREN          reduce using rule 41 (type_specifier -> VOID .)


state 10

    (42) type_specifier -> INT .

    TIMES           reduce using rule 42 (type_specifier -> INT .)
    LPAREN          reduce using rule 42 (type_specifier -> INT .)
    ID              reduce using rule 42 (type_specifier -> INT .)
    SEMI            reduce using rule 42 (type_specifier -> INT .)
    RPAREN          reduce using rule 42 (type_specifier -> INT .)


state 11

    (43) type_specifier -> FLOAT .

    TIMES           reduce using rule 43 (type_specifier -> FLOAT .)
    LPAREN          reduce using rule 43 (type_specifier -> FLOAT .)
    ID              reduce using rule 43 (type_specifier -> FLOAT .)
    SEMI            reduce using rule 43 (type_specifier -> FLOAT .)
    RPAREN          reduce using rule 43 (type_specifier -> FLOAT .)


state 12

    (44) type_specifier -> CHAR .

    TIMES           reduce using rule 44 (type_specifier -> CHAR .)
    LPAREN          reduce using rule 44 (type_specifier -> CHAR .)
    ID              reduce using rule 44 (type_specifier -> CHAR .)
    SEMI            reduce using rule 44 (type_specifier -> CHAR .)
    RPAREN          reduce using rule 44 (type_specifier -> CHAR .)


state 13

    (12) declarator -> pointer . direct_declarator
    (20) direct_declarator -> . identifier
    (21) direct_declarator -> . LPAREN declarator RPAREN
    (22) direct_declarator -> . direct_declarator LPAREN parameter_list RPAREN
    (23) direct_declarator -> . direct_declarator LBRACKET constant_expression_opt RBRACKET
    (24) direct_declarator -> . direct_declarator LPAREN id_list_opt RPAREN
    (35) identifier -> . ID

    LPAREN          shift and go to state 17
    ID              shift and go to state 18

    direct_declarator              shift and go to state 31
    identifier                     shift and go to state 16

state 14

    (13) declarator -> direct_declarator .
    (22) direct_declarator -> direct_declarator . LPAREN parameter_list RPAREN
    (23) direct_declarator -> direct_declarator . LBRACKET constant_expression_opt RBRACKET
    (24) direct_declarator -> direct_declarator . LPAREN id_list_opt RPAREN

    VOID            reduce using rule 13 (declarator -> direct_declarator .)
    INT             reduce using rule 13 (declarator -> direct_declarator .)
    FLOAT           reduce using rule 13 (declarator -> direct_declarator .)
    CHAR            reduce using rule 13 (declarator -> direct_declarator .)
    LBRACE          reduce using rule 13 (declarator -> direct_declarator .)
    EQ              reduce using rule 13 (declarator -> direct_declarator .)
    COMMA           reduce using rule 13 (declarator -> direct_declarator .)
    SEMI            reduce using rule 13 (declarator -> direct_declarator .)
    RPAREN          reduce using rule 13 (declarator -> direct_declarator .)
    LPAREN          shift and go to state 32
    LBRACKET        shift and go to state 33


state 15

    (86) pointer -> TIMES . pointer
    (87) pointer -> TIMES .
    (86) pointer -> . TIMES pointer
    (87) pointer -> . TIMES

    LPAREN          reduce using rule 87 (pointer -> TIMES .)
    ID              reduce using rule 87 (pointer -> TIMES .)
    TIMES           shift and go to state 15

    pointer                        shift and go to state 34

state 16

    (20) direct_declarator -> identifier .

    LPAREN          reduce using rule 20 (direct_declarator -> identifier .)
    LBRACKET        reduce using rule 20 (direct_declarator -> identifier .)
    VOID            reduce using rule 20 (direct_declarator -> identifier .)
    INT             reduce using rule 20 (direct_declarator -> identifier .)
    FLOAT           reduce using rule 20 (direct_declarator -> identifier .)
    CHAR            reduce using rule 20 (direct_declarator -> identifier .)
    LBRACE          reduce using rule 20 (direct_declarator -> identifier .)
    EQ              reduce using rule 20 (direct_declarator -> identifier .)
    COMMA           reduce using rule 20 (direct_declarator -> identifier .)
    SEMI            reduce using rule 20 (direct_declarator -> identifier .)
    RPAREN          reduce using rule 20 (direct_declarator -> identifier .)


state 17

    (21) direct_declarator -> LPAREN . declarator RPAREN
    (12) declarator -> . pointer direct_declarator
    (13) declarator -> . direct_declarator
    (86) pointer -> . TIMES pointer
    (87) pointer -> . TIMES
    (20) direct_declarator -> . identifier
    (21) direct_declarator -> . LPAREN declarator RPAREN
    (22) direct_declarator -> . direct_declarator LPAREN parameter_list RPAREN
    (23) direct_declarator -> . direct_declarator LBRACKET constant_expression_opt RBRACKET
    (24) direct_declarator -> . direct_declarator LPAREN id_list_opt RPAREN
    (35) identifier -> . ID

    TIMES           shift and go to state 15
    LPAREN          shift and go to state 17
    ID              shift and go to state 18

    declarator                     shift and go to state 35
    pointer                        shift and go to state 13
    direct_declarator              shift and go to state 14
    identifier                     shift and go to state 16

state 18

    (35) identifier -> ID .

    LPAREN          reduce using rule 35 (identifier -> ID .)
    LBRACKET        reduce using rule 35 (identifier -> ID .)
    VOID            reduce using rule 35 (identifier -> ID .)
    INT             reduce using rule 35 (identifier -> ID .)
    FLOAT           reduce using rule 35 (identifier -> ID .)
    CHAR            reduce using rule 35 (identifier -> ID .)
    LBRACE          reduce using rule 35 (identifier -> ID .)
    EQ              reduce using rule 35 (identifier -> ID .)
    COMMA           reduce using rule 35 (identifier -> ID .)
    SEMI            reduce using rule 35 (identifier -> ID .)
    RPAREN          reduce using rule 35 (identifier -> ID .)
    ID              reduce using rule 35 (identifier -> ID .)
    PLUSPLUS        reduce using rule 35 (identifier -> ID .)
    MINUSMINUS      reduce using rule 35 (identifier -> ID .)
    TIMES           reduce using rule 35 (identifier -> ID .)
    DIVIDE          reduce using rule 35 (identifier -> ID .)
    MOD             reduce using rule 35 (identifier -> ID .)
    PLUS            reduce using rule 35 (identifier -> ID .)
    MINUS           reduce using rule 35 (identifier -> ID .)
    LT              reduce using rule 35 (identifier -> ID .)
    LE              reduce using rule 35 (identifier -> ID .)
    HT              reduce using rule 35 (identifier -> ID .)
    HE              reduce using rule 35 (identifier -> ID .)
    EQUALS          reduce using rule 35 (identifier -> ID .)
    DIFF            reduce using rule 35 (identifier -> ID .)
    AND             reduce using rule 35 (identifier -> ID .)
    OR              reduce using rule 35 (identifier -> ID .)
    RBRACKET        reduce using rule 35 (identifier -> ID .)
    ASSIGN_TIMES    reduce using rule 35 (identifier -> ID .)
    ASSIGN_DIVIDE   reduce using rule 35 (identifier -> ID .)
    ASSIGN_MOD      reduce using rule 35 (identifier -> ID .)
    ASSIGN_PLUS     reduce using rule 35 (identifier -> ID .)
    ASSIGN_MINUS    reduce using rule 35 (identifier -> ID .)
    RBRACE          reduce using rule 35 (identifier -> ID .)


state 19

    (3) global_declaration_list -> global_declaration_list global_declaration .

    VOID            reduce using rule 3 (global_declaration_list -> global_declaration_list global_declaration .)
    INT             reduce using rule 3 (global_declaration_list -> global_declaration_list global_declaration .)
    FLOAT           reduce using rule 3 (global_declaration_list -> global_declaration_list global_declaration .)
    CHAR            reduce using rule 3 (global_declaration_list -> global_declaration_list global_declaration .)
    TIMES           reduce using rule 3 (global_declaration_list -> global_declaration_list global_declaration .)
    LPAREN          reduce using rule 3 (global_declaration_list -> global_declaration_list global_declaration .)
    ID              reduce using rule 3 (global_declaration_list -> global_declaration_list global_declaration .)
    $end            reduce using rule 3 (global_declaration_list -> global_declaration_list global_declaration .)


state 20

    (68) function_definition -> type_specifier declarator . declaration_list_opt compound_statement
    (14) init_declarator -> declarator .
    (15) init_declarator -> declarator . EQ initializer
    (9) declaration_list_opt -> . declaration_list
    (10) declaration_list_opt -> . empty
    (7) declaration_list -> . declaration
    (8) declaration_list -> . declaration_list declaration
    (124) empty -> .
    (6) declaration -> . decl_body SEMI
    (11) decl_body -> . type_specifier init_declarator_list_opt
    (41) type_specifier -> . VOID
    (42) type_specifier -> . INT
    (43) type_specifier -> . FLOAT
    (44) type_specifier -> . CHAR

    COMMA           reduce using rule 14 (init_declarator -> declarator .)
    SEMI            reduce using rule 14 (init_declarator -> declarator .)
    EQ              shift and go to state 37
    LBRACE          reduce using rule 124 (empty -> .)
    VOID            shift and go to state 9
    INT             shift and go to state 10
    FLOAT           shift and go to state 11
    CHAR            shift and go to state 12

    type_specifier                 shift and go to state 29
    declaration_list_opt           shift and go to state 36
    declaration_list               shift and go to state 26
    empty                          shift and go to state 27
    declaration                    shift and go to state 28
    decl_body                      shift and go to state 8

state 21

    (11) decl_body -> type_specifier init_declarator_list_opt .

    SEMI            reduce using rule 11 (decl_body -> type_specifier init_declarator_list_opt .)


state 22

    (18) init_declarator_list_opt -> init_declarator_list .
    (17) init_declarator_list -> init_declarator_list . COMMA init_declarator

    SEMI            reduce using rule 18 (init_declarator_list_opt -> init_declarator_list .)
    COMMA           shift and go to state 38


state 23

    (19) init_declarator_list_opt -> empty .

    SEMI            reduce using rule 19 (init_declarator_list_opt -> empty .)


state 24

    (16) init_declarator_list -> init_declarator .

    COMMA           reduce using rule 16 (init_declarator_list -> init_declarator .)
    SEMI            reduce using rule 16 (init_declarator_list -> init_declarator .)


state 25

    (69) function_definition -> declarator declaration_list_opt . compound_statement
    (74) compound_statement -> . LBRACE block_item_list_opt RBRACE

    LBRACE          shift and go to state 40

    compound_statement             shift and go to state 39

state 26

    (9) declaration_list_opt -> declaration_list .
    (8) declaration_list -> declaration_list . declaration
    (6) declaration -> . decl_body SEMI
    (11) decl_body -> . type_specifier init_declarator_list_opt
    (41) type_specifier -> . VOID
    (42) type_specifier -> . INT
    (43) type_specifier -> . FLOAT
    (44) type_specifier -> . CHAR

    LBRACE          reduce using rule 9 (declaration_list_opt -> declaration_list .)
    VOID            shift and go to state 9
    INT             shift and go to state 10
    FLOAT           shift and go to state 11
    CHAR            shift and go to state 12

    declaration                    shift and go to state 41
    decl_body                      shift and go to state 8
    type_specifier                 shift and go to state 29

state 27

    (10) declaration_list_opt -> empty .

    LBRACE          reduce using rule 10 (declaration_list_opt -> empty .)


state 28

    (7) declaration_list -> declaration .

    VOID            reduce using rule 7 (declaration_list -> declaration .)
    INT             reduce using rule 7 (declaration_list -> declaration .)
    FLOAT           reduce using rule 7 (declaration_list -> declaration .)
    CHAR            reduce using rule 7 (declaration_list -> declaration .)
    LBRACE          reduce using rule 7 (declaration_list -> declaration .)


state 29

    (11) decl_body -> type_specifier . init_declarator_list_opt
    (18) init_declarator_list_opt -> . init_declarator_list
    (19) init_declarator_list_opt -> . empty
    (16) init_declarator_list -> . init_declarator
    (17) init_declarator_list -> . init_declarator_list COMMA init_declarator
    (124) empty -> .
    (14) init_declarator -> . declarator
    (15) init_declarator -> . declarator EQ initializer
    (12) declarator -> . pointer direct_declarator
    (13) declarator -> . direct_declarator
    (86) pointer -> . TIMES pointer
    (87) pointer -> . TIMES
    (20) direct_declarator -> . identifier
    (21) direct_declarator -> . LPAREN declarator RPAREN
    (22) direct_declarator -> . direct_declarator LPAREN parameter_list RPAREN
    (23) direct_declarator -> . direct_declarator LBRACKET constant_expression_opt RBRACKET
    (24) direct_declarator -> . direct_declarator LPAREN id_list_opt RPAREN
    (35) identifier -> . ID

    SEMI            reduce using rule 124 (empty -> .)
    TIMES           shift and go to state 15
    LPAREN          shift and go to state 17
    ID              shift and go to state 18

    init_declarator_list_opt       shift and go to state 21
    init_declarator_list           shift and go to state 22
    empty                          shift and go to state 23
    init_declarator                shift and go to state 24
    declarator                     shift and go to state 42
    pointer                        shift and go to state 13
    direct_declarator              shift and go to state 14
    identifier                     shift and go to state 16

state 30

    (6) declaration -> decl_body SEMI .

    VOID            reduce using rule 6 (declaration -> decl_body SEMI .)
    INT             reduce using rule 6 (declaration -> decl_body SEMI .)
    FLOAT           reduce using rule 6 (declaration -> decl_body SEMI .)
    CHAR            reduce using rule 6 (declaration -> decl_body SEMI .)
    TIMES           reduce using rule 6 (declaration -> decl_body SEMI .)
    LPAREN          reduce using rule 6 (declaration -> decl_body SEMI .)
    ID              reduce using rule 6 (declaration -> decl_body SEMI .)
    $end            reduce using rule 6 (declaration -> decl_body SEMI .)
    LBRACE          reduce using rule 6 (declaration -> decl_body SEMI .)
    IF              reduce using rule 6 (declaration -> decl_body SEMI .)
    BREAK           reduce using rule 6 (declaration -> decl_body SEMI .)
    RETURN          reduce using rule 6 (declaration -> decl_body SEMI .)
    PRINT           reduce using rule 6 (declaration -> decl_body SEMI .)
    ASSERT          reduce using rule 6 (declaration -> decl_body SEMI .)
    READ            reduce using rule 6 (declaration -> decl_body SEMI .)
    WHILE           reduce using rule 6 (declaration -> decl_body SEMI .)
    FOR             reduce using rule 6 (declaration -> decl_body SEMI .)
    PLUSPLUS        reduce using rule 6 (declaration -> decl_body SEMI .)
    MINUSMINUS      reduce using rule 6 (declaration -> decl_body SEMI .)
    ADDRESS         reduce using rule 6 (declaration -> decl_body SEMI .)
    PLUS            reduce using rule 6 (declaration -> decl_body SEMI .)
    MINUS           reduce using rule 6 (declaration -> decl_body SEMI .)
    NOT             reduce using rule 6 (declaration -> decl_body SEMI .)
    INT_CONST       reduce using rule 6 (declaration -> decl_body SEMI .)
    FLOAT_CONST     reduce using rule 6 (declaration -> decl_body SEMI .)
    CHAR_CONST      reduce using rule 6 (declaration -> decl_body SEMI .)
    STRING          reduce using rule 6 (declaration -> decl_body SEMI .)
    SEMI            reduce using rule 6 (declaration -> decl_body SEMI .)
    RBRACE          reduce using rule 6 (declaration -> decl_body SEMI .)


state 31

    (12) declarator -> pointer direct_declarator .
    (22) direct_declarator -> direct_declarator . LPAREN parameter_list RPAREN
    (23) direct_declarator -> direct_declarator . LBRACKET constant_expression_opt RBRACKET
    (24) direct_declarator -> direct_declarator . LPAREN id_list_opt RPAREN

    VOID            reduce using rule 12 (declarator -> pointer direct_declarator .)
    INT             reduce using rule 12 (declarator -> pointer direct_declarator .)
    FLOAT           reduce using rule 12 (declarator -> pointer direct_declarator .)
    CHAR            reduce using rule 12 (declarator -> pointer direct_declarator .)
    LBRACE          reduce using rule 12 (declarator -> pointer direct_declarator .)
    EQ              reduce using rule 12 (declarator -> pointer direct_declarator .)
    COMMA           reduce using rule 12 (declarator -> pointer direct_declarator .)
    SEMI            reduce using rule 12 (declarator -> pointer direct_declarator .)
    RPAREN          reduce using rule 12 (declarator -> pointer direct_declarator .)
    LPAREN          shift and go to state 32
    LBRACKET        shift and go to state 33


state 32

    (22) direct_declarator -> direct_declarator LPAREN . parameter_list RPAREN
    (24) direct_declarator -> direct_declarator LPAREN . id_list_opt RPAREN
    (125) parameter_list -> . parameter_declaration
    (126) parameter_list -> . parameter_list COMMA parameter_declaration
    (127) id_list_opt -> . id_list
    (128) id_list_opt -> . empty
    (88) parameter_declaration -> . type_specifier declarator
    (129) id_list -> . identifier
    (130) id_list -> . id_list identifier
    (124) empty -> .
    (41) type_specifier -> . VOID
    (42) type_specifier -> . INT
    (43) type_specifier -> . FLOAT
    (44) type_specifier -> . CHAR
    (35) identifier -> . ID

    RPAREN          reduce using rule 124 (empty -> .)
    VOID            shift and go to state 9
    INT             shift and go to state 10
    FLOAT           shift and go to state 11
    CHAR            shift and go to state 12
    ID              shift and go to state 18

    parameter_list                 shift and go to state 43
    id_list_opt                    shift and go to state 44
    parameter_declaration          shift and go to state 45
    id_list                        shift and go to state 46
    empty                          shift and go to state 47
    type_specifier                 shift and go to state 48
    identifier                     shift and go to state 49

state 33

    (23) direct_declarator -> direct_declarator LBRACKET . constant_expression_opt RBRACKET
    (46) constant_expression_opt -> . constant_expression
    (47) constant_expression_opt -> . empty
    (45) constant_expression -> . binary_expression
    (124) empty -> .
    (110) binary_expression -> . cast_expression
    (111) binary_expression -> . binary_expression TIMES binary_expression
    (112) binary_expression -> . binary_expression DIVIDE binary_expression
    (113) binary_expression -> . binary_expression MOD binary_expression
    (114) binary_expression -> . binary_expression PLUS binary_expression
    (115) binary_expression -> . binary_expression MINUS binary_expression
    (116) binary_expression -> . binary_expression LT binary_expression
    (117) binary_expression -> . binary_expression LE binary_expression
    (118) binary_expression -> . binary_expression HT binary_expression
    (119) binary_expression -> . binary_expression HE binary_expression
    (120) binary_expression -> . binary_expression EQUALS binary_expression
    (121) binary_expression -> . binary_expression DIFF binary_expression
    (122) binary_expression -> . binary_expression AND binary_expression
    (123) binary_expression -> . binary_expression OR binary_expression
    (33) cast_expression -> . unary_expression
    (34) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (106) unary_expression -> . postfix_expression
    (107) unary_expression -> . PLUSPLUS unary_expression
    (108) unary_expression -> . MINUSMINUS unary_expression
    (109) unary_expression -> . unary_operator cast_expression
    (28) postfix_expression -> . primary_expression
    (29) postfix_expression -> . postfix_expression PLUSPLUS
    (30) postfix_expression -> . postfix_expression MINUSMINUS
    (31) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (32) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (36) unary_operator -> . ADDRESS
    (37) unary_operator -> . TIMES
    (38) unary_operator -> . PLUS
    (39) unary_operator -> . MINUS
    (40) unary_operator -> . NOT
    (92) primary_expression -> . identifier
    (93) primary_expression -> . constant
    (94) primary_expression -> . string_literal
    (95) primary_expression -> . LPAREN expression RPAREN
    (35) identifier -> . ID
    (48) constant -> . INT_CONST
    (49) constant -> . FLOAT_CONST
    (50) constant -> . CHAR_CONST
    (91) string_literal -> . STRING

    RBRACKET        reduce using rule 124 (empty -> .)
    LPAREN          shift and go to state 59
    PLUSPLUS        shift and go to state 61
    MINUSMINUS      shift and go to state 62
    ADDRESS         shift and go to state 65
    TIMES           shift and go to state 55
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    NOT             shift and go to state 66
    ID              shift and go to state 18
    INT_CONST       shift and go to state 70
    FLOAT_CONST     shift and go to state 71
    CHAR_CONST      shift and go to state 72
    STRING          shift and go to state 73

    constant_expression_opt        shift and go to state 50
    constant_expression            shift and go to state 51
    empty                          shift and go to state 52
    binary_expression              shift and go to state 53
    cast_expression                shift and go to state 54
    unary_expression               shift and go to state 58
    postfix_expression             shift and go to state 60
    unary_operator                 shift and go to state 63
    primary_expression             shift and go to state 64
    identifier                     shift and go to state 67
    constant                       shift and go to state 68
    string_literal                 shift and go to state 69

state 34

    (86) pointer -> TIMES pointer .

    LPAREN          reduce using rule 86 (pointer -> TIMES pointer .)
    ID              reduce using rule 86 (pointer -> TIMES pointer .)


state 35

    (21) direct_declarator -> LPAREN declarator . RPAREN

    RPAREN          shift and go to state 74


state 36

    (68) function_definition -> type_specifier declarator declaration_list_opt . compound_statement
    (74) compound_statement -> . LBRACE block_item_list_opt RBRACE

    LBRACE          shift and go to state 40

    compound_statement             shift and go to state 75

state 37

    (15) init_declarator -> declarator EQ . initializer
    (25) initializer -> . assignment_expression
    (26) initializer -> . LBRACE initializer_list RBRACE
    (27) initializer -> . LBRACE initializer_list COMMA RBRACE
    (98) assignment_expression -> . binary_expression
    (99) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (110) binary_expression -> . cast_expression
    (111) binary_expression -> . binary_expression TIMES binary_expression
    (112) binary_expression -> . binary_expression DIVIDE binary_expression
    (113) binary_expression -> . binary_expression MOD binary_expression
    (114) binary_expression -> . binary_expression PLUS binary_expression
    (115) binary_expression -> . binary_expression MINUS binary_expression
    (116) binary_expression -> . binary_expression LT binary_expression
    (117) binary_expression -> . binary_expression LE binary_expression
    (118) binary_expression -> . binary_expression HT binary_expression
    (119) binary_expression -> . binary_expression HE binary_expression
    (120) binary_expression -> . binary_expression EQUALS binary_expression
    (121) binary_expression -> . binary_expression DIFF binary_expression
    (122) binary_expression -> . binary_expression AND binary_expression
    (123) binary_expression -> . binary_expression OR binary_expression
    (106) unary_expression -> . postfix_expression
    (107) unary_expression -> . PLUSPLUS unary_expression
    (108) unary_expression -> . MINUSMINUS unary_expression
    (109) unary_expression -> . unary_operator cast_expression
    (33) cast_expression -> . unary_expression
    (34) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (28) postfix_expression -> . primary_expression
    (29) postfix_expression -> . postfix_expression PLUSPLUS
    (30) postfix_expression -> . postfix_expression MINUSMINUS
    (31) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (32) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (36) unary_operator -> . ADDRESS
    (37) unary_operator -> . TIMES
    (38) unary_operator -> . PLUS
    (39) unary_operator -> . MINUS
    (40) unary_operator -> . NOT
    (92) primary_expression -> . identifier
    (93) primary_expression -> . constant
    (94) primary_expression -> . string_literal
    (95) primary_expression -> . LPAREN expression RPAREN
    (35) identifier -> . ID
    (48) constant -> . INT_CONST
    (49) constant -> . FLOAT_CONST
    (50) constant -> . CHAR_CONST
    (91) string_literal -> . STRING

    LBRACE          shift and go to state 78
    PLUSPLUS        shift and go to state 61
    MINUSMINUS      shift and go to state 62
    LPAREN          shift and go to state 59
    ADDRESS         shift and go to state 65
    TIMES           shift and go to state 55
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    NOT             shift and go to state 66
    ID              shift and go to state 18
    INT_CONST       shift and go to state 70
    FLOAT_CONST     shift and go to state 71
    CHAR_CONST      shift and go to state 72
    STRING          shift and go to state 73

    initializer                    shift and go to state 76
    assignment_expression          shift and go to state 77
    binary_expression              shift and go to state 79
    unary_expression               shift and go to state 80
    cast_expression                shift and go to state 54
    postfix_expression             shift and go to state 60
    unary_operator                 shift and go to state 63
    primary_expression             shift and go to state 64
    identifier                     shift and go to state 67
    constant                       shift and go to state 68
    string_literal                 shift and go to state 69

state 38

    (17) init_declarator_list -> init_declarator_list COMMA . init_declarator
    (14) init_declarator -> . declarator
    (15) init_declarator -> . declarator EQ initializer
    (12) declarator -> . pointer direct_declarator
    (13) declarator -> . direct_declarator
    (86) pointer -> . TIMES pointer
    (87) pointer -> . TIMES
    (20) direct_declarator -> . identifier
    (21) direct_declarator -> . LPAREN declarator RPAREN
    (22) direct_declarator -> . direct_declarator LPAREN parameter_list RPAREN
    (23) direct_declarator -> . direct_declarator LBRACKET constant_expression_opt RBRACKET
    (24) direct_declarator -> . direct_declarator LPAREN id_list_opt RPAREN
    (35) identifier -> . ID

    TIMES           shift and go to state 15
    LPAREN          shift and go to state 17
    ID              shift and go to state 18

    init_declarator                shift and go to state 81
    declarator                     shift and go to state 42
    pointer                        shift and go to state 13
    direct_declarator              shift and go to state 14
    identifier                     shift and go to state 16

state 39

    (69) function_definition -> declarator declaration_list_opt compound_statement .

    VOID            reduce using rule 69 (function_definition -> declarator declaration_list_opt compound_statement .)
    INT             reduce using rule 69 (function_definition -> declarator declaration_list_opt compound_statement .)
    FLOAT           reduce using rule 69 (function_definition -> declarator declaration_list_opt compound_statement .)
    CHAR            reduce using rule 69 (function_definition -> declarator declaration_list_opt compound_statement .)
    TIMES           reduce using rule 69 (function_definition -> declarator declaration_list_opt compound_statement .)
    LPAREN          reduce using rule 69 (function_definition -> declarator declaration_list_opt compound_statement .)
    ID              reduce using rule 69 (function_definition -> declarator declaration_list_opt compound_statement .)
    $end            reduce using rule 69 (function_definition -> declarator declaration_list_opt compound_statement .)


state 40

    (74) compound_statement -> LBRACE . block_item_list_opt RBRACE
    (55) block_item_list_opt -> . block_item_list
    (56) block_item_list_opt -> . empty
    (53) block_item_list -> . block_item
    (54) block_item_list -> . block_item_list block_item
    (124) empty -> .
    (51) block_item -> . statement
    (52) block_item -> . declaration
    (75) statement -> . expression_statement
    (76) statement -> . selection_statement
    (77) statement -> . jump_statement
    (78) statement -> . print_statement
    (79) statement -> . assert_statement
    (80) statement -> . read_statement
    (81) statement -> . iteration_statement
    (82) statement -> . compound_statement
    (6) declaration -> . decl_body SEMI
    (73) expression_statement -> . expression_opt SEMI
    (57) selection_statement -> . IF LPAREN expression RPAREN statement
    (58) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (83) jump_statement -> . BREAK SEMI
    (84) jump_statement -> . RETURN expression SEMI
    (85) jump_statement -> . RETURN SEMI
    (71) print_statement -> . PRINT LPAREN expression_opt RPAREN SEMI
    (70) assert_statement -> . ASSERT expression SEMI
    (72) read_statement -> . READ LPAREN argument_expression_list RPAREN SEMI
    (59) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (60) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (61) iteration_statement -> . FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement
    (74) compound_statement -> . LBRACE block_item_list_opt RBRACE
    (11) decl_body -> . type_specifier init_declarator_list_opt
    (96) expression_opt -> . expression
    (97) expression_opt -> . empty
    (41) type_specifier -> . VOID
    (42) type_specifier -> . INT
    (43) type_specifier -> . FLOAT
    (44) type_specifier -> . CHAR
    (89) expression -> . assignment_expression
    (90) expression -> . expression COMMA assignment_expression
    (98) assignment_expression -> . binary_expression
    (99) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (110) binary_expression -> . cast_expression
    (111) binary_expression -> . binary_expression TIMES binary_expression
    (112) binary_expression -> . binary_expression DIVIDE binary_expression
    (113) binary_expression -> . binary_expression MOD binary_expression
    (114) binary_expression -> . binary_expression PLUS binary_expression
    (115) binary_expression -> . binary_expression MINUS binary_expression
    (116) binary_expression -> . binary_expression LT binary_expression
    (117) binary_expression -> . binary_expression LE binary_expression
    (118) binary_expression -> . binary_expression HT binary_expression
    (119) binary_expression -> . binary_expression HE binary_expression
    (120) binary_expression -> . binary_expression EQUALS binary_expression
    (121) binary_expression -> . binary_expression DIFF binary_expression
    (122) binary_expression -> . binary_expression AND binary_expression
    (123) binary_expression -> . binary_expression OR binary_expression
    (106) unary_expression -> . postfix_expression
    (107) unary_expression -> . PLUSPLUS unary_expression
    (108) unary_expression -> . MINUSMINUS unary_expression
    (109) unary_expression -> . unary_operator cast_expression
    (33) cast_expression -> . unary_expression
    (34) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (28) postfix_expression -> . primary_expression
    (29) postfix_expression -> . postfix_expression PLUSPLUS
    (30) postfix_expression -> . postfix_expression MINUSMINUS
    (31) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (32) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (36) unary_operator -> . ADDRESS
    (37) unary_operator -> . TIMES
    (38) unary_operator -> . PLUS
    (39) unary_operator -> . MINUS
    (40) unary_operator -> . NOT
    (92) primary_expression -> . identifier
    (93) primary_expression -> . constant
    (94) primary_expression -> . string_literal
    (95) primary_expression -> . LPAREN expression RPAREN
    (35) identifier -> . ID
    (48) constant -> . INT_CONST
    (49) constant -> . FLOAT_CONST
    (50) constant -> . CHAR_CONST
    (91) string_literal -> . STRING

    RBRACE          reduce using rule 124 (empty -> .)
    SEMI            reduce using rule 124 (empty -> .)
    IF              shift and go to state 97
    BREAK           shift and go to state 99
    RETURN          shift and go to state 100
    PRINT           shift and go to state 101
    ASSERT          shift and go to state 102
    READ            shift and go to state 103
    WHILE           shift and go to state 104
    FOR             shift and go to state 105
    LBRACE          shift and go to state 40
    VOID            shift and go to state 9
    INT             shift and go to state 10
    FLOAT           shift and go to state 11
    CHAR            shift and go to state 12
    PLUSPLUS        shift and go to state 61
    MINUSMINUS      shift and go to state 62
    LPAREN          shift and go to state 59
    ADDRESS         shift and go to state 65
    TIMES           shift and go to state 55
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    NOT             shift and go to state 66
    ID              shift and go to state 18
    INT_CONST       shift and go to state 70
    FLOAT_CONST     shift and go to state 71
    CHAR_CONST      shift and go to state 72
    STRING          shift and go to state 73

    block_item_list_opt            shift and go to state 82
    block_item_list                shift and go to state 83
    empty                          shift and go to state 84
    block_item                     shift and go to state 85
    statement                      shift and go to state 86
    declaration                    shift and go to state 87
    expression_statement           shift and go to state 88
    selection_statement            shift and go to state 89
    jump_statement                 shift and go to state 90
    print_statement                shift and go to state 91
    assert_statement               shift and go to state 92
    read_statement                 shift and go to state 93
    iteration_statement            shift and go to state 94
    compound_statement             shift and go to state 95
    decl_body                      shift and go to state 8
    expression_opt                 shift and go to state 96
    expression                     shift and go to state 98
    type_specifier                 shift and go to state 29
    assignment_expression          shift and go to state 106
    binary_expression              shift and go to state 79
    unary_expression               shift and go to state 80
    cast_expression                shift and go to state 54
    postfix_expression             shift and go to state 60
    unary_operator                 shift and go to state 63
    primary_expression             shift and go to state 64
    identifier                     shift and go to state 67
    constant                       shift and go to state 68
    string_literal                 shift and go to state 69

state 41

    (8) declaration_list -> declaration_list declaration .

    VOID            reduce using rule 8 (declaration_list -> declaration_list declaration .)
    INT             reduce using rule 8 (declaration_list -> declaration_list declaration .)
    FLOAT           reduce using rule 8 (declaration_list -> declaration_list declaration .)
    CHAR            reduce using rule 8 (declaration_list -> declaration_list declaration .)
    LBRACE          reduce using rule 8 (declaration_list -> declaration_list declaration .)


state 42

    (14) init_declarator -> declarator .
    (15) init_declarator -> declarator . EQ initializer

    COMMA           reduce using rule 14 (init_declarator -> declarator .)
    SEMI            reduce using rule 14 (init_declarator -> declarator .)
    EQ              shift and go to state 37


state 43

    (22) direct_declarator -> direct_declarator LPAREN parameter_list . RPAREN
    (126) parameter_list -> parameter_list . COMMA parameter_declaration

    RPAREN          shift and go to state 107
    COMMA           shift and go to state 108


state 44

    (24) direct_declarator -> direct_declarator LPAREN id_list_opt . RPAREN

    RPAREN          shift and go to state 109


state 45

    (125) parameter_list -> parameter_declaration .

    RPAREN          reduce using rule 125 (parameter_list -> parameter_declaration .)
    COMMA           reduce using rule 125 (parameter_list -> parameter_declaration .)


state 46

    (127) id_list_opt -> id_list .
    (130) id_list -> id_list . identifier
    (35) identifier -> . ID

    RPAREN          reduce using rule 127 (id_list_opt -> id_list .)
    ID              shift and go to state 18

    identifier                     shift and go to state 110

state 47

    (128) id_list_opt -> empty .

    RPAREN          reduce using rule 128 (id_list_opt -> empty .)


state 48

    (88) parameter_declaration -> type_specifier . declarator
    (12) declarator -> . pointer direct_declarator
    (13) declarator -> . direct_declarator
    (86) pointer -> . TIMES pointer
    (87) pointer -> . TIMES
    (20) direct_declarator -> . identifier
    (21) direct_declarator -> . LPAREN declarator RPAREN
    (22) direct_declarator -> . direct_declarator LPAREN parameter_list RPAREN
    (23) direct_declarator -> . direct_declarator LBRACKET constant_expression_opt RBRACKET
    (24) direct_declarator -> . direct_declarator LPAREN id_list_opt RPAREN
    (35) identifier -> . ID

    TIMES           shift and go to state 15
    LPAREN          shift and go to state 17
    ID              shift and go to state 18

    declarator                     shift and go to state 111
    pointer                        shift and go to state 13
    direct_declarator              shift and go to state 14
    identifier                     shift and go to state 16

state 49

    (129) id_list -> identifier .

    ID              reduce using rule 129 (id_list -> identifier .)
    RPAREN          reduce using rule 129 (id_list -> identifier .)


state 50

    (23) direct_declarator -> direct_declarator LBRACKET constant_expression_opt . RBRACKET

    RBRACKET        shift and go to state 112


state 51

    (46) constant_expression_opt -> constant_expression .

    RBRACKET        reduce using rule 46 (constant_expression_opt -> constant_expression .)


state 52

    (47) constant_expression_opt -> empty .

    RBRACKET        reduce using rule 47 (constant_expression_opt -> empty .)


state 53

    (45) constant_expression -> binary_expression .
    (111) binary_expression -> binary_expression . TIMES binary_expression
    (112) binary_expression -> binary_expression . DIVIDE binary_expression
    (113) binary_expression -> binary_expression . MOD binary_expression
    (114) binary_expression -> binary_expression . PLUS binary_expression
    (115) binary_expression -> binary_expression . MINUS binary_expression
    (116) binary_expression -> binary_expression . LT binary_expression
    (117) binary_expression -> binary_expression . LE binary_expression
    (118) binary_expression -> binary_expression . HT binary_expression
    (119) binary_expression -> binary_expression . HE binary_expression
    (120) binary_expression -> binary_expression . EQUALS binary_expression
    (121) binary_expression -> binary_expression . DIFF binary_expression
    (122) binary_expression -> binary_expression . AND binary_expression
    (123) binary_expression -> binary_expression . OR binary_expression

    RBRACKET        reduce using rule 45 (constant_expression -> binary_expression .)
    TIMES           shift and go to state 113
    DIVIDE          shift and go to state 114
    MOD             shift and go to state 115
    PLUS            shift and go to state 116
    MINUS           shift and go to state 117
    LT              shift and go to state 118
    LE              shift and go to state 119
    HT              shift and go to state 120
    HE              shift and go to state 121
    EQUALS          shift and go to state 122
    DIFF            shift and go to state 123
    AND             shift and go to state 124
    OR              shift and go to state 125


state 54

    (110) binary_expression -> cast_expression .

    TIMES           reduce using rule 110 (binary_expression -> cast_expression .)
    DIVIDE          reduce using rule 110 (binary_expression -> cast_expression .)
    MOD             reduce using rule 110 (binary_expression -> cast_expression .)
    PLUS            reduce using rule 110 (binary_expression -> cast_expression .)
    MINUS           reduce using rule 110 (binary_expression -> cast_expression .)
    LT              reduce using rule 110 (binary_expression -> cast_expression .)
    LE              reduce using rule 110 (binary_expression -> cast_expression .)
    HT              reduce using rule 110 (binary_expression -> cast_expression .)
    HE              reduce using rule 110 (binary_expression -> cast_expression .)
    EQUALS          reduce using rule 110 (binary_expression -> cast_expression .)
    DIFF            reduce using rule 110 (binary_expression -> cast_expression .)
    AND             reduce using rule 110 (binary_expression -> cast_expression .)
    OR              reduce using rule 110 (binary_expression -> cast_expression .)
    RBRACKET        reduce using rule 110 (binary_expression -> cast_expression .)
    COMMA           reduce using rule 110 (binary_expression -> cast_expression .)
    SEMI            reduce using rule 110 (binary_expression -> cast_expression .)
    RPAREN          reduce using rule 110 (binary_expression -> cast_expression .)
    RBRACE          reduce using rule 110 (binary_expression -> cast_expression .)


state 55

    (37) unary_operator -> TIMES .

    LPAREN          reduce using rule 37 (unary_operator -> TIMES .)
    PLUSPLUS        reduce using rule 37 (unary_operator -> TIMES .)
    MINUSMINUS      reduce using rule 37 (unary_operator -> TIMES .)
    ADDRESS         reduce using rule 37 (unary_operator -> TIMES .)
    TIMES           reduce using rule 37 (unary_operator -> TIMES .)
    PLUS            reduce using rule 37 (unary_operator -> TIMES .)
    MINUS           reduce using rule 37 (unary_operator -> TIMES .)
    NOT             reduce using rule 37 (unary_operator -> TIMES .)
    ID              reduce using rule 37 (unary_operator -> TIMES .)
    INT_CONST       reduce using rule 37 (unary_operator -> TIMES .)
    FLOAT_CONST     reduce using rule 37 (unary_operator -> TIMES .)
    CHAR_CONST      reduce using rule 37 (unary_operator -> TIMES .)
    STRING          reduce using rule 37 (unary_operator -> TIMES .)


state 56

    (38) unary_operator -> PLUS .

    LPAREN          reduce using rule 38 (unary_operator -> PLUS .)
    PLUSPLUS        reduce using rule 38 (unary_operator -> PLUS .)
    MINUSMINUS      reduce using rule 38 (unary_operator -> PLUS .)
    ADDRESS         reduce using rule 38 (unary_operator -> PLUS .)
    TIMES           reduce using rule 38 (unary_operator -> PLUS .)
    PLUS            reduce using rule 38 (unary_operator -> PLUS .)
    MINUS           reduce using rule 38 (unary_operator -> PLUS .)
    NOT             reduce using rule 38 (unary_operator -> PLUS .)
    ID              reduce using rule 38 (unary_operator -> PLUS .)
    INT_CONST       reduce using rule 38 (unary_operator -> PLUS .)
    FLOAT_CONST     reduce using rule 38 (unary_operator -> PLUS .)
    CHAR_CONST      reduce using rule 38 (unary_operator -> PLUS .)
    STRING          reduce using rule 38 (unary_operator -> PLUS .)


state 57

    (39) unary_operator -> MINUS .

    LPAREN          reduce using rule 39 (unary_operator -> MINUS .)
    PLUSPLUS        reduce using rule 39 (unary_operator -> MINUS .)
    MINUSMINUS      reduce using rule 39 (unary_operator -> MINUS .)
    ADDRESS         reduce using rule 39 (unary_operator -> MINUS .)
    TIMES           reduce using rule 39 (unary_operator -> MINUS .)
    PLUS            reduce using rule 39 (unary_operator -> MINUS .)
    MINUS           reduce using rule 39 (unary_operator -> MINUS .)
    NOT             reduce using rule 39 (unary_operator -> MINUS .)
    ID              reduce using rule 39 (unary_operator -> MINUS .)
    INT_CONST       reduce using rule 39 (unary_operator -> MINUS .)
    FLOAT_CONST     reduce using rule 39 (unary_operator -> MINUS .)
    CHAR_CONST      reduce using rule 39 (unary_operator -> MINUS .)
    STRING          reduce using rule 39 (unary_operator -> MINUS .)


state 58

    (33) cast_expression -> unary_expression .

    TIMES           reduce using rule 33 (cast_expression -> unary_expression .)
    DIVIDE          reduce using rule 33 (cast_expression -> unary_expression .)
    MOD             reduce using rule 33 (cast_expression -> unary_expression .)
    PLUS            reduce using rule 33 (cast_expression -> unary_expression .)
    MINUS           reduce using rule 33 (cast_expression -> unary_expression .)
    LT              reduce using rule 33 (cast_expression -> unary_expression .)
    LE              reduce using rule 33 (cast_expression -> unary_expression .)
    HT              reduce using rule 33 (cast_expression -> unary_expression .)
    HE              reduce using rule 33 (cast_expression -> unary_expression .)
    EQUALS          reduce using rule 33 (cast_expression -> unary_expression .)
    DIFF            reduce using rule 33 (cast_expression -> unary_expression .)
    AND             reduce using rule 33 (cast_expression -> unary_expression .)
    OR              reduce using rule 33 (cast_expression -> unary_expression .)
    RBRACKET        reduce using rule 33 (cast_expression -> unary_expression .)
    EQ              reduce using rule 33 (cast_expression -> unary_expression .)
    ASSIGN_TIMES    reduce using rule 33 (cast_expression -> unary_expression .)
    ASSIGN_DIVIDE   reduce using rule 33 (cast_expression -> unary_expression .)
    ASSIGN_MOD      reduce using rule 33 (cast_expression -> unary_expression .)
    ASSIGN_PLUS     reduce using rule 33 (cast_expression -> unary_expression .)
    ASSIGN_MINUS    reduce using rule 33 (cast_expression -> unary_expression .)
    COMMA           reduce using rule 33 (cast_expression -> unary_expression .)
    SEMI            reduce using rule 33 (cast_expression -> unary_expression .)
    RPAREN          reduce using rule 33 (cast_expression -> unary_expression .)
    RBRACE          reduce using rule 33 (cast_expression -> unary_expression .)


state 59

    (34) cast_expression -> LPAREN . type_specifier RPAREN cast_expression
    (95) primary_expression -> LPAREN . expression RPAREN
    (41) type_specifier -> . VOID
    (42) type_specifier -> . INT
    (43) type_specifier -> . FLOAT
    (44) type_specifier -> . CHAR
    (89) expression -> . assignment_expression
    (90) expression -> . expression COMMA assignment_expression
    (98) assignment_expression -> . binary_expression
    (99) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (110) binary_expression -> . cast_expression
    (111) binary_expression -> . binary_expression TIMES binary_expression
    (112) binary_expression -> . binary_expression DIVIDE binary_expression
    (113) binary_expression -> . binary_expression MOD binary_expression
    (114) binary_expression -> . binary_expression PLUS binary_expression
    (115) binary_expression -> . binary_expression MINUS binary_expression
    (116) binary_expression -> . binary_expression LT binary_expression
    (117) binary_expression -> . binary_expression LE binary_expression
    (118) binary_expression -> . binary_expression HT binary_expression
    (119) binary_expression -> . binary_expression HE binary_expression
    (120) binary_expression -> . binary_expression EQUALS binary_expression
    (121) binary_expression -> . binary_expression DIFF binary_expression
    (122) binary_expression -> . binary_expression AND binary_expression
    (123) binary_expression -> . binary_expression OR binary_expression
    (106) unary_expression -> . postfix_expression
    (107) unary_expression -> . PLUSPLUS unary_expression
    (108) unary_expression -> . MINUSMINUS unary_expression
    (109) unary_expression -> . unary_operator cast_expression
    (33) cast_expression -> . unary_expression
    (34) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (28) postfix_expression -> . primary_expression
    (29) postfix_expression -> . postfix_expression PLUSPLUS
    (30) postfix_expression -> . postfix_expression MINUSMINUS
    (31) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (32) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (36) unary_operator -> . ADDRESS
    (37) unary_operator -> . TIMES
    (38) unary_operator -> . PLUS
    (39) unary_operator -> . MINUS
    (40) unary_operator -> . NOT
    (92) primary_expression -> . identifier
    (93) primary_expression -> . constant
    (94) primary_expression -> . string_literal
    (95) primary_expression -> . LPAREN expression RPAREN
    (35) identifier -> . ID
    (48) constant -> . INT_CONST
    (49) constant -> . FLOAT_CONST
    (50) constant -> . CHAR_CONST
    (91) string_literal -> . STRING

    VOID            shift and go to state 9
    INT             shift and go to state 10
    FLOAT           shift and go to state 11
    CHAR            shift and go to state 12
    PLUSPLUS        shift and go to state 61
    MINUSMINUS      shift and go to state 62
    LPAREN          shift and go to state 59
    ADDRESS         shift and go to state 65
    TIMES           shift and go to state 55
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    NOT             shift and go to state 66
    ID              shift and go to state 18
    INT_CONST       shift and go to state 70
    FLOAT_CONST     shift and go to state 71
    CHAR_CONST      shift and go to state 72
    STRING          shift and go to state 73

    type_specifier                 shift and go to state 126
    cast_expression                shift and go to state 54
    expression                     shift and go to state 127
    assignment_expression          shift and go to state 106
    binary_expression              shift and go to state 79
    unary_expression               shift and go to state 80
    postfix_expression             shift and go to state 60
    unary_operator                 shift and go to state 63
    primary_expression             shift and go to state 64
    identifier                     shift and go to state 67
    constant                       shift and go to state 68
    string_literal                 shift and go to state 69

state 60

    (106) unary_expression -> postfix_expression .
    (29) postfix_expression -> postfix_expression . PLUSPLUS
    (30) postfix_expression -> postfix_expression . MINUSMINUS
    (31) postfix_expression -> postfix_expression . LBRACKET expression RBRACKET
    (32) postfix_expression -> postfix_expression . LPAREN argument_expression_opt RPAREN

    TIMES           reduce using rule 106 (unary_expression -> postfix_expression .)
    DIVIDE          reduce using rule 106 (unary_expression -> postfix_expression .)
    MOD             reduce using rule 106 (unary_expression -> postfix_expression .)
    PLUS            reduce using rule 106 (unary_expression -> postfix_expression .)
    MINUS           reduce using rule 106 (unary_expression -> postfix_expression .)
    LT              reduce using rule 106 (unary_expression -> postfix_expression .)
    LE              reduce using rule 106 (unary_expression -> postfix_expression .)
    HT              reduce using rule 106 (unary_expression -> postfix_expression .)
    HE              reduce using rule 106 (unary_expression -> postfix_expression .)
    EQUALS          reduce using rule 106 (unary_expression -> postfix_expression .)
    DIFF            reduce using rule 106 (unary_expression -> postfix_expression .)
    AND             reduce using rule 106 (unary_expression -> postfix_expression .)
    OR              reduce using rule 106 (unary_expression -> postfix_expression .)
    RBRACKET        reduce using rule 106 (unary_expression -> postfix_expression .)
    EQ              reduce using rule 106 (unary_expression -> postfix_expression .)
    ASSIGN_TIMES    reduce using rule 106 (unary_expression -> postfix_expression .)
    ASSIGN_DIVIDE   reduce using rule 106 (unary_expression -> postfix_expression .)
    ASSIGN_MOD      reduce using rule 106 (unary_expression -> postfix_expression .)
    ASSIGN_PLUS     reduce using rule 106 (unary_expression -> postfix_expression .)
    ASSIGN_MINUS    reduce using rule 106 (unary_expression -> postfix_expression .)
    COMMA           reduce using rule 106 (unary_expression -> postfix_expression .)
    SEMI            reduce using rule 106 (unary_expression -> postfix_expression .)
    RPAREN          reduce using rule 106 (unary_expression -> postfix_expression .)
    RBRACE          reduce using rule 106 (unary_expression -> postfix_expression .)
    PLUSPLUS        shift and go to state 128
    MINUSMINUS      shift and go to state 129
    LBRACKET        shift and go to state 130
    LPAREN          shift and go to state 131


state 61

    (107) unary_expression -> PLUSPLUS . unary_expression
    (106) unary_expression -> . postfix_expression
    (107) unary_expression -> . PLUSPLUS unary_expression
    (108) unary_expression -> . MINUSMINUS unary_expression
    (109) unary_expression -> . unary_operator cast_expression
    (28) postfix_expression -> . primary_expression
    (29) postfix_expression -> . postfix_expression PLUSPLUS
    (30) postfix_expression -> . postfix_expression MINUSMINUS
    (31) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (32) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (36) unary_operator -> . ADDRESS
    (37) unary_operator -> . TIMES
    (38) unary_operator -> . PLUS
    (39) unary_operator -> . MINUS
    (40) unary_operator -> . NOT
    (92) primary_expression -> . identifier
    (93) primary_expression -> . constant
    (94) primary_expression -> . string_literal
    (95) primary_expression -> . LPAREN expression RPAREN
    (35) identifier -> . ID
    (48) constant -> . INT_CONST
    (49) constant -> . FLOAT_CONST
    (50) constant -> . CHAR_CONST
    (91) string_literal -> . STRING

    PLUSPLUS        shift and go to state 61
    MINUSMINUS      shift and go to state 62
    ADDRESS         shift and go to state 65
    TIMES           shift and go to state 55
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    NOT             shift and go to state 66
    LPAREN          shift and go to state 133
    ID              shift and go to state 18
    INT_CONST       shift and go to state 70
    FLOAT_CONST     shift and go to state 71
    CHAR_CONST      shift and go to state 72
    STRING          shift and go to state 73

    unary_expression               shift and go to state 132
    postfix_expression             shift and go to state 60
    unary_operator                 shift and go to state 63
    primary_expression             shift and go to state 64
    identifier                     shift and go to state 67
    constant                       shift and go to state 68
    string_literal                 shift and go to state 69

state 62

    (108) unary_expression -> MINUSMINUS . unary_expression
    (106) unary_expression -> . postfix_expression
    (107) unary_expression -> . PLUSPLUS unary_expression
    (108) unary_expression -> . MINUSMINUS unary_expression
    (109) unary_expression -> . unary_operator cast_expression
    (28) postfix_expression -> . primary_expression
    (29) postfix_expression -> . postfix_expression PLUSPLUS
    (30) postfix_expression -> . postfix_expression MINUSMINUS
    (31) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (32) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (36) unary_operator -> . ADDRESS
    (37) unary_operator -> . TIMES
    (38) unary_operator -> . PLUS
    (39) unary_operator -> . MINUS
    (40) unary_operator -> . NOT
    (92) primary_expression -> . identifier
    (93) primary_expression -> . constant
    (94) primary_expression -> . string_literal
    (95) primary_expression -> . LPAREN expression RPAREN
    (35) identifier -> . ID
    (48) constant -> . INT_CONST
    (49) constant -> . FLOAT_CONST
    (50) constant -> . CHAR_CONST
    (91) string_literal -> . STRING

    PLUSPLUS        shift and go to state 61
    MINUSMINUS      shift and go to state 62
    ADDRESS         shift and go to state 65
    TIMES           shift and go to state 55
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    NOT             shift and go to state 66
    LPAREN          shift and go to state 133
    ID              shift and go to state 18
    INT_CONST       shift and go to state 70
    FLOAT_CONST     shift and go to state 71
    CHAR_CONST      shift and go to state 72
    STRING          shift and go to state 73

    unary_expression               shift and go to state 134
    postfix_expression             shift and go to state 60
    unary_operator                 shift and go to state 63
    primary_expression             shift and go to state 64
    identifier                     shift and go to state 67
    constant                       shift and go to state 68
    string_literal                 shift and go to state 69

state 63

    (109) unary_expression -> unary_operator . cast_expression
    (33) cast_expression -> . unary_expression
    (34) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (106) unary_expression -> . postfix_expression
    (107) unary_expression -> . PLUSPLUS unary_expression
    (108) unary_expression -> . MINUSMINUS unary_expression
    (109) unary_expression -> . unary_operator cast_expression
    (28) postfix_expression -> . primary_expression
    (29) postfix_expression -> . postfix_expression PLUSPLUS
    (30) postfix_expression -> . postfix_expression MINUSMINUS
    (31) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (32) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (36) unary_operator -> . ADDRESS
    (37) unary_operator -> . TIMES
    (38) unary_operator -> . PLUS
    (39) unary_operator -> . MINUS
    (40) unary_operator -> . NOT
    (92) primary_expression -> . identifier
    (93) primary_expression -> . constant
    (94) primary_expression -> . string_literal
    (95) primary_expression -> . LPAREN expression RPAREN
    (35) identifier -> . ID
    (48) constant -> . INT_CONST
    (49) constant -> . FLOAT_CONST
    (50) constant -> . CHAR_CONST
    (91) string_literal -> . STRING

    LPAREN          shift and go to state 59
    PLUSPLUS        shift and go to state 61
    MINUSMINUS      shift and go to state 62
    ADDRESS         shift and go to state 65
    TIMES           shift and go to state 55
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    NOT             shift and go to state 66
    ID              shift and go to state 18
    INT_CONST       shift and go to state 70
    FLOAT_CONST     shift and go to state 71
    CHAR_CONST      shift and go to state 72
    STRING          shift and go to state 73

    unary_operator                 shift and go to state 63
    cast_expression                shift and go to state 135
    unary_expression               shift and go to state 58
    postfix_expression             shift and go to state 60
    primary_expression             shift and go to state 64
    identifier                     shift and go to state 67
    constant                       shift and go to state 68
    string_literal                 shift and go to state 69

state 64

    (28) postfix_expression -> primary_expression .

    PLUSPLUS        reduce using rule 28 (postfix_expression -> primary_expression .)
    MINUSMINUS      reduce using rule 28 (postfix_expression -> primary_expression .)
    LBRACKET        reduce using rule 28 (postfix_expression -> primary_expression .)
    LPAREN          reduce using rule 28 (postfix_expression -> primary_expression .)
    TIMES           reduce using rule 28 (postfix_expression -> primary_expression .)
    DIVIDE          reduce using rule 28 (postfix_expression -> primary_expression .)
    MOD             reduce using rule 28 (postfix_expression -> primary_expression .)
    PLUS            reduce using rule 28 (postfix_expression -> primary_expression .)
    MINUS           reduce using rule 28 (postfix_expression -> primary_expression .)
    LT              reduce using rule 28 (postfix_expression -> primary_expression .)
    LE              reduce using rule 28 (postfix_expression -> primary_expression .)
    HT              reduce using rule 28 (postfix_expression -> primary_expression .)
    HE              reduce using rule 28 (postfix_expression -> primary_expression .)
    EQUALS          reduce using rule 28 (postfix_expression -> primary_expression .)
    DIFF            reduce using rule 28 (postfix_expression -> primary_expression .)
    AND             reduce using rule 28 (postfix_expression -> primary_expression .)
    OR              reduce using rule 28 (postfix_expression -> primary_expression .)
    RBRACKET        reduce using rule 28 (postfix_expression -> primary_expression .)
    EQ              reduce using rule 28 (postfix_expression -> primary_expression .)
    ASSIGN_TIMES    reduce using rule 28 (postfix_expression -> primary_expression .)
    ASSIGN_DIVIDE   reduce using rule 28 (postfix_expression -> primary_expression .)
    ASSIGN_MOD      reduce using rule 28 (postfix_expression -> primary_expression .)
    ASSIGN_PLUS     reduce using rule 28 (postfix_expression -> primary_expression .)
    ASSIGN_MINUS    reduce using rule 28 (postfix_expression -> primary_expression .)
    COMMA           reduce using rule 28 (postfix_expression -> primary_expression .)
    SEMI            reduce using rule 28 (postfix_expression -> primary_expression .)
    RPAREN          reduce using rule 28 (postfix_expression -> primary_expression .)
    RBRACE          reduce using rule 28 (postfix_expression -> primary_expression .)


state 65

    (36) unary_operator -> ADDRESS .

    LPAREN          reduce using rule 36 (unary_operator -> ADDRESS .)
    PLUSPLUS        reduce using rule 36 (unary_operator -> ADDRESS .)
    MINUSMINUS      reduce using rule 36 (unary_operator -> ADDRESS .)
    ADDRESS         reduce using rule 36 (unary_operator -> ADDRESS .)
    TIMES           reduce using rule 36 (unary_operator -> ADDRESS .)
    PLUS            reduce using rule 36 (unary_operator -> ADDRESS .)
    MINUS           reduce using rule 36 (unary_operator -> ADDRESS .)
    NOT             reduce using rule 36 (unary_operator -> ADDRESS .)
    ID              reduce using rule 36 (unary_operator -> ADDRESS .)
    INT_CONST       reduce using rule 36 (unary_operator -> ADDRESS .)
    FLOAT_CONST     reduce using rule 36 (unary_operator -> ADDRESS .)
    CHAR_CONST      reduce using rule 36 (unary_operator -> ADDRESS .)
    STRING          reduce using rule 36 (unary_operator -> ADDRESS .)


state 66

    (40) unary_operator -> NOT .

    LPAREN          reduce using rule 40 (unary_operator -> NOT .)
    PLUSPLUS        reduce using rule 40 (unary_operator -> NOT .)
    MINUSMINUS      reduce using rule 40 (unary_operator -> NOT .)
    ADDRESS         reduce using rule 40 (unary_operator -> NOT .)
    TIMES           reduce using rule 40 (unary_operator -> NOT .)
    PLUS            reduce using rule 40 (unary_operator -> NOT .)
    MINUS           reduce using rule 40 (unary_operator -> NOT .)
    NOT             reduce using rule 40 (unary_operator -> NOT .)
    ID              reduce using rule 40 (unary_operator -> NOT .)
    INT_CONST       reduce using rule 40 (unary_operator -> NOT .)
    FLOAT_CONST     reduce using rule 40 (unary_operator -> NOT .)
    CHAR_CONST      reduce using rule 40 (unary_operator -> NOT .)
    STRING          reduce using rule 40 (unary_operator -> NOT .)


state 67

    (92) primary_expression -> identifier .

    PLUSPLUS        reduce using rule 92 (primary_expression -> identifier .)
    MINUSMINUS      reduce using rule 92 (primary_expression -> identifier .)
    LBRACKET        reduce using rule 92 (primary_expression -> identifier .)
    LPAREN          reduce using rule 92 (primary_expression -> identifier .)
    TIMES           reduce using rule 92 (primary_expression -> identifier .)
    DIVIDE          reduce using rule 92 (primary_expression -> identifier .)
    MOD             reduce using rule 92 (primary_expression -> identifier .)
    PLUS            reduce using rule 92 (primary_expression -> identifier .)
    MINUS           reduce using rule 92 (primary_expression -> identifier .)
    LT              reduce using rule 92 (primary_expression -> identifier .)
    LE              reduce using rule 92 (primary_expression -> identifier .)
    HT              reduce using rule 92 (primary_expression -> identifier .)
    HE              reduce using rule 92 (primary_expression -> identifier .)
    EQUALS          reduce using rule 92 (primary_expression -> identifier .)
    DIFF            reduce using rule 92 (primary_expression -> identifier .)
    AND             reduce using rule 92 (primary_expression -> identifier .)
    OR              reduce using rule 92 (primary_expression -> identifier .)
    RBRACKET        reduce using rule 92 (primary_expression -> identifier .)
    EQ              reduce using rule 92 (primary_expression -> identifier .)
    ASSIGN_TIMES    reduce using rule 92 (primary_expression -> identifier .)
    ASSIGN_DIVIDE   reduce using rule 92 (primary_expression -> identifier .)
    ASSIGN_MOD      reduce using rule 92 (primary_expression -> identifier .)
    ASSIGN_PLUS     reduce using rule 92 (primary_expression -> identifier .)
    ASSIGN_MINUS    reduce using rule 92 (primary_expression -> identifier .)
    COMMA           reduce using rule 92 (primary_expression -> identifier .)
    SEMI            reduce using rule 92 (primary_expression -> identifier .)
    RPAREN          reduce using rule 92 (primary_expression -> identifier .)
    RBRACE          reduce using rule 92 (primary_expression -> identifier .)


state 68

    (93) primary_expression -> constant .

    PLUSPLUS        reduce using rule 93 (primary_expression -> constant .)
    MINUSMINUS      reduce using rule 93 (primary_expression -> constant .)
    LBRACKET        reduce using rule 93 (primary_expression -> constant .)
    LPAREN          reduce using rule 93 (primary_expression -> constant .)
    TIMES           reduce using rule 93 (primary_expression -> constant .)
    DIVIDE          reduce using rule 93 (primary_expression -> constant .)
    MOD             reduce using rule 93 (primary_expression -> constant .)
    PLUS            reduce using rule 93 (primary_expression -> constant .)
    MINUS           reduce using rule 93 (primary_expression -> constant .)
    LT              reduce using rule 93 (primary_expression -> constant .)
    LE              reduce using rule 93 (primary_expression -> constant .)
    HT              reduce using rule 93 (primary_expression -> constant .)
    HE              reduce using rule 93 (primary_expression -> constant .)
    EQUALS          reduce using rule 93 (primary_expression -> constant .)
    DIFF            reduce using rule 93 (primary_expression -> constant .)
    AND             reduce using rule 93 (primary_expression -> constant .)
    OR              reduce using rule 93 (primary_expression -> constant .)
    RBRACKET        reduce using rule 93 (primary_expression -> constant .)
    EQ              reduce using rule 93 (primary_expression -> constant .)
    ASSIGN_TIMES    reduce using rule 93 (primary_expression -> constant .)
    ASSIGN_DIVIDE   reduce using rule 93 (primary_expression -> constant .)
    ASSIGN_MOD      reduce using rule 93 (primary_expression -> constant .)
    ASSIGN_PLUS     reduce using rule 93 (primary_expression -> constant .)
    ASSIGN_MINUS    reduce using rule 93 (primary_expression -> constant .)
    COMMA           reduce using rule 93 (primary_expression -> constant .)
    SEMI            reduce using rule 93 (primary_expression -> constant .)
    RPAREN          reduce using rule 93 (primary_expression -> constant .)
    RBRACE          reduce using rule 93 (primary_expression -> constant .)


state 69

    (94) primary_expression -> string_literal .

    PLUSPLUS        reduce using rule 94 (primary_expression -> string_literal .)
    MINUSMINUS      reduce using rule 94 (primary_expression -> string_literal .)
    LBRACKET        reduce using rule 94 (primary_expression -> string_literal .)
    LPAREN          reduce using rule 94 (primary_expression -> string_literal .)
    TIMES           reduce using rule 94 (primary_expression -> string_literal .)
    DIVIDE          reduce using rule 94 (primary_expression -> string_literal .)
    MOD             reduce using rule 94 (primary_expression -> string_literal .)
    PLUS            reduce using rule 94 (primary_expression -> string_literal .)
    MINUS           reduce using rule 94 (primary_expression -> string_literal .)
    LT              reduce using rule 94 (primary_expression -> string_literal .)
    LE              reduce using rule 94 (primary_expression -> string_literal .)
    HT              reduce using rule 94 (primary_expression -> string_literal .)
    HE              reduce using rule 94 (primary_expression -> string_literal .)
    EQUALS          reduce using rule 94 (primary_expression -> string_literal .)
    DIFF            reduce using rule 94 (primary_expression -> string_literal .)
    AND             reduce using rule 94 (primary_expression -> string_literal .)
    OR              reduce using rule 94 (primary_expression -> string_literal .)
    RBRACKET        reduce using rule 94 (primary_expression -> string_literal .)
    EQ              reduce using rule 94 (primary_expression -> string_literal .)
    ASSIGN_TIMES    reduce using rule 94 (primary_expression -> string_literal .)
    ASSIGN_DIVIDE   reduce using rule 94 (primary_expression -> string_literal .)
    ASSIGN_MOD      reduce using rule 94 (primary_expression -> string_literal .)
    ASSIGN_PLUS     reduce using rule 94 (primary_expression -> string_literal .)
    ASSIGN_MINUS    reduce using rule 94 (primary_expression -> string_literal .)
    COMMA           reduce using rule 94 (primary_expression -> string_literal .)
    SEMI            reduce using rule 94 (primary_expression -> string_literal .)
    RPAREN          reduce using rule 94 (primary_expression -> string_literal .)
    RBRACE          reduce using rule 94 (primary_expression -> string_literal .)


state 70

    (48) constant -> INT_CONST .

    PLUSPLUS        reduce using rule 48 (constant -> INT_CONST .)
    MINUSMINUS      reduce using rule 48 (constant -> INT_CONST .)
    LBRACKET        reduce using rule 48 (constant -> INT_CONST .)
    LPAREN          reduce using rule 48 (constant -> INT_CONST .)
    TIMES           reduce using rule 48 (constant -> INT_CONST .)
    DIVIDE          reduce using rule 48 (constant -> INT_CONST .)
    MOD             reduce using rule 48 (constant -> INT_CONST .)
    PLUS            reduce using rule 48 (constant -> INT_CONST .)
    MINUS           reduce using rule 48 (constant -> INT_CONST .)
    LT              reduce using rule 48 (constant -> INT_CONST .)
    LE              reduce using rule 48 (constant -> INT_CONST .)
    HT              reduce using rule 48 (constant -> INT_CONST .)
    HE              reduce using rule 48 (constant -> INT_CONST .)
    EQUALS          reduce using rule 48 (constant -> INT_CONST .)
    DIFF            reduce using rule 48 (constant -> INT_CONST .)
    AND             reduce using rule 48 (constant -> INT_CONST .)
    OR              reduce using rule 48 (constant -> INT_CONST .)
    RBRACKET        reduce using rule 48 (constant -> INT_CONST .)
    EQ              reduce using rule 48 (constant -> INT_CONST .)
    ASSIGN_TIMES    reduce using rule 48 (constant -> INT_CONST .)
    ASSIGN_DIVIDE   reduce using rule 48 (constant -> INT_CONST .)
    ASSIGN_MOD      reduce using rule 48 (constant -> INT_CONST .)
    ASSIGN_PLUS     reduce using rule 48 (constant -> INT_CONST .)
    ASSIGN_MINUS    reduce using rule 48 (constant -> INT_CONST .)
    COMMA           reduce using rule 48 (constant -> INT_CONST .)
    SEMI            reduce using rule 48 (constant -> INT_CONST .)
    RPAREN          reduce using rule 48 (constant -> INT_CONST .)
    RBRACE          reduce using rule 48 (constant -> INT_CONST .)


state 71

    (49) constant -> FLOAT_CONST .

    PLUSPLUS        reduce using rule 49 (constant -> FLOAT_CONST .)
    MINUSMINUS      reduce using rule 49 (constant -> FLOAT_CONST .)
    LBRACKET        reduce using rule 49 (constant -> FLOAT_CONST .)
    LPAREN          reduce using rule 49 (constant -> FLOAT_CONST .)
    TIMES           reduce using rule 49 (constant -> FLOAT_CONST .)
    DIVIDE          reduce using rule 49 (constant -> FLOAT_CONST .)
    MOD             reduce using rule 49 (constant -> FLOAT_CONST .)
    PLUS            reduce using rule 49 (constant -> FLOAT_CONST .)
    MINUS           reduce using rule 49 (constant -> FLOAT_CONST .)
    LT              reduce using rule 49 (constant -> FLOAT_CONST .)
    LE              reduce using rule 49 (constant -> FLOAT_CONST .)
    HT              reduce using rule 49 (constant -> FLOAT_CONST .)
    HE              reduce using rule 49 (constant -> FLOAT_CONST .)
    EQUALS          reduce using rule 49 (constant -> FLOAT_CONST .)
    DIFF            reduce using rule 49 (constant -> FLOAT_CONST .)
    AND             reduce using rule 49 (constant -> FLOAT_CONST .)
    OR              reduce using rule 49 (constant -> FLOAT_CONST .)
    RBRACKET        reduce using rule 49 (constant -> FLOAT_CONST .)
    EQ              reduce using rule 49 (constant -> FLOAT_CONST .)
    ASSIGN_TIMES    reduce using rule 49 (constant -> FLOAT_CONST .)
    ASSIGN_DIVIDE   reduce using rule 49 (constant -> FLOAT_CONST .)
    ASSIGN_MOD      reduce using rule 49 (constant -> FLOAT_CONST .)
    ASSIGN_PLUS     reduce using rule 49 (constant -> FLOAT_CONST .)
    ASSIGN_MINUS    reduce using rule 49 (constant -> FLOAT_CONST .)
    COMMA           reduce using rule 49 (constant -> FLOAT_CONST .)
    SEMI            reduce using rule 49 (constant -> FLOAT_CONST .)
    RPAREN          reduce using rule 49 (constant -> FLOAT_CONST .)
    RBRACE          reduce using rule 49 (constant -> FLOAT_CONST .)


state 72

    (50) constant -> CHAR_CONST .

    PLUSPLUS        reduce using rule 50 (constant -> CHAR_CONST .)
    MINUSMINUS      reduce using rule 50 (constant -> CHAR_CONST .)
    LBRACKET        reduce using rule 50 (constant -> CHAR_CONST .)
    LPAREN          reduce using rule 50 (constant -> CHAR_CONST .)
    TIMES           reduce using rule 50 (constant -> CHAR_CONST .)
    DIVIDE          reduce using rule 50 (constant -> CHAR_CONST .)
    MOD             reduce using rule 50 (constant -> CHAR_CONST .)
    PLUS            reduce using rule 50 (constant -> CHAR_CONST .)
    MINUS           reduce using rule 50 (constant -> CHAR_CONST .)
    LT              reduce using rule 50 (constant -> CHAR_CONST .)
    LE              reduce using rule 50 (constant -> CHAR_CONST .)
    HT              reduce using rule 50 (constant -> CHAR_CONST .)
    HE              reduce using rule 50 (constant -> CHAR_CONST .)
    EQUALS          reduce using rule 50 (constant -> CHAR_CONST .)
    DIFF            reduce using rule 50 (constant -> CHAR_CONST .)
    AND             reduce using rule 50 (constant -> CHAR_CONST .)
    OR              reduce using rule 50 (constant -> CHAR_CONST .)
    RBRACKET        reduce using rule 50 (constant -> CHAR_CONST .)
    EQ              reduce using rule 50 (constant -> CHAR_CONST .)
    ASSIGN_TIMES    reduce using rule 50 (constant -> CHAR_CONST .)
    ASSIGN_DIVIDE   reduce using rule 50 (constant -> CHAR_CONST .)
    ASSIGN_MOD      reduce using rule 50 (constant -> CHAR_CONST .)
    ASSIGN_PLUS     reduce using rule 50 (constant -> CHAR_CONST .)
    ASSIGN_MINUS    reduce using rule 50 (constant -> CHAR_CONST .)
    COMMA           reduce using rule 50 (constant -> CHAR_CONST .)
    SEMI            reduce using rule 50 (constant -> CHAR_CONST .)
    RPAREN          reduce using rule 50 (constant -> CHAR_CONST .)
    RBRACE          reduce using rule 50 (constant -> CHAR_CONST .)


state 73

    (91) string_literal -> STRING .

    PLUSPLUS        reduce using rule 91 (string_literal -> STRING .)
    MINUSMINUS      reduce using rule 91 (string_literal -> STRING .)
    LBRACKET        reduce using rule 91 (string_literal -> STRING .)
    LPAREN          reduce using rule 91 (string_literal -> STRING .)
    TIMES           reduce using rule 91 (string_literal -> STRING .)
    DIVIDE          reduce using rule 91 (string_literal -> STRING .)
    MOD             reduce using rule 91 (string_literal -> STRING .)
    PLUS            reduce using rule 91 (string_literal -> STRING .)
    MINUS           reduce using rule 91 (string_literal -> STRING .)
    LT              reduce using rule 91 (string_literal -> STRING .)
    LE              reduce using rule 91 (string_literal -> STRING .)
    HT              reduce using rule 91 (string_literal -> STRING .)
    HE              reduce using rule 91 (string_literal -> STRING .)
    EQUALS          reduce using rule 91 (string_literal -> STRING .)
    DIFF            reduce using rule 91 (string_literal -> STRING .)
    AND             reduce using rule 91 (string_literal -> STRING .)
    OR              reduce using rule 91 (string_literal -> STRING .)
    RBRACKET        reduce using rule 91 (string_literal -> STRING .)
    EQ              reduce using rule 91 (string_literal -> STRING .)
    ASSIGN_TIMES    reduce using rule 91 (string_literal -> STRING .)
    ASSIGN_DIVIDE   reduce using rule 91 (string_literal -> STRING .)
    ASSIGN_MOD      reduce using rule 91 (string_literal -> STRING .)
    ASSIGN_PLUS     reduce using rule 91 (string_literal -> STRING .)
    ASSIGN_MINUS    reduce using rule 91 (string_literal -> STRING .)
    COMMA           reduce using rule 91 (string_literal -> STRING .)
    SEMI            reduce using rule 91 (string_literal -> STRING .)
    RPAREN          reduce using rule 91 (string_literal -> STRING .)
    RBRACE          reduce using rule 91 (string_literal -> STRING .)


state 74

    (21) direct_declarator -> LPAREN declarator RPAREN .

    LPAREN          reduce using rule 21 (direct_declarator -> LPAREN declarator RPAREN .)
    LBRACKET        reduce using rule 21 (direct_declarator -> LPAREN declarator RPAREN .)
    VOID            reduce using rule 21 (direct_declarator -> LPAREN declarator RPAREN .)
    INT             reduce using rule 21 (direct_declarator -> LPAREN declarator RPAREN .)
    FLOAT           reduce using rule 21 (direct_declarator -> LPAREN declarator RPAREN .)
    CHAR            reduce using rule 21 (direct_declarator -> LPAREN declarator RPAREN .)
    LBRACE          reduce using rule 21 (direct_declarator -> LPAREN declarator RPAREN .)
    EQ              reduce using rule 21 (direct_declarator -> LPAREN declarator RPAREN .)
    COMMA           reduce using rule 21 (direct_declarator -> LPAREN declarator RPAREN .)
    SEMI            reduce using rule 21 (direct_declarator -> LPAREN declarator RPAREN .)
    RPAREN          reduce using rule 21 (direct_declarator -> LPAREN declarator RPAREN .)


state 75

    (68) function_definition -> type_specifier declarator declaration_list_opt compound_statement .

    VOID            reduce using rule 68 (function_definition -> type_specifier declarator declaration_list_opt compound_statement .)
    INT             reduce using rule 68 (function_definition -> type_specifier declarator declaration_list_opt compound_statement .)
    FLOAT           reduce using rule 68 (function_definition -> type_specifier declarator declaration_list_opt compound_statement .)
    CHAR            reduce using rule 68 (function_definition -> type_specifier declarator declaration_list_opt compound_statement .)
    TIMES           reduce using rule 68 (function_definition -> type_specifier declarator declaration_list_opt compound_statement .)
    LPAREN          reduce using rule 68 (function_definition -> type_specifier declarator declaration_list_opt compound_statement .)
    ID              reduce using rule 68 (function_definition -> type_specifier declarator declaration_list_opt compound_statement .)
    $end            reduce using rule 68 (function_definition -> type_specifier declarator declaration_list_opt compound_statement .)


state 76

    (15) init_declarator -> declarator EQ initializer .

    COMMA           reduce using rule 15 (init_declarator -> declarator EQ initializer .)
    SEMI            reduce using rule 15 (init_declarator -> declarator EQ initializer .)


state 77

    (25) initializer -> assignment_expression .

    COMMA           reduce using rule 25 (initializer -> assignment_expression .)
    SEMI            reduce using rule 25 (initializer -> assignment_expression .)
    RBRACE          reduce using rule 25 (initializer -> assignment_expression .)


state 78

    (26) initializer -> LBRACE . initializer_list RBRACE
    (27) initializer -> LBRACE . initializer_list COMMA RBRACE
    (62) initializer_list -> . initializer
    (63) initializer_list -> . initializer_list COMMA initializer
    (25) initializer -> . assignment_expression
    (26) initializer -> . LBRACE initializer_list RBRACE
    (27) initializer -> . LBRACE initializer_list COMMA RBRACE
    (98) assignment_expression -> . binary_expression
    (99) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (110) binary_expression -> . cast_expression
    (111) binary_expression -> . binary_expression TIMES binary_expression
    (112) binary_expression -> . binary_expression DIVIDE binary_expression
    (113) binary_expression -> . binary_expression MOD binary_expression
    (114) binary_expression -> . binary_expression PLUS binary_expression
    (115) binary_expression -> . binary_expression MINUS binary_expression
    (116) binary_expression -> . binary_expression LT binary_expression
    (117) binary_expression -> . binary_expression LE binary_expression
    (118) binary_expression -> . binary_expression HT binary_expression
    (119) binary_expression -> . binary_expression HE binary_expression
    (120) binary_expression -> . binary_expression EQUALS binary_expression
    (121) binary_expression -> . binary_expression DIFF binary_expression
    (122) binary_expression -> . binary_expression AND binary_expression
    (123) binary_expression -> . binary_expression OR binary_expression
    (106) unary_expression -> . postfix_expression
    (107) unary_expression -> . PLUSPLUS unary_expression
    (108) unary_expression -> . MINUSMINUS unary_expression
    (109) unary_expression -> . unary_operator cast_expression
    (33) cast_expression -> . unary_expression
    (34) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (28) postfix_expression -> . primary_expression
    (29) postfix_expression -> . postfix_expression PLUSPLUS
    (30) postfix_expression -> . postfix_expression MINUSMINUS
    (31) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (32) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (36) unary_operator -> . ADDRESS
    (37) unary_operator -> . TIMES
    (38) unary_operator -> . PLUS
    (39) unary_operator -> . MINUS
    (40) unary_operator -> . NOT
    (92) primary_expression -> . identifier
    (93) primary_expression -> . constant
    (94) primary_expression -> . string_literal
    (95) primary_expression -> . LPAREN expression RPAREN
    (35) identifier -> . ID
    (48) constant -> . INT_CONST
    (49) constant -> . FLOAT_CONST
    (50) constant -> . CHAR_CONST
    (91) string_literal -> . STRING

    LBRACE          shift and go to state 78
    PLUSPLUS        shift and go to state 61
    MINUSMINUS      shift and go to state 62
    LPAREN          shift and go to state 59
    ADDRESS         shift and go to state 65
    TIMES           shift and go to state 55
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    NOT             shift and go to state 66
    ID              shift and go to state 18
    INT_CONST       shift and go to state 70
    FLOAT_CONST     shift and go to state 71
    CHAR_CONST      shift and go to state 72
    STRING          shift and go to state 73

    initializer_list               shift and go to state 136
    initializer                    shift and go to state 137
    assignment_expression          shift and go to state 77
    binary_expression              shift and go to state 79
    unary_expression               shift and go to state 80
    cast_expression                shift and go to state 54
    postfix_expression             shift and go to state 60
    unary_operator                 shift and go to state 63
    primary_expression             shift and go to state 64
    identifier                     shift and go to state 67
    constant                       shift and go to state 68
    string_literal                 shift and go to state 69

state 79

    (98) assignment_expression -> binary_expression .
    (111) binary_expression -> binary_expression . TIMES binary_expression
    (112) binary_expression -> binary_expression . DIVIDE binary_expression
    (113) binary_expression -> binary_expression . MOD binary_expression
    (114) binary_expression -> binary_expression . PLUS binary_expression
    (115) binary_expression -> binary_expression . MINUS binary_expression
    (116) binary_expression -> binary_expression . LT binary_expression
    (117) binary_expression -> binary_expression . LE binary_expression
    (118) binary_expression -> binary_expression . HT binary_expression
    (119) binary_expression -> binary_expression . HE binary_expression
    (120) binary_expression -> binary_expression . EQUALS binary_expression
    (121) binary_expression -> binary_expression . DIFF binary_expression
    (122) binary_expression -> binary_expression . AND binary_expression
    (123) binary_expression -> binary_expression . OR binary_expression

    COMMA           reduce using rule 98 (assignment_expression -> binary_expression .)
    SEMI            reduce using rule 98 (assignment_expression -> binary_expression .)
    RPAREN          reduce using rule 98 (assignment_expression -> binary_expression .)
    RBRACE          reduce using rule 98 (assignment_expression -> binary_expression .)
    RBRACKET        reduce using rule 98 (assignment_expression -> binary_expression .)
    TIMES           shift and go to state 113
    DIVIDE          shift and go to state 114
    MOD             shift and go to state 115
    PLUS            shift and go to state 116
    MINUS           shift and go to state 117
    LT              shift and go to state 118
    LE              shift and go to state 119
    HT              shift and go to state 120
    HE              shift and go to state 121
    EQUALS          shift and go to state 122
    DIFF            shift and go to state 123
    AND             shift and go to state 124
    OR              shift and go to state 125


state 80

    (99) assignment_expression -> unary_expression . assignment_operator assignment_expression
    (33) cast_expression -> unary_expression .
    (100) assignment_operator -> . EQ
    (101) assignment_operator -> . ASSIGN_TIMES
    (102) assignment_operator -> . ASSIGN_DIVIDE
    (103) assignment_operator -> . ASSIGN_MOD
    (104) assignment_operator -> . ASSIGN_PLUS
    (105) assignment_operator -> . ASSIGN_MINUS

    TIMES           reduce using rule 33 (cast_expression -> unary_expression .)
    DIVIDE          reduce using rule 33 (cast_expression -> unary_expression .)
    MOD             reduce using rule 33 (cast_expression -> unary_expression .)
    PLUS            reduce using rule 33 (cast_expression -> unary_expression .)
    MINUS           reduce using rule 33 (cast_expression -> unary_expression .)
    LT              reduce using rule 33 (cast_expression -> unary_expression .)
    LE              reduce using rule 33 (cast_expression -> unary_expression .)
    HT              reduce using rule 33 (cast_expression -> unary_expression .)
    HE              reduce using rule 33 (cast_expression -> unary_expression .)
    EQUALS          reduce using rule 33 (cast_expression -> unary_expression .)
    DIFF            reduce using rule 33 (cast_expression -> unary_expression .)
    AND             reduce using rule 33 (cast_expression -> unary_expression .)
    OR              reduce using rule 33 (cast_expression -> unary_expression .)
    COMMA           reduce using rule 33 (cast_expression -> unary_expression .)
    SEMI            reduce using rule 33 (cast_expression -> unary_expression .)
    RPAREN          reduce using rule 33 (cast_expression -> unary_expression .)
    RBRACE          reduce using rule 33 (cast_expression -> unary_expression .)
    RBRACKET        reduce using rule 33 (cast_expression -> unary_expression .)
    EQ              shift and go to state 139
    ASSIGN_TIMES    shift and go to state 140
    ASSIGN_DIVIDE   shift and go to state 141
    ASSIGN_MOD      shift and go to state 142
    ASSIGN_PLUS     shift and go to state 143
    ASSIGN_MINUS    shift and go to state 144

    assignment_operator            shift and go to state 138

state 81

    (17) init_declarator_list -> init_declarator_list COMMA init_declarator .

    COMMA           reduce using rule 17 (init_declarator_list -> init_declarator_list COMMA init_declarator .)
    SEMI            reduce using rule 17 (init_declarator_list -> init_declarator_list COMMA init_declarator .)


state 82

    (74) compound_statement -> LBRACE block_item_list_opt . RBRACE

    RBRACE          shift and go to state 145


state 83

    (55) block_item_list_opt -> block_item_list .
    (54) block_item_list -> block_item_list . block_item
    (51) block_item -> . statement
    (52) block_item -> . declaration
    (75) statement -> . expression_statement
    (76) statement -> . selection_statement
    (77) statement -> . jump_statement
    (78) statement -> . print_statement
    (79) statement -> . assert_statement
    (80) statement -> . read_statement
    (81) statement -> . iteration_statement
    (82) statement -> . compound_statement
    (6) declaration -> . decl_body SEMI
    (73) expression_statement -> . expression_opt SEMI
    (57) selection_statement -> . IF LPAREN expression RPAREN statement
    (58) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (83) jump_statement -> . BREAK SEMI
    (84) jump_statement -> . RETURN expression SEMI
    (85) jump_statement -> . RETURN SEMI
    (71) print_statement -> . PRINT LPAREN expression_opt RPAREN SEMI
    (70) assert_statement -> . ASSERT expression SEMI
    (72) read_statement -> . READ LPAREN argument_expression_list RPAREN SEMI
    (59) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (60) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (61) iteration_statement -> . FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement
    (74) compound_statement -> . LBRACE block_item_list_opt RBRACE
    (11) decl_body -> . type_specifier init_declarator_list_opt
    (96) expression_opt -> . expression
    (97) expression_opt -> . empty
    (41) type_specifier -> . VOID
    (42) type_specifier -> . INT
    (43) type_specifier -> . FLOAT
    (44) type_specifier -> . CHAR
    (89) expression -> . assignment_expression
    (90) expression -> . expression COMMA assignment_expression
    (124) empty -> .
    (98) assignment_expression -> . binary_expression
    (99) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (110) binary_expression -> . cast_expression
    (111) binary_expression -> . binary_expression TIMES binary_expression
    (112) binary_expression -> . binary_expression DIVIDE binary_expression
    (113) binary_expression -> . binary_expression MOD binary_expression
    (114) binary_expression -> . binary_expression PLUS binary_expression
    (115) binary_expression -> . binary_expression MINUS binary_expression
    (116) binary_expression -> . binary_expression LT binary_expression
    (117) binary_expression -> . binary_expression LE binary_expression
    (118) binary_expression -> . binary_expression HT binary_expression
    (119) binary_expression -> . binary_expression HE binary_expression
    (120) binary_expression -> . binary_expression EQUALS binary_expression
    (121) binary_expression -> . binary_expression DIFF binary_expression
    (122) binary_expression -> . binary_expression AND binary_expression
    (123) binary_expression -> . binary_expression OR binary_expression
    (106) unary_expression -> . postfix_expression
    (107) unary_expression -> . PLUSPLUS unary_expression
    (108) unary_expression -> . MINUSMINUS unary_expression
    (109) unary_expression -> . unary_operator cast_expression
    (33) cast_expression -> . unary_expression
    (34) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (28) postfix_expression -> . primary_expression
    (29) postfix_expression -> . postfix_expression PLUSPLUS
    (30) postfix_expression -> . postfix_expression MINUSMINUS
    (31) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (32) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (36) unary_operator -> . ADDRESS
    (37) unary_operator -> . TIMES
    (38) unary_operator -> . PLUS
    (39) unary_operator -> . MINUS
    (40) unary_operator -> . NOT
    (92) primary_expression -> . identifier
    (93) primary_expression -> . constant
    (94) primary_expression -> . string_literal
    (95) primary_expression -> . LPAREN expression RPAREN
    (35) identifier -> . ID
    (48) constant -> . INT_CONST
    (49) constant -> . FLOAT_CONST
    (50) constant -> . CHAR_CONST
    (91) string_literal -> . STRING

    RBRACE          reduce using rule 55 (block_item_list_opt -> block_item_list .)
    IF              shift and go to state 97
    BREAK           shift and go to state 99
    RETURN          shift and go to state 100
    PRINT           shift and go to state 101
    ASSERT          shift and go to state 102
    READ            shift and go to state 103
    WHILE           shift and go to state 104
    FOR             shift and go to state 105
    LBRACE          shift and go to state 40
    VOID            shift and go to state 9
    INT             shift and go to state 10
    FLOAT           shift and go to state 11
    CHAR            shift and go to state 12
    SEMI            reduce using rule 124 (empty -> .)
    PLUSPLUS        shift and go to state 61
    MINUSMINUS      shift and go to state 62
    LPAREN          shift and go to state 59
    ADDRESS         shift and go to state 65
    TIMES           shift and go to state 55
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    NOT             shift and go to state 66
    ID              shift and go to state 18
    INT_CONST       shift and go to state 70
    FLOAT_CONST     shift and go to state 71
    CHAR_CONST      shift and go to state 72
    STRING          shift and go to state 73

    block_item                     shift and go to state 146
    statement                      shift and go to state 86
    declaration                    shift and go to state 87
    expression_statement           shift and go to state 88
    selection_statement            shift and go to state 89
    jump_statement                 shift and go to state 90
    print_statement                shift and go to state 91
    assert_statement               shift and go to state 92
    read_statement                 shift and go to state 93
    iteration_statement            shift and go to state 94
    compound_statement             shift and go to state 95
    decl_body                      shift and go to state 8
    expression_opt                 shift and go to state 96
    expression                     shift and go to state 98
    type_specifier                 shift and go to state 29
    empty                          shift and go to state 147
    assignment_expression          shift and go to state 106
    binary_expression              shift and go to state 79
    unary_expression               shift and go to state 80
    cast_expression                shift and go to state 54
    postfix_expression             shift and go to state 60
    unary_operator                 shift and go to state 63
    primary_expression             shift and go to state 64
    identifier                     shift and go to state 67
    constant                       shift and go to state 68
    string_literal                 shift and go to state 69

state 84

    (56) block_item_list_opt -> empty .
    (97) expression_opt -> empty .

    RBRACE          reduce using rule 56 (block_item_list_opt -> empty .)
    SEMI            reduce using rule 97 (expression_opt -> empty .)


state 85

    (53) block_item_list -> block_item .

    IF              reduce using rule 53 (block_item_list -> block_item .)
    BREAK           reduce using rule 53 (block_item_list -> block_item .)
    RETURN          reduce using rule 53 (block_item_list -> block_item .)
    PRINT           reduce using rule 53 (block_item_list -> block_item .)
    ASSERT          reduce using rule 53 (block_item_list -> block_item .)
    READ            reduce using rule 53 (block_item_list -> block_item .)
    WHILE           reduce using rule 53 (block_item_list -> block_item .)
    FOR             reduce using rule 53 (block_item_list -> block_item .)
    LBRACE          reduce using rule 53 (block_item_list -> block_item .)
    VOID            reduce using rule 53 (block_item_list -> block_item .)
    INT             reduce using rule 53 (block_item_list -> block_item .)
    FLOAT           reduce using rule 53 (block_item_list -> block_item .)
    CHAR            reduce using rule 53 (block_item_list -> block_item .)
    PLUSPLUS        reduce using rule 53 (block_item_list -> block_item .)
    MINUSMINUS      reduce using rule 53 (block_item_list -> block_item .)
    LPAREN          reduce using rule 53 (block_item_list -> block_item .)
    ADDRESS         reduce using rule 53 (block_item_list -> block_item .)
    TIMES           reduce using rule 53 (block_item_list -> block_item .)
    PLUS            reduce using rule 53 (block_item_list -> block_item .)
    MINUS           reduce using rule 53 (block_item_list -> block_item .)
    NOT             reduce using rule 53 (block_item_list -> block_item .)
    ID              reduce using rule 53 (block_item_list -> block_item .)
    INT_CONST       reduce using rule 53 (block_item_list -> block_item .)
    FLOAT_CONST     reduce using rule 53 (block_item_list -> block_item .)
    CHAR_CONST      reduce using rule 53 (block_item_list -> block_item .)
    STRING          reduce using rule 53 (block_item_list -> block_item .)
    SEMI            reduce using rule 53 (block_item_list -> block_item .)
    RBRACE          reduce using rule 53 (block_item_list -> block_item .)


state 86

    (51) block_item -> statement .

    IF              reduce using rule 51 (block_item -> statement .)
    BREAK           reduce using rule 51 (block_item -> statement .)
    RETURN          reduce using rule 51 (block_item -> statement .)
    PRINT           reduce using rule 51 (block_item -> statement .)
    ASSERT          reduce using rule 51 (block_item -> statement .)
    READ            reduce using rule 51 (block_item -> statement .)
    WHILE           reduce using rule 51 (block_item -> statement .)
    FOR             reduce using rule 51 (block_item -> statement .)
    LBRACE          reduce using rule 51 (block_item -> statement .)
    VOID            reduce using rule 51 (block_item -> statement .)
    INT             reduce using rule 51 (block_item -> statement .)
    FLOAT           reduce using rule 51 (block_item -> statement .)
    CHAR            reduce using rule 51 (block_item -> statement .)
    PLUSPLUS        reduce using rule 51 (block_item -> statement .)
    MINUSMINUS      reduce using rule 51 (block_item -> statement .)
    LPAREN          reduce using rule 51 (block_item -> statement .)
    ADDRESS         reduce using rule 51 (block_item -> statement .)
    TIMES           reduce using rule 51 (block_item -> statement .)
    PLUS            reduce using rule 51 (block_item -> statement .)
    MINUS           reduce using rule 51 (block_item -> statement .)
    NOT             reduce using rule 51 (block_item -> statement .)
    ID              reduce using rule 51 (block_item -> statement .)
    INT_CONST       reduce using rule 51 (block_item -> statement .)
    FLOAT_CONST     reduce using rule 51 (block_item -> statement .)
    CHAR_CONST      reduce using rule 51 (block_item -> statement .)
    STRING          reduce using rule 51 (block_item -> statement .)
    SEMI            reduce using rule 51 (block_item -> statement .)
    RBRACE          reduce using rule 51 (block_item -> statement .)


state 87

    (52) block_item -> declaration .

    IF              reduce using rule 52 (block_item -> declaration .)
    BREAK           reduce using rule 52 (block_item -> declaration .)
    RETURN          reduce using rule 52 (block_item -> declaration .)
    PRINT           reduce using rule 52 (block_item -> declaration .)
    ASSERT          reduce using rule 52 (block_item -> declaration .)
    READ            reduce using rule 52 (block_item -> declaration .)
    WHILE           reduce using rule 52 (block_item -> declaration .)
    FOR             reduce using rule 52 (block_item -> declaration .)
    LBRACE          reduce using rule 52 (block_item -> declaration .)
    VOID            reduce using rule 52 (block_item -> declaration .)
    INT             reduce using rule 52 (block_item -> declaration .)
    FLOAT           reduce using rule 52 (block_item -> declaration .)
    CHAR            reduce using rule 52 (block_item -> declaration .)
    PLUSPLUS        reduce using rule 52 (block_item -> declaration .)
    MINUSMINUS      reduce using rule 52 (block_item -> declaration .)
    LPAREN          reduce using rule 52 (block_item -> declaration .)
    ADDRESS         reduce using rule 52 (block_item -> declaration .)
    TIMES           reduce using rule 52 (block_item -> declaration .)
    PLUS            reduce using rule 52 (block_item -> declaration .)
    MINUS           reduce using rule 52 (block_item -> declaration .)
    NOT             reduce using rule 52 (block_item -> declaration .)
    ID              reduce using rule 52 (block_item -> declaration .)
    INT_CONST       reduce using rule 52 (block_item -> declaration .)
    FLOAT_CONST     reduce using rule 52 (block_item -> declaration .)
    CHAR_CONST      reduce using rule 52 (block_item -> declaration .)
    STRING          reduce using rule 52 (block_item -> declaration .)
    SEMI            reduce using rule 52 (block_item -> declaration .)
    RBRACE          reduce using rule 52 (block_item -> declaration .)


state 88

    (75) statement -> expression_statement .

    IF              reduce using rule 75 (statement -> expression_statement .)
    BREAK           reduce using rule 75 (statement -> expression_statement .)
    RETURN          reduce using rule 75 (statement -> expression_statement .)
    PRINT           reduce using rule 75 (statement -> expression_statement .)
    ASSERT          reduce using rule 75 (statement -> expression_statement .)
    READ            reduce using rule 75 (statement -> expression_statement .)
    WHILE           reduce using rule 75 (statement -> expression_statement .)
    FOR             reduce using rule 75 (statement -> expression_statement .)
    LBRACE          reduce using rule 75 (statement -> expression_statement .)
    VOID            reduce using rule 75 (statement -> expression_statement .)
    INT             reduce using rule 75 (statement -> expression_statement .)
    FLOAT           reduce using rule 75 (statement -> expression_statement .)
    CHAR            reduce using rule 75 (statement -> expression_statement .)
    PLUSPLUS        reduce using rule 75 (statement -> expression_statement .)
    MINUSMINUS      reduce using rule 75 (statement -> expression_statement .)
    LPAREN          reduce using rule 75 (statement -> expression_statement .)
    ADDRESS         reduce using rule 75 (statement -> expression_statement .)
    TIMES           reduce using rule 75 (statement -> expression_statement .)
    PLUS            reduce using rule 75 (statement -> expression_statement .)
    MINUS           reduce using rule 75 (statement -> expression_statement .)
    NOT             reduce using rule 75 (statement -> expression_statement .)
    ID              reduce using rule 75 (statement -> expression_statement .)
    INT_CONST       reduce using rule 75 (statement -> expression_statement .)
    FLOAT_CONST     reduce using rule 75 (statement -> expression_statement .)
    CHAR_CONST      reduce using rule 75 (statement -> expression_statement .)
    STRING          reduce using rule 75 (statement -> expression_statement .)
    SEMI            reduce using rule 75 (statement -> expression_statement .)
    RBRACE          reduce using rule 75 (statement -> expression_statement .)
    ELSE            reduce using rule 75 (statement -> expression_statement .)


state 89

    (76) statement -> selection_statement .

    IF              reduce using rule 76 (statement -> selection_statement .)
    BREAK           reduce using rule 76 (statement -> selection_statement .)
    RETURN          reduce using rule 76 (statement -> selection_statement .)
    PRINT           reduce using rule 76 (statement -> selection_statement .)
    ASSERT          reduce using rule 76 (statement -> selection_statement .)
    READ            reduce using rule 76 (statement -> selection_statement .)
    WHILE           reduce using rule 76 (statement -> selection_statement .)
    FOR             reduce using rule 76 (statement -> selection_statement .)
    LBRACE          reduce using rule 76 (statement -> selection_statement .)
    VOID            reduce using rule 76 (statement -> selection_statement .)
    INT             reduce using rule 76 (statement -> selection_statement .)
    FLOAT           reduce using rule 76 (statement -> selection_statement .)
    CHAR            reduce using rule 76 (statement -> selection_statement .)
    PLUSPLUS        reduce using rule 76 (statement -> selection_statement .)
    MINUSMINUS      reduce using rule 76 (statement -> selection_statement .)
    LPAREN          reduce using rule 76 (statement -> selection_statement .)
    ADDRESS         reduce using rule 76 (statement -> selection_statement .)
    TIMES           reduce using rule 76 (statement -> selection_statement .)
    PLUS            reduce using rule 76 (statement -> selection_statement .)
    MINUS           reduce using rule 76 (statement -> selection_statement .)
    NOT             reduce using rule 76 (statement -> selection_statement .)
    ID              reduce using rule 76 (statement -> selection_statement .)
    INT_CONST       reduce using rule 76 (statement -> selection_statement .)
    FLOAT_CONST     reduce using rule 76 (statement -> selection_statement .)
    CHAR_CONST      reduce using rule 76 (statement -> selection_statement .)
    STRING          reduce using rule 76 (statement -> selection_statement .)
    SEMI            reduce using rule 76 (statement -> selection_statement .)
    RBRACE          reduce using rule 76 (statement -> selection_statement .)
    ELSE            reduce using rule 76 (statement -> selection_statement .)


state 90

    (77) statement -> jump_statement .

    IF              reduce using rule 77 (statement -> jump_statement .)
    BREAK           reduce using rule 77 (statement -> jump_statement .)
    RETURN          reduce using rule 77 (statement -> jump_statement .)
    PRINT           reduce using rule 77 (statement -> jump_statement .)
    ASSERT          reduce using rule 77 (statement -> jump_statement .)
    READ            reduce using rule 77 (statement -> jump_statement .)
    WHILE           reduce using rule 77 (statement -> jump_statement .)
    FOR             reduce using rule 77 (statement -> jump_statement .)
    LBRACE          reduce using rule 77 (statement -> jump_statement .)
    VOID            reduce using rule 77 (statement -> jump_statement .)
    INT             reduce using rule 77 (statement -> jump_statement .)
    FLOAT           reduce using rule 77 (statement -> jump_statement .)
    CHAR            reduce using rule 77 (statement -> jump_statement .)
    PLUSPLUS        reduce using rule 77 (statement -> jump_statement .)
    MINUSMINUS      reduce using rule 77 (statement -> jump_statement .)
    LPAREN          reduce using rule 77 (statement -> jump_statement .)
    ADDRESS         reduce using rule 77 (statement -> jump_statement .)
    TIMES           reduce using rule 77 (statement -> jump_statement .)
    PLUS            reduce using rule 77 (statement -> jump_statement .)
    MINUS           reduce using rule 77 (statement -> jump_statement .)
    NOT             reduce using rule 77 (statement -> jump_statement .)
    ID              reduce using rule 77 (statement -> jump_statement .)
    INT_CONST       reduce using rule 77 (statement -> jump_statement .)
    FLOAT_CONST     reduce using rule 77 (statement -> jump_statement .)
    CHAR_CONST      reduce using rule 77 (statement -> jump_statement .)
    STRING          reduce using rule 77 (statement -> jump_statement .)
    SEMI            reduce using rule 77 (statement -> jump_statement .)
    RBRACE          reduce using rule 77 (statement -> jump_statement .)
    ELSE            reduce using rule 77 (statement -> jump_statement .)


state 91

    (78) statement -> print_statement .

    IF              reduce using rule 78 (statement -> print_statement .)
    BREAK           reduce using rule 78 (statement -> print_statement .)
    RETURN          reduce using rule 78 (statement -> print_statement .)
    PRINT           reduce using rule 78 (statement -> print_statement .)
    ASSERT          reduce using rule 78 (statement -> print_statement .)
    READ            reduce using rule 78 (statement -> print_statement .)
    WHILE           reduce using rule 78 (statement -> print_statement .)
    FOR             reduce using rule 78 (statement -> print_statement .)
    LBRACE          reduce using rule 78 (statement -> print_statement .)
    VOID            reduce using rule 78 (statement -> print_statement .)
    INT             reduce using rule 78 (statement -> print_statement .)
    FLOAT           reduce using rule 78 (statement -> print_statement .)
    CHAR            reduce using rule 78 (statement -> print_statement .)
    PLUSPLUS        reduce using rule 78 (statement -> print_statement .)
    MINUSMINUS      reduce using rule 78 (statement -> print_statement .)
    LPAREN          reduce using rule 78 (statement -> print_statement .)
    ADDRESS         reduce using rule 78 (statement -> print_statement .)
    TIMES           reduce using rule 78 (statement -> print_statement .)
    PLUS            reduce using rule 78 (statement -> print_statement .)
    MINUS           reduce using rule 78 (statement -> print_statement .)
    NOT             reduce using rule 78 (statement -> print_statement .)
    ID              reduce using rule 78 (statement -> print_statement .)
    INT_CONST       reduce using rule 78 (statement -> print_statement .)
    FLOAT_CONST     reduce using rule 78 (statement -> print_statement .)
    CHAR_CONST      reduce using rule 78 (statement -> print_statement .)
    STRING          reduce using rule 78 (statement -> print_statement .)
    SEMI            reduce using rule 78 (statement -> print_statement .)
    RBRACE          reduce using rule 78 (statement -> print_statement .)
    ELSE            reduce using rule 78 (statement -> print_statement .)


state 92

    (79) statement -> assert_statement .

    IF              reduce using rule 79 (statement -> assert_statement .)
    BREAK           reduce using rule 79 (statement -> assert_statement .)
    RETURN          reduce using rule 79 (statement -> assert_statement .)
    PRINT           reduce using rule 79 (statement -> assert_statement .)
    ASSERT          reduce using rule 79 (statement -> assert_statement .)
    READ            reduce using rule 79 (statement -> assert_statement .)
    WHILE           reduce using rule 79 (statement -> assert_statement .)
    FOR             reduce using rule 79 (statement -> assert_statement .)
    LBRACE          reduce using rule 79 (statement -> assert_statement .)
    VOID            reduce using rule 79 (statement -> assert_statement .)
    INT             reduce using rule 79 (statement -> assert_statement .)
    FLOAT           reduce using rule 79 (statement -> assert_statement .)
    CHAR            reduce using rule 79 (statement -> assert_statement .)
    PLUSPLUS        reduce using rule 79 (statement -> assert_statement .)
    MINUSMINUS      reduce using rule 79 (statement -> assert_statement .)
    LPAREN          reduce using rule 79 (statement -> assert_statement .)
    ADDRESS         reduce using rule 79 (statement -> assert_statement .)
    TIMES           reduce using rule 79 (statement -> assert_statement .)
    PLUS            reduce using rule 79 (statement -> assert_statement .)
    MINUS           reduce using rule 79 (statement -> assert_statement .)
    NOT             reduce using rule 79 (statement -> assert_statement .)
    ID              reduce using rule 79 (statement -> assert_statement .)
    INT_CONST       reduce using rule 79 (statement -> assert_statement .)
    FLOAT_CONST     reduce using rule 79 (statement -> assert_statement .)
    CHAR_CONST      reduce using rule 79 (statement -> assert_statement .)
    STRING          reduce using rule 79 (statement -> assert_statement .)
    SEMI            reduce using rule 79 (statement -> assert_statement .)
    RBRACE          reduce using rule 79 (statement -> assert_statement .)
    ELSE            reduce using rule 79 (statement -> assert_statement .)


state 93

    (80) statement -> read_statement .

    IF              reduce using rule 80 (statement -> read_statement .)
    BREAK           reduce using rule 80 (statement -> read_statement .)
    RETURN          reduce using rule 80 (statement -> read_statement .)
    PRINT           reduce using rule 80 (statement -> read_statement .)
    ASSERT          reduce using rule 80 (statement -> read_statement .)
    READ            reduce using rule 80 (statement -> read_statement .)
    WHILE           reduce using rule 80 (statement -> read_statement .)
    FOR             reduce using rule 80 (statement -> read_statement .)
    LBRACE          reduce using rule 80 (statement -> read_statement .)
    VOID            reduce using rule 80 (statement -> read_statement .)
    INT             reduce using rule 80 (statement -> read_statement .)
    FLOAT           reduce using rule 80 (statement -> read_statement .)
    CHAR            reduce using rule 80 (statement -> read_statement .)
    PLUSPLUS        reduce using rule 80 (statement -> read_statement .)
    MINUSMINUS      reduce using rule 80 (statement -> read_statement .)
    LPAREN          reduce using rule 80 (statement -> read_statement .)
    ADDRESS         reduce using rule 80 (statement -> read_statement .)
    TIMES           reduce using rule 80 (statement -> read_statement .)
    PLUS            reduce using rule 80 (statement -> read_statement .)
    MINUS           reduce using rule 80 (statement -> read_statement .)
    NOT             reduce using rule 80 (statement -> read_statement .)
    ID              reduce using rule 80 (statement -> read_statement .)
    INT_CONST       reduce using rule 80 (statement -> read_statement .)
    FLOAT_CONST     reduce using rule 80 (statement -> read_statement .)
    CHAR_CONST      reduce using rule 80 (statement -> read_statement .)
    STRING          reduce using rule 80 (statement -> read_statement .)
    SEMI            reduce using rule 80 (statement -> read_statement .)
    RBRACE          reduce using rule 80 (statement -> read_statement .)
    ELSE            reduce using rule 80 (statement -> read_statement .)


state 94

    (81) statement -> iteration_statement .

    IF              reduce using rule 81 (statement -> iteration_statement .)
    BREAK           reduce using rule 81 (statement -> iteration_statement .)
    RETURN          reduce using rule 81 (statement -> iteration_statement .)
    PRINT           reduce using rule 81 (statement -> iteration_statement .)
    ASSERT          reduce using rule 81 (statement -> iteration_statement .)
    READ            reduce using rule 81 (statement -> iteration_statement .)
    WHILE           reduce using rule 81 (statement -> iteration_statement .)
    FOR             reduce using rule 81 (statement -> iteration_statement .)
    LBRACE          reduce using rule 81 (statement -> iteration_statement .)
    VOID            reduce using rule 81 (statement -> iteration_statement .)
    INT             reduce using rule 81 (statement -> iteration_statement .)
    FLOAT           reduce using rule 81 (statement -> iteration_statement .)
    CHAR            reduce using rule 81 (statement -> iteration_statement .)
    PLUSPLUS        reduce using rule 81 (statement -> iteration_statement .)
    MINUSMINUS      reduce using rule 81 (statement -> iteration_statement .)
    LPAREN          reduce using rule 81 (statement -> iteration_statement .)
    ADDRESS         reduce using rule 81 (statement -> iteration_statement .)
    TIMES           reduce using rule 81 (statement -> iteration_statement .)
    PLUS            reduce using rule 81 (statement -> iteration_statement .)
    MINUS           reduce using rule 81 (statement -> iteration_statement .)
    NOT             reduce using rule 81 (statement -> iteration_statement .)
    ID              reduce using rule 81 (statement -> iteration_statement .)
    INT_CONST       reduce using rule 81 (statement -> iteration_statement .)
    FLOAT_CONST     reduce using rule 81 (statement -> iteration_statement .)
    CHAR_CONST      reduce using rule 81 (statement -> iteration_statement .)
    STRING          reduce using rule 81 (statement -> iteration_statement .)
    SEMI            reduce using rule 81 (statement -> iteration_statement .)
    RBRACE          reduce using rule 81 (statement -> iteration_statement .)
    ELSE            reduce using rule 81 (statement -> iteration_statement .)


state 95

    (82) statement -> compound_statement .

    IF              reduce using rule 82 (statement -> compound_statement .)
    BREAK           reduce using rule 82 (statement -> compound_statement .)
    RETURN          reduce using rule 82 (statement -> compound_statement .)
    PRINT           reduce using rule 82 (statement -> compound_statement .)
    ASSERT          reduce using rule 82 (statement -> compound_statement .)
    READ            reduce using rule 82 (statement -> compound_statement .)
    WHILE           reduce using rule 82 (statement -> compound_statement .)
    FOR             reduce using rule 82 (statement -> compound_statement .)
    LBRACE          reduce using rule 82 (statement -> compound_statement .)
    VOID            reduce using rule 82 (statement -> compound_statement .)
    INT             reduce using rule 82 (statement -> compound_statement .)
    FLOAT           reduce using rule 82 (statement -> compound_statement .)
    CHAR            reduce using rule 82 (statement -> compound_statement .)
    PLUSPLUS        reduce using rule 82 (statement -> compound_statement .)
    MINUSMINUS      reduce using rule 82 (statement -> compound_statement .)
    LPAREN          reduce using rule 82 (statement -> compound_statement .)
    ADDRESS         reduce using rule 82 (statement -> compound_statement .)
    TIMES           reduce using rule 82 (statement -> compound_statement .)
    PLUS            reduce using rule 82 (statement -> compound_statement .)
    MINUS           reduce using rule 82 (statement -> compound_statement .)
    NOT             reduce using rule 82 (statement -> compound_statement .)
    ID              reduce using rule 82 (statement -> compound_statement .)
    INT_CONST       reduce using rule 82 (statement -> compound_statement .)
    FLOAT_CONST     reduce using rule 82 (statement -> compound_statement .)
    CHAR_CONST      reduce using rule 82 (statement -> compound_statement .)
    STRING          reduce using rule 82 (statement -> compound_statement .)
    SEMI            reduce using rule 82 (statement -> compound_statement .)
    RBRACE          reduce using rule 82 (statement -> compound_statement .)
    ELSE            reduce using rule 82 (statement -> compound_statement .)


state 96

    (73) expression_statement -> expression_opt . SEMI

    SEMI            shift and go to state 148


state 97

    (57) selection_statement -> IF . LPAREN expression RPAREN statement
    (58) selection_statement -> IF . LPAREN expression RPAREN statement ELSE statement

    LPAREN          shift and go to state 149


state 98

    (96) expression_opt -> expression .
    (90) expression -> expression . COMMA assignment_expression

    SEMI            reduce using rule 96 (expression_opt -> expression .)
    RPAREN          reduce using rule 96 (expression_opt -> expression .)
    COMMA           shift and go to state 150


state 99

    (83) jump_statement -> BREAK . SEMI

    SEMI            shift and go to state 151


state 100

    (84) jump_statement -> RETURN . expression SEMI
    (85) jump_statement -> RETURN . SEMI
    (89) expression -> . assignment_expression
    (90) expression -> . expression COMMA assignment_expression
    (98) assignment_expression -> . binary_expression
    (99) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (110) binary_expression -> . cast_expression
    (111) binary_expression -> . binary_expression TIMES binary_expression
    (112) binary_expression -> . binary_expression DIVIDE binary_expression
    (113) binary_expression -> . binary_expression MOD binary_expression
    (114) binary_expression -> . binary_expression PLUS binary_expression
    (115) binary_expression -> . binary_expression MINUS binary_expression
    (116) binary_expression -> . binary_expression LT binary_expression
    (117) binary_expression -> . binary_expression LE binary_expression
    (118) binary_expression -> . binary_expression HT binary_expression
    (119) binary_expression -> . binary_expression HE binary_expression
    (120) binary_expression -> . binary_expression EQUALS binary_expression
    (121) binary_expression -> . binary_expression DIFF binary_expression
    (122) binary_expression -> . binary_expression AND binary_expression
    (123) binary_expression -> . binary_expression OR binary_expression
    (106) unary_expression -> . postfix_expression
    (107) unary_expression -> . PLUSPLUS unary_expression
    (108) unary_expression -> . MINUSMINUS unary_expression
    (109) unary_expression -> . unary_operator cast_expression
    (33) cast_expression -> . unary_expression
    (34) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (28) postfix_expression -> . primary_expression
    (29) postfix_expression -> . postfix_expression PLUSPLUS
    (30) postfix_expression -> . postfix_expression MINUSMINUS
    (31) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (32) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (36) unary_operator -> . ADDRESS
    (37) unary_operator -> . TIMES
    (38) unary_operator -> . PLUS
    (39) unary_operator -> . MINUS
    (40) unary_operator -> . NOT
    (92) primary_expression -> . identifier
    (93) primary_expression -> . constant
    (94) primary_expression -> . string_literal
    (95) primary_expression -> . LPAREN expression RPAREN
    (35) identifier -> . ID
    (48) constant -> . INT_CONST
    (49) constant -> . FLOAT_CONST
    (50) constant -> . CHAR_CONST
    (91) string_literal -> . STRING

    SEMI            shift and go to state 153
    PLUSPLUS        shift and go to state 61
    MINUSMINUS      shift and go to state 62
    LPAREN          shift and go to state 59
    ADDRESS         shift and go to state 65
    TIMES           shift and go to state 55
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    NOT             shift and go to state 66
    ID              shift and go to state 18
    INT_CONST       shift and go to state 70
    FLOAT_CONST     shift and go to state 71
    CHAR_CONST      shift and go to state 72
    STRING          shift and go to state 73

    expression                     shift and go to state 152
    assignment_expression          shift and go to state 106
    binary_expression              shift and go to state 79
    unary_expression               shift and go to state 80
    cast_expression                shift and go to state 54
    postfix_expression             shift and go to state 60
    unary_operator                 shift and go to state 63
    primary_expression             shift and go to state 64
    identifier                     shift and go to state 67
    constant                       shift and go to state 68
    string_literal                 shift and go to state 69

state 101

    (71) print_statement -> PRINT . LPAREN expression_opt RPAREN SEMI

    LPAREN          shift and go to state 154


state 102

    (70) assert_statement -> ASSERT . expression SEMI
    (89) expression -> . assignment_expression
    (90) expression -> . expression COMMA assignment_expression
    (98) assignment_expression -> . binary_expression
    (99) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (110) binary_expression -> . cast_expression
    (111) binary_expression -> . binary_expression TIMES binary_expression
    (112) binary_expression -> . binary_expression DIVIDE binary_expression
    (113) binary_expression -> . binary_expression MOD binary_expression
    (114) binary_expression -> . binary_expression PLUS binary_expression
    (115) binary_expression -> . binary_expression MINUS binary_expression
    (116) binary_expression -> . binary_expression LT binary_expression
    (117) binary_expression -> . binary_expression LE binary_expression
    (118) binary_expression -> . binary_expression HT binary_expression
    (119) binary_expression -> . binary_expression HE binary_expression
    (120) binary_expression -> . binary_expression EQUALS binary_expression
    (121) binary_expression -> . binary_expression DIFF binary_expression
    (122) binary_expression -> . binary_expression AND binary_expression
    (123) binary_expression -> . binary_expression OR binary_expression
    (106) unary_expression -> . postfix_expression
    (107) unary_expression -> . PLUSPLUS unary_expression
    (108) unary_expression -> . MINUSMINUS unary_expression
    (109) unary_expression -> . unary_operator cast_expression
    (33) cast_expression -> . unary_expression
    (34) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (28) postfix_expression -> . primary_expression
    (29) postfix_expression -> . postfix_expression PLUSPLUS
    (30) postfix_expression -> . postfix_expression MINUSMINUS
    (31) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (32) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (36) unary_operator -> . ADDRESS
    (37) unary_operator -> . TIMES
    (38) unary_operator -> . PLUS
    (39) unary_operator -> . MINUS
    (40) unary_operator -> . NOT
    (92) primary_expression -> . identifier
    (93) primary_expression -> . constant
    (94) primary_expression -> . string_literal
    (95) primary_expression -> . LPAREN expression RPAREN
    (35) identifier -> . ID
    (48) constant -> . INT_CONST
    (49) constant -> . FLOAT_CONST
    (50) constant -> . CHAR_CONST
    (91) string_literal -> . STRING

    PLUSPLUS        shift and go to state 61
    MINUSMINUS      shift and go to state 62
    LPAREN          shift and go to state 59
    ADDRESS         shift and go to state 65
    TIMES           shift and go to state 55
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    NOT             shift and go to state 66
    ID              shift and go to state 18
    INT_CONST       shift and go to state 70
    FLOAT_CONST     shift and go to state 71
    CHAR_CONST      shift and go to state 72
    STRING          shift and go to state 73

    expression                     shift and go to state 155
    assignment_expression          shift and go to state 106
    binary_expression              shift and go to state 79
    unary_expression               shift and go to state 80
    cast_expression                shift and go to state 54
    postfix_expression             shift and go to state 60
    unary_operator                 shift and go to state 63
    primary_expression             shift and go to state 64
    identifier                     shift and go to state 67
    constant                       shift and go to state 68
    string_literal                 shift and go to state 69

state 103

    (72) read_statement -> READ . LPAREN argument_expression_list RPAREN SEMI

    LPAREN          shift and go to state 156


state 104

    (59) iteration_statement -> WHILE . LPAREN expression RPAREN statement

    LPAREN          shift and go to state 157


state 105

    (60) iteration_statement -> FOR . LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (61) iteration_statement -> FOR . LPAREN declaration expression_opt SEMI expression_opt RPAREN statement

    LPAREN          shift and go to state 158


state 106

    (89) expression -> assignment_expression .

    COMMA           reduce using rule 89 (expression -> assignment_expression .)
    SEMI            reduce using rule 89 (expression -> assignment_expression .)
    RPAREN          reduce using rule 89 (expression -> assignment_expression .)
    RBRACKET        reduce using rule 89 (expression -> assignment_expression .)


state 107

    (22) direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .

    LPAREN          reduce using rule 22 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    LBRACKET        reduce using rule 22 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    VOID            reduce using rule 22 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    INT             reduce using rule 22 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    FLOAT           reduce using rule 22 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    CHAR            reduce using rule 22 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    LBRACE          reduce using rule 22 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    EQ              reduce using rule 22 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    COMMA           reduce using rule 22 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    SEMI            reduce using rule 22 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)
    RPAREN          reduce using rule 22 (direct_declarator -> direct_declarator LPAREN parameter_list RPAREN .)


state 108

    (126) parameter_list -> parameter_list COMMA . parameter_declaration
    (88) parameter_declaration -> . type_specifier declarator
    (41) type_specifier -> . VOID
    (42) type_specifier -> . INT
    (43) type_specifier -> . FLOAT
    (44) type_specifier -> . CHAR

    VOID            shift and go to state 9
    INT             shift and go to state 10
    FLOAT           shift and go to state 11
    CHAR            shift and go to state 12

    parameter_declaration          shift and go to state 159
    type_specifier                 shift and go to state 48

state 109

    (24) direct_declarator -> direct_declarator LPAREN id_list_opt RPAREN .

    LPAREN          reduce using rule 24 (direct_declarator -> direct_declarator LPAREN id_list_opt RPAREN .)
    LBRACKET        reduce using rule 24 (direct_declarator -> direct_declarator LPAREN id_list_opt RPAREN .)
    VOID            reduce using rule 24 (direct_declarator -> direct_declarator LPAREN id_list_opt RPAREN .)
    INT             reduce using rule 24 (direct_declarator -> direct_declarator LPAREN id_list_opt RPAREN .)
    FLOAT           reduce using rule 24 (direct_declarator -> direct_declarator LPAREN id_list_opt RPAREN .)
    CHAR            reduce using rule 24 (direct_declarator -> direct_declarator LPAREN id_list_opt RPAREN .)
    LBRACE          reduce using rule 24 (direct_declarator -> direct_declarator LPAREN id_list_opt RPAREN .)
    EQ              reduce using rule 24 (direct_declarator -> direct_declarator LPAREN id_list_opt RPAREN .)
    COMMA           reduce using rule 24 (direct_declarator -> direct_declarator LPAREN id_list_opt RPAREN .)
    SEMI            reduce using rule 24 (direct_declarator -> direct_declarator LPAREN id_list_opt RPAREN .)
    RPAREN          reduce using rule 24 (direct_declarator -> direct_declarator LPAREN id_list_opt RPAREN .)


state 110

    (130) id_list -> id_list identifier .

    ID              reduce using rule 130 (id_list -> id_list identifier .)
    RPAREN          reduce using rule 130 (id_list -> id_list identifier .)


state 111

    (88) parameter_declaration -> type_specifier declarator .

    RPAREN          reduce using rule 88 (parameter_declaration -> type_specifier declarator .)
    COMMA           reduce using rule 88 (parameter_declaration -> type_specifier declarator .)


state 112

    (23) direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET .

    LPAREN          reduce using rule 23 (direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET .)
    LBRACKET        reduce using rule 23 (direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET .)
    VOID            reduce using rule 23 (direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET .)
    INT             reduce using rule 23 (direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET .)
    FLOAT           reduce using rule 23 (direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET .)
    CHAR            reduce using rule 23 (direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET .)
    LBRACE          reduce using rule 23 (direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET .)
    EQ              reduce using rule 23 (direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET .)
    COMMA           reduce using rule 23 (direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET .)
    SEMI            reduce using rule 23 (direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET .)
    RPAREN          reduce using rule 23 (direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET .)


state 113

    (111) binary_expression -> binary_expression TIMES . binary_expression
    (110) binary_expression -> . cast_expression
    (111) binary_expression -> . binary_expression TIMES binary_expression
    (112) binary_expression -> . binary_expression DIVIDE binary_expression
    (113) binary_expression -> . binary_expression MOD binary_expression
    (114) binary_expression -> . binary_expression PLUS binary_expression
    (115) binary_expression -> . binary_expression MINUS binary_expression
    (116) binary_expression -> . binary_expression LT binary_expression
    (117) binary_expression -> . binary_expression LE binary_expression
    (118) binary_expression -> . binary_expression HT binary_expression
    (119) binary_expression -> . binary_expression HE binary_expression
    (120) binary_expression -> . binary_expression EQUALS binary_expression
    (121) binary_expression -> . binary_expression DIFF binary_expression
    (122) binary_expression -> . binary_expression AND binary_expression
    (123) binary_expression -> . binary_expression OR binary_expression
    (33) cast_expression -> . unary_expression
    (34) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (106) unary_expression -> . postfix_expression
    (107) unary_expression -> . PLUSPLUS unary_expression
    (108) unary_expression -> . MINUSMINUS unary_expression
    (109) unary_expression -> . unary_operator cast_expression
    (28) postfix_expression -> . primary_expression
    (29) postfix_expression -> . postfix_expression PLUSPLUS
    (30) postfix_expression -> . postfix_expression MINUSMINUS
    (31) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (32) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (36) unary_operator -> . ADDRESS
    (37) unary_operator -> . TIMES
    (38) unary_operator -> . PLUS
    (39) unary_operator -> . MINUS
    (40) unary_operator -> . NOT
    (92) primary_expression -> . identifier
    (93) primary_expression -> . constant
    (94) primary_expression -> . string_literal
    (95) primary_expression -> . LPAREN expression RPAREN
    (35) identifier -> . ID
    (48) constant -> . INT_CONST
    (49) constant -> . FLOAT_CONST
    (50) constant -> . CHAR_CONST
    (91) string_literal -> . STRING

    LPAREN          shift and go to state 59
    PLUSPLUS        shift and go to state 61
    MINUSMINUS      shift and go to state 62
    ADDRESS         shift and go to state 65
    TIMES           shift and go to state 55
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    NOT             shift and go to state 66
    ID              shift and go to state 18
    INT_CONST       shift and go to state 70
    FLOAT_CONST     shift and go to state 71
    CHAR_CONST      shift and go to state 72
    STRING          shift and go to state 73

    binary_expression              shift and go to state 160
    cast_expression                shift and go to state 54
    unary_expression               shift and go to state 58
    postfix_expression             shift and go to state 60
    unary_operator                 shift and go to state 63
    primary_expression             shift and go to state 64
    identifier                     shift and go to state 67
    constant                       shift and go to state 68
    string_literal                 shift and go to state 69

state 114

    (112) binary_expression -> binary_expression DIVIDE . binary_expression
    (110) binary_expression -> . cast_expression
    (111) binary_expression -> . binary_expression TIMES binary_expression
    (112) binary_expression -> . binary_expression DIVIDE binary_expression
    (113) binary_expression -> . binary_expression MOD binary_expression
    (114) binary_expression -> . binary_expression PLUS binary_expression
    (115) binary_expression -> . binary_expression MINUS binary_expression
    (116) binary_expression -> . binary_expression LT binary_expression
    (117) binary_expression -> . binary_expression LE binary_expression
    (118) binary_expression -> . binary_expression HT binary_expression
    (119) binary_expression -> . binary_expression HE binary_expression
    (120) binary_expression -> . binary_expression EQUALS binary_expression
    (121) binary_expression -> . binary_expression DIFF binary_expression
    (122) binary_expression -> . binary_expression AND binary_expression
    (123) binary_expression -> . binary_expression OR binary_expression
    (33) cast_expression -> . unary_expression
    (34) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (106) unary_expression -> . postfix_expression
    (107) unary_expression -> . PLUSPLUS unary_expression
    (108) unary_expression -> . MINUSMINUS unary_expression
    (109) unary_expression -> . unary_operator cast_expression
    (28) postfix_expression -> . primary_expression
    (29) postfix_expression -> . postfix_expression PLUSPLUS
    (30) postfix_expression -> . postfix_expression MINUSMINUS
    (31) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (32) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (36) unary_operator -> . ADDRESS
    (37) unary_operator -> . TIMES
    (38) unary_operator -> . PLUS
    (39) unary_operator -> . MINUS
    (40) unary_operator -> . NOT
    (92) primary_expression -> . identifier
    (93) primary_expression -> . constant
    (94) primary_expression -> . string_literal
    (95) primary_expression -> . LPAREN expression RPAREN
    (35) identifier -> . ID
    (48) constant -> . INT_CONST
    (49) constant -> . FLOAT_CONST
    (50) constant -> . CHAR_CONST
    (91) string_literal -> . STRING

    LPAREN          shift and go to state 59
    PLUSPLUS        shift and go to state 61
    MINUSMINUS      shift and go to state 62
    ADDRESS         shift and go to state 65
    TIMES           shift and go to state 55
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    NOT             shift and go to state 66
    ID              shift and go to state 18
    INT_CONST       shift and go to state 70
    FLOAT_CONST     shift and go to state 71
    CHAR_CONST      shift and go to state 72
    STRING          shift and go to state 73

    binary_expression              shift and go to state 161
    cast_expression                shift and go to state 54
    unary_expression               shift and go to state 58
    postfix_expression             shift and go to state 60
    unary_operator                 shift and go to state 63
    primary_expression             shift and go to state 64
    identifier                     shift and go to state 67
    constant                       shift and go to state 68
    string_literal                 shift and go to state 69

state 115

    (113) binary_expression -> binary_expression MOD . binary_expression
    (110) binary_expression -> . cast_expression
    (111) binary_expression -> . binary_expression TIMES binary_expression
    (112) binary_expression -> . binary_expression DIVIDE binary_expression
    (113) binary_expression -> . binary_expression MOD binary_expression
    (114) binary_expression -> . binary_expression PLUS binary_expression
    (115) binary_expression -> . binary_expression MINUS binary_expression
    (116) binary_expression -> . binary_expression LT binary_expression
    (117) binary_expression -> . binary_expression LE binary_expression
    (118) binary_expression -> . binary_expression HT binary_expression
    (119) binary_expression -> . binary_expression HE binary_expression
    (120) binary_expression -> . binary_expression EQUALS binary_expression
    (121) binary_expression -> . binary_expression DIFF binary_expression
    (122) binary_expression -> . binary_expression AND binary_expression
    (123) binary_expression -> . binary_expression OR binary_expression
    (33) cast_expression -> . unary_expression
    (34) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (106) unary_expression -> . postfix_expression
    (107) unary_expression -> . PLUSPLUS unary_expression
    (108) unary_expression -> . MINUSMINUS unary_expression
    (109) unary_expression -> . unary_operator cast_expression
    (28) postfix_expression -> . primary_expression
    (29) postfix_expression -> . postfix_expression PLUSPLUS
    (30) postfix_expression -> . postfix_expression MINUSMINUS
    (31) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (32) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (36) unary_operator -> . ADDRESS
    (37) unary_operator -> . TIMES
    (38) unary_operator -> . PLUS
    (39) unary_operator -> . MINUS
    (40) unary_operator -> . NOT
    (92) primary_expression -> . identifier
    (93) primary_expression -> . constant
    (94) primary_expression -> . string_literal
    (95) primary_expression -> . LPAREN expression RPAREN
    (35) identifier -> . ID
    (48) constant -> . INT_CONST
    (49) constant -> . FLOAT_CONST
    (50) constant -> . CHAR_CONST
    (91) string_literal -> . STRING

    LPAREN          shift and go to state 59
    PLUSPLUS        shift and go to state 61
    MINUSMINUS      shift and go to state 62
    ADDRESS         shift and go to state 65
    TIMES           shift and go to state 55
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    NOT             shift and go to state 66
    ID              shift and go to state 18
    INT_CONST       shift and go to state 70
    FLOAT_CONST     shift and go to state 71
    CHAR_CONST      shift and go to state 72
    STRING          shift and go to state 73

    binary_expression              shift and go to state 162
    cast_expression                shift and go to state 54
    unary_expression               shift and go to state 58
    postfix_expression             shift and go to state 60
    unary_operator                 shift and go to state 63
    primary_expression             shift and go to state 64
    identifier                     shift and go to state 67
    constant                       shift and go to state 68
    string_literal                 shift and go to state 69

state 116

    (114) binary_expression -> binary_expression PLUS . binary_expression
    (110) binary_expression -> . cast_expression
    (111) binary_expression -> . binary_expression TIMES binary_expression
    (112) binary_expression -> . binary_expression DIVIDE binary_expression
    (113) binary_expression -> . binary_expression MOD binary_expression
    (114) binary_expression -> . binary_expression PLUS binary_expression
    (115) binary_expression -> . binary_expression MINUS binary_expression
    (116) binary_expression -> . binary_expression LT binary_expression
    (117) binary_expression -> . binary_expression LE binary_expression
    (118) binary_expression -> . binary_expression HT binary_expression
    (119) binary_expression -> . binary_expression HE binary_expression
    (120) binary_expression -> . binary_expression EQUALS binary_expression
    (121) binary_expression -> . binary_expression DIFF binary_expression
    (122) binary_expression -> . binary_expression AND binary_expression
    (123) binary_expression -> . binary_expression OR binary_expression
    (33) cast_expression -> . unary_expression
    (34) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (106) unary_expression -> . postfix_expression
    (107) unary_expression -> . PLUSPLUS unary_expression
    (108) unary_expression -> . MINUSMINUS unary_expression
    (109) unary_expression -> . unary_operator cast_expression
    (28) postfix_expression -> . primary_expression
    (29) postfix_expression -> . postfix_expression PLUSPLUS
    (30) postfix_expression -> . postfix_expression MINUSMINUS
    (31) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (32) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (36) unary_operator -> . ADDRESS
    (37) unary_operator -> . TIMES
    (38) unary_operator -> . PLUS
    (39) unary_operator -> . MINUS
    (40) unary_operator -> . NOT
    (92) primary_expression -> . identifier
    (93) primary_expression -> . constant
    (94) primary_expression -> . string_literal
    (95) primary_expression -> . LPAREN expression RPAREN
    (35) identifier -> . ID
    (48) constant -> . INT_CONST
    (49) constant -> . FLOAT_CONST
    (50) constant -> . CHAR_CONST
    (91) string_literal -> . STRING

    LPAREN          shift and go to state 59
    PLUSPLUS        shift and go to state 61
    MINUSMINUS      shift and go to state 62
    ADDRESS         shift and go to state 65
    TIMES           shift and go to state 55
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    NOT             shift and go to state 66
    ID              shift and go to state 18
    INT_CONST       shift and go to state 70
    FLOAT_CONST     shift and go to state 71
    CHAR_CONST      shift and go to state 72
    STRING          shift and go to state 73

    binary_expression              shift and go to state 163
    cast_expression                shift and go to state 54
    unary_expression               shift and go to state 58
    postfix_expression             shift and go to state 60
    unary_operator                 shift and go to state 63
    primary_expression             shift and go to state 64
    identifier                     shift and go to state 67
    constant                       shift and go to state 68
    string_literal                 shift and go to state 69

state 117

    (115) binary_expression -> binary_expression MINUS . binary_expression
    (110) binary_expression -> . cast_expression
    (111) binary_expression -> . binary_expression TIMES binary_expression
    (112) binary_expression -> . binary_expression DIVIDE binary_expression
    (113) binary_expression -> . binary_expression MOD binary_expression
    (114) binary_expression -> . binary_expression PLUS binary_expression
    (115) binary_expression -> . binary_expression MINUS binary_expression
    (116) binary_expression -> . binary_expression LT binary_expression
    (117) binary_expression -> . binary_expression LE binary_expression
    (118) binary_expression -> . binary_expression HT binary_expression
    (119) binary_expression -> . binary_expression HE binary_expression
    (120) binary_expression -> . binary_expression EQUALS binary_expression
    (121) binary_expression -> . binary_expression DIFF binary_expression
    (122) binary_expression -> . binary_expression AND binary_expression
    (123) binary_expression -> . binary_expression OR binary_expression
    (33) cast_expression -> . unary_expression
    (34) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (106) unary_expression -> . postfix_expression
    (107) unary_expression -> . PLUSPLUS unary_expression
    (108) unary_expression -> . MINUSMINUS unary_expression
    (109) unary_expression -> . unary_operator cast_expression
    (28) postfix_expression -> . primary_expression
    (29) postfix_expression -> . postfix_expression PLUSPLUS
    (30) postfix_expression -> . postfix_expression MINUSMINUS
    (31) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (32) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (36) unary_operator -> . ADDRESS
    (37) unary_operator -> . TIMES
    (38) unary_operator -> . PLUS
    (39) unary_operator -> . MINUS
    (40) unary_operator -> . NOT
    (92) primary_expression -> . identifier
    (93) primary_expression -> . constant
    (94) primary_expression -> . string_literal
    (95) primary_expression -> . LPAREN expression RPAREN
    (35) identifier -> . ID
    (48) constant -> . INT_CONST
    (49) constant -> . FLOAT_CONST
    (50) constant -> . CHAR_CONST
    (91) string_literal -> . STRING

    LPAREN          shift and go to state 59
    PLUSPLUS        shift and go to state 61
    MINUSMINUS      shift and go to state 62
    ADDRESS         shift and go to state 65
    TIMES           shift and go to state 55
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    NOT             shift and go to state 66
    ID              shift and go to state 18
    INT_CONST       shift and go to state 70
    FLOAT_CONST     shift and go to state 71
    CHAR_CONST      shift and go to state 72
    STRING          shift and go to state 73

    binary_expression              shift and go to state 164
    cast_expression                shift and go to state 54
    unary_expression               shift and go to state 58
    postfix_expression             shift and go to state 60
    unary_operator                 shift and go to state 63
    primary_expression             shift and go to state 64
    identifier                     shift and go to state 67
    constant                       shift and go to state 68
    string_literal                 shift and go to state 69

state 118

    (116) binary_expression -> binary_expression LT . binary_expression
    (110) binary_expression -> . cast_expression
    (111) binary_expression -> . binary_expression TIMES binary_expression
    (112) binary_expression -> . binary_expression DIVIDE binary_expression
    (113) binary_expression -> . binary_expression MOD binary_expression
    (114) binary_expression -> . binary_expression PLUS binary_expression
    (115) binary_expression -> . binary_expression MINUS binary_expression
    (116) binary_expression -> . binary_expression LT binary_expression
    (117) binary_expression -> . binary_expression LE binary_expression
    (118) binary_expression -> . binary_expression HT binary_expression
    (119) binary_expression -> . binary_expression HE binary_expression
    (120) binary_expression -> . binary_expression EQUALS binary_expression
    (121) binary_expression -> . binary_expression DIFF binary_expression
    (122) binary_expression -> . binary_expression AND binary_expression
    (123) binary_expression -> . binary_expression OR binary_expression
    (33) cast_expression -> . unary_expression
    (34) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (106) unary_expression -> . postfix_expression
    (107) unary_expression -> . PLUSPLUS unary_expression
    (108) unary_expression -> . MINUSMINUS unary_expression
    (109) unary_expression -> . unary_operator cast_expression
    (28) postfix_expression -> . primary_expression
    (29) postfix_expression -> . postfix_expression PLUSPLUS
    (30) postfix_expression -> . postfix_expression MINUSMINUS
    (31) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (32) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (36) unary_operator -> . ADDRESS
    (37) unary_operator -> . TIMES
    (38) unary_operator -> . PLUS
    (39) unary_operator -> . MINUS
    (40) unary_operator -> . NOT
    (92) primary_expression -> . identifier
    (93) primary_expression -> . constant
    (94) primary_expression -> . string_literal
    (95) primary_expression -> . LPAREN expression RPAREN
    (35) identifier -> . ID
    (48) constant -> . INT_CONST
    (49) constant -> . FLOAT_CONST
    (50) constant -> . CHAR_CONST
    (91) string_literal -> . STRING

    LPAREN          shift and go to state 59
    PLUSPLUS        shift and go to state 61
    MINUSMINUS      shift and go to state 62
    ADDRESS         shift and go to state 65
    TIMES           shift and go to state 55
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    NOT             shift and go to state 66
    ID              shift and go to state 18
    INT_CONST       shift and go to state 70
    FLOAT_CONST     shift and go to state 71
    CHAR_CONST      shift and go to state 72
    STRING          shift and go to state 73

    binary_expression              shift and go to state 165
    cast_expression                shift and go to state 54
    unary_expression               shift and go to state 58
    postfix_expression             shift and go to state 60
    unary_operator                 shift and go to state 63
    primary_expression             shift and go to state 64
    identifier                     shift and go to state 67
    constant                       shift and go to state 68
    string_literal                 shift and go to state 69

state 119

    (117) binary_expression -> binary_expression LE . binary_expression
    (110) binary_expression -> . cast_expression
    (111) binary_expression -> . binary_expression TIMES binary_expression
    (112) binary_expression -> . binary_expression DIVIDE binary_expression
    (113) binary_expression -> . binary_expression MOD binary_expression
    (114) binary_expression -> . binary_expression PLUS binary_expression
    (115) binary_expression -> . binary_expression MINUS binary_expression
    (116) binary_expression -> . binary_expression LT binary_expression
    (117) binary_expression -> . binary_expression LE binary_expression
    (118) binary_expression -> . binary_expression HT binary_expression
    (119) binary_expression -> . binary_expression HE binary_expression
    (120) binary_expression -> . binary_expression EQUALS binary_expression
    (121) binary_expression -> . binary_expression DIFF binary_expression
    (122) binary_expression -> . binary_expression AND binary_expression
    (123) binary_expression -> . binary_expression OR binary_expression
    (33) cast_expression -> . unary_expression
    (34) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (106) unary_expression -> . postfix_expression
    (107) unary_expression -> . PLUSPLUS unary_expression
    (108) unary_expression -> . MINUSMINUS unary_expression
    (109) unary_expression -> . unary_operator cast_expression
    (28) postfix_expression -> . primary_expression
    (29) postfix_expression -> . postfix_expression PLUSPLUS
    (30) postfix_expression -> . postfix_expression MINUSMINUS
    (31) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (32) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (36) unary_operator -> . ADDRESS
    (37) unary_operator -> . TIMES
    (38) unary_operator -> . PLUS
    (39) unary_operator -> . MINUS
    (40) unary_operator -> . NOT
    (92) primary_expression -> . identifier
    (93) primary_expression -> . constant
    (94) primary_expression -> . string_literal
    (95) primary_expression -> . LPAREN expression RPAREN
    (35) identifier -> . ID
    (48) constant -> . INT_CONST
    (49) constant -> . FLOAT_CONST
    (50) constant -> . CHAR_CONST
    (91) string_literal -> . STRING

    LPAREN          shift and go to state 59
    PLUSPLUS        shift and go to state 61
    MINUSMINUS      shift and go to state 62
    ADDRESS         shift and go to state 65
    TIMES           shift and go to state 55
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    NOT             shift and go to state 66
    ID              shift and go to state 18
    INT_CONST       shift and go to state 70
    FLOAT_CONST     shift and go to state 71
    CHAR_CONST      shift and go to state 72
    STRING          shift and go to state 73

    binary_expression              shift and go to state 166
    cast_expression                shift and go to state 54
    unary_expression               shift and go to state 58
    postfix_expression             shift and go to state 60
    unary_operator                 shift and go to state 63
    primary_expression             shift and go to state 64
    identifier                     shift and go to state 67
    constant                       shift and go to state 68
    string_literal                 shift and go to state 69

state 120

    (118) binary_expression -> binary_expression HT . binary_expression
    (110) binary_expression -> . cast_expression
    (111) binary_expression -> . binary_expression TIMES binary_expression
    (112) binary_expression -> . binary_expression DIVIDE binary_expression
    (113) binary_expression -> . binary_expression MOD binary_expression
    (114) binary_expression -> . binary_expression PLUS binary_expression
    (115) binary_expression -> . binary_expression MINUS binary_expression
    (116) binary_expression -> . binary_expression LT binary_expression
    (117) binary_expression -> . binary_expression LE binary_expression
    (118) binary_expression -> . binary_expression HT binary_expression
    (119) binary_expression -> . binary_expression HE binary_expression
    (120) binary_expression -> . binary_expression EQUALS binary_expression
    (121) binary_expression -> . binary_expression DIFF binary_expression
    (122) binary_expression -> . binary_expression AND binary_expression
    (123) binary_expression -> . binary_expression OR binary_expression
    (33) cast_expression -> . unary_expression
    (34) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (106) unary_expression -> . postfix_expression
    (107) unary_expression -> . PLUSPLUS unary_expression
    (108) unary_expression -> . MINUSMINUS unary_expression
    (109) unary_expression -> . unary_operator cast_expression
    (28) postfix_expression -> . primary_expression
    (29) postfix_expression -> . postfix_expression PLUSPLUS
    (30) postfix_expression -> . postfix_expression MINUSMINUS
    (31) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (32) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (36) unary_operator -> . ADDRESS
    (37) unary_operator -> . TIMES
    (38) unary_operator -> . PLUS
    (39) unary_operator -> . MINUS
    (40) unary_operator -> . NOT
    (92) primary_expression -> . identifier
    (93) primary_expression -> . constant
    (94) primary_expression -> . string_literal
    (95) primary_expression -> . LPAREN expression RPAREN
    (35) identifier -> . ID
    (48) constant -> . INT_CONST
    (49) constant -> . FLOAT_CONST
    (50) constant -> . CHAR_CONST
    (91) string_literal -> . STRING

    LPAREN          shift and go to state 59
    PLUSPLUS        shift and go to state 61
    MINUSMINUS      shift and go to state 62
    ADDRESS         shift and go to state 65
    TIMES           shift and go to state 55
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    NOT             shift and go to state 66
    ID              shift and go to state 18
    INT_CONST       shift and go to state 70
    FLOAT_CONST     shift and go to state 71
    CHAR_CONST      shift and go to state 72
    STRING          shift and go to state 73

    binary_expression              shift and go to state 167
    cast_expression                shift and go to state 54
    unary_expression               shift and go to state 58
    postfix_expression             shift and go to state 60
    unary_operator                 shift and go to state 63
    primary_expression             shift and go to state 64
    identifier                     shift and go to state 67
    constant                       shift and go to state 68
    string_literal                 shift and go to state 69

state 121

    (119) binary_expression -> binary_expression HE . binary_expression
    (110) binary_expression -> . cast_expression
    (111) binary_expression -> . binary_expression TIMES binary_expression
    (112) binary_expression -> . binary_expression DIVIDE binary_expression
    (113) binary_expression -> . binary_expression MOD binary_expression
    (114) binary_expression -> . binary_expression PLUS binary_expression
    (115) binary_expression -> . binary_expression MINUS binary_expression
    (116) binary_expression -> . binary_expression LT binary_expression
    (117) binary_expression -> . binary_expression LE binary_expression
    (118) binary_expression -> . binary_expression HT binary_expression
    (119) binary_expression -> . binary_expression HE binary_expression
    (120) binary_expression -> . binary_expression EQUALS binary_expression
    (121) binary_expression -> . binary_expression DIFF binary_expression
    (122) binary_expression -> . binary_expression AND binary_expression
    (123) binary_expression -> . binary_expression OR binary_expression
    (33) cast_expression -> . unary_expression
    (34) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (106) unary_expression -> . postfix_expression
    (107) unary_expression -> . PLUSPLUS unary_expression
    (108) unary_expression -> . MINUSMINUS unary_expression
    (109) unary_expression -> . unary_operator cast_expression
    (28) postfix_expression -> . primary_expression
    (29) postfix_expression -> . postfix_expression PLUSPLUS
    (30) postfix_expression -> . postfix_expression MINUSMINUS
    (31) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (32) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (36) unary_operator -> . ADDRESS
    (37) unary_operator -> . TIMES
    (38) unary_operator -> . PLUS
    (39) unary_operator -> . MINUS
    (40) unary_operator -> . NOT
    (92) primary_expression -> . identifier
    (93) primary_expression -> . constant
    (94) primary_expression -> . string_literal
    (95) primary_expression -> . LPAREN expression RPAREN
    (35) identifier -> . ID
    (48) constant -> . INT_CONST
    (49) constant -> . FLOAT_CONST
    (50) constant -> . CHAR_CONST
    (91) string_literal -> . STRING

    LPAREN          shift and go to state 59
    PLUSPLUS        shift and go to state 61
    MINUSMINUS      shift and go to state 62
    ADDRESS         shift and go to state 65
    TIMES           shift and go to state 55
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    NOT             shift and go to state 66
    ID              shift and go to state 18
    INT_CONST       shift and go to state 70
    FLOAT_CONST     shift and go to state 71
    CHAR_CONST      shift and go to state 72
    STRING          shift and go to state 73

    binary_expression              shift and go to state 168
    cast_expression                shift and go to state 54
    unary_expression               shift and go to state 58
    postfix_expression             shift and go to state 60
    unary_operator                 shift and go to state 63
    primary_expression             shift and go to state 64
    identifier                     shift and go to state 67
    constant                       shift and go to state 68
    string_literal                 shift and go to state 69

state 122

    (120) binary_expression -> binary_expression EQUALS . binary_expression
    (110) binary_expression -> . cast_expression
    (111) binary_expression -> . binary_expression TIMES binary_expression
    (112) binary_expression -> . binary_expression DIVIDE binary_expression
    (113) binary_expression -> . binary_expression MOD binary_expression
    (114) binary_expression -> . binary_expression PLUS binary_expression
    (115) binary_expression -> . binary_expression MINUS binary_expression
    (116) binary_expression -> . binary_expression LT binary_expression
    (117) binary_expression -> . binary_expression LE binary_expression
    (118) binary_expression -> . binary_expression HT binary_expression
    (119) binary_expression -> . binary_expression HE binary_expression
    (120) binary_expression -> . binary_expression EQUALS binary_expression
    (121) binary_expression -> . binary_expression DIFF binary_expression
    (122) binary_expression -> . binary_expression AND binary_expression
    (123) binary_expression -> . binary_expression OR binary_expression
    (33) cast_expression -> . unary_expression
    (34) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (106) unary_expression -> . postfix_expression
    (107) unary_expression -> . PLUSPLUS unary_expression
    (108) unary_expression -> . MINUSMINUS unary_expression
    (109) unary_expression -> . unary_operator cast_expression
    (28) postfix_expression -> . primary_expression
    (29) postfix_expression -> . postfix_expression PLUSPLUS
    (30) postfix_expression -> . postfix_expression MINUSMINUS
    (31) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (32) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (36) unary_operator -> . ADDRESS
    (37) unary_operator -> . TIMES
    (38) unary_operator -> . PLUS
    (39) unary_operator -> . MINUS
    (40) unary_operator -> . NOT
    (92) primary_expression -> . identifier
    (93) primary_expression -> . constant
    (94) primary_expression -> . string_literal
    (95) primary_expression -> . LPAREN expression RPAREN
    (35) identifier -> . ID
    (48) constant -> . INT_CONST
    (49) constant -> . FLOAT_CONST
    (50) constant -> . CHAR_CONST
    (91) string_literal -> . STRING

    LPAREN          shift and go to state 59
    PLUSPLUS        shift and go to state 61
    MINUSMINUS      shift and go to state 62
    ADDRESS         shift and go to state 65
    TIMES           shift and go to state 55
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    NOT             shift and go to state 66
    ID              shift and go to state 18
    INT_CONST       shift and go to state 70
    FLOAT_CONST     shift and go to state 71
    CHAR_CONST      shift and go to state 72
    STRING          shift and go to state 73

    binary_expression              shift and go to state 169
    cast_expression                shift and go to state 54
    unary_expression               shift and go to state 58
    postfix_expression             shift and go to state 60
    unary_operator                 shift and go to state 63
    primary_expression             shift and go to state 64
    identifier                     shift and go to state 67
    constant                       shift and go to state 68
    string_literal                 shift and go to state 69

state 123

    (121) binary_expression -> binary_expression DIFF . binary_expression
    (110) binary_expression -> . cast_expression
    (111) binary_expression -> . binary_expression TIMES binary_expression
    (112) binary_expression -> . binary_expression DIVIDE binary_expression
    (113) binary_expression -> . binary_expression MOD binary_expression
    (114) binary_expression -> . binary_expression PLUS binary_expression
    (115) binary_expression -> . binary_expression MINUS binary_expression
    (116) binary_expression -> . binary_expression LT binary_expression
    (117) binary_expression -> . binary_expression LE binary_expression
    (118) binary_expression -> . binary_expression HT binary_expression
    (119) binary_expression -> . binary_expression HE binary_expression
    (120) binary_expression -> . binary_expression EQUALS binary_expression
    (121) binary_expression -> . binary_expression DIFF binary_expression
    (122) binary_expression -> . binary_expression AND binary_expression
    (123) binary_expression -> . binary_expression OR binary_expression
    (33) cast_expression -> . unary_expression
    (34) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (106) unary_expression -> . postfix_expression
    (107) unary_expression -> . PLUSPLUS unary_expression
    (108) unary_expression -> . MINUSMINUS unary_expression
    (109) unary_expression -> . unary_operator cast_expression
    (28) postfix_expression -> . primary_expression
    (29) postfix_expression -> . postfix_expression PLUSPLUS
    (30) postfix_expression -> . postfix_expression MINUSMINUS
    (31) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (32) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (36) unary_operator -> . ADDRESS
    (37) unary_operator -> . TIMES
    (38) unary_operator -> . PLUS
    (39) unary_operator -> . MINUS
    (40) unary_operator -> . NOT
    (92) primary_expression -> . identifier
    (93) primary_expression -> . constant
    (94) primary_expression -> . string_literal
    (95) primary_expression -> . LPAREN expression RPAREN
    (35) identifier -> . ID
    (48) constant -> . INT_CONST
    (49) constant -> . FLOAT_CONST
    (50) constant -> . CHAR_CONST
    (91) string_literal -> . STRING

    LPAREN          shift and go to state 59
    PLUSPLUS        shift and go to state 61
    MINUSMINUS      shift and go to state 62
    ADDRESS         shift and go to state 65
    TIMES           shift and go to state 55
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    NOT             shift and go to state 66
    ID              shift and go to state 18
    INT_CONST       shift and go to state 70
    FLOAT_CONST     shift and go to state 71
    CHAR_CONST      shift and go to state 72
    STRING          shift and go to state 73

    binary_expression              shift and go to state 170
    cast_expression                shift and go to state 54
    unary_expression               shift and go to state 58
    postfix_expression             shift and go to state 60
    unary_operator                 shift and go to state 63
    primary_expression             shift and go to state 64
    identifier                     shift and go to state 67
    constant                       shift and go to state 68
    string_literal                 shift and go to state 69

state 124

    (122) binary_expression -> binary_expression AND . binary_expression
    (110) binary_expression -> . cast_expression
    (111) binary_expression -> . binary_expression TIMES binary_expression
    (112) binary_expression -> . binary_expression DIVIDE binary_expression
    (113) binary_expression -> . binary_expression MOD binary_expression
    (114) binary_expression -> . binary_expression PLUS binary_expression
    (115) binary_expression -> . binary_expression MINUS binary_expression
    (116) binary_expression -> . binary_expression LT binary_expression
    (117) binary_expression -> . binary_expression LE binary_expression
    (118) binary_expression -> . binary_expression HT binary_expression
    (119) binary_expression -> . binary_expression HE binary_expression
    (120) binary_expression -> . binary_expression EQUALS binary_expression
    (121) binary_expression -> . binary_expression DIFF binary_expression
    (122) binary_expression -> . binary_expression AND binary_expression
    (123) binary_expression -> . binary_expression OR binary_expression
    (33) cast_expression -> . unary_expression
    (34) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (106) unary_expression -> . postfix_expression
    (107) unary_expression -> . PLUSPLUS unary_expression
    (108) unary_expression -> . MINUSMINUS unary_expression
    (109) unary_expression -> . unary_operator cast_expression
    (28) postfix_expression -> . primary_expression
    (29) postfix_expression -> . postfix_expression PLUSPLUS
    (30) postfix_expression -> . postfix_expression MINUSMINUS
    (31) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (32) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (36) unary_operator -> . ADDRESS
    (37) unary_operator -> . TIMES
    (38) unary_operator -> . PLUS
    (39) unary_operator -> . MINUS
    (40) unary_operator -> . NOT
    (92) primary_expression -> . identifier
    (93) primary_expression -> . constant
    (94) primary_expression -> . string_literal
    (95) primary_expression -> . LPAREN expression RPAREN
    (35) identifier -> . ID
    (48) constant -> . INT_CONST
    (49) constant -> . FLOAT_CONST
    (50) constant -> . CHAR_CONST
    (91) string_literal -> . STRING

    LPAREN          shift and go to state 59
    PLUSPLUS        shift and go to state 61
    MINUSMINUS      shift and go to state 62
    ADDRESS         shift and go to state 65
    TIMES           shift and go to state 55
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    NOT             shift and go to state 66
    ID              shift and go to state 18
    INT_CONST       shift and go to state 70
    FLOAT_CONST     shift and go to state 71
    CHAR_CONST      shift and go to state 72
    STRING          shift and go to state 73

    binary_expression              shift and go to state 171
    cast_expression                shift and go to state 54
    unary_expression               shift and go to state 58
    postfix_expression             shift and go to state 60
    unary_operator                 shift and go to state 63
    primary_expression             shift and go to state 64
    identifier                     shift and go to state 67
    constant                       shift and go to state 68
    string_literal                 shift and go to state 69

state 125

    (123) binary_expression -> binary_expression OR . binary_expression
    (110) binary_expression -> . cast_expression
    (111) binary_expression -> . binary_expression TIMES binary_expression
    (112) binary_expression -> . binary_expression DIVIDE binary_expression
    (113) binary_expression -> . binary_expression MOD binary_expression
    (114) binary_expression -> . binary_expression PLUS binary_expression
    (115) binary_expression -> . binary_expression MINUS binary_expression
    (116) binary_expression -> . binary_expression LT binary_expression
    (117) binary_expression -> . binary_expression LE binary_expression
    (118) binary_expression -> . binary_expression HT binary_expression
    (119) binary_expression -> . binary_expression HE binary_expression
    (120) binary_expression -> . binary_expression EQUALS binary_expression
    (121) binary_expression -> . binary_expression DIFF binary_expression
    (122) binary_expression -> . binary_expression AND binary_expression
    (123) binary_expression -> . binary_expression OR binary_expression
    (33) cast_expression -> . unary_expression
    (34) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (106) unary_expression -> . postfix_expression
    (107) unary_expression -> . PLUSPLUS unary_expression
    (108) unary_expression -> . MINUSMINUS unary_expression
    (109) unary_expression -> . unary_operator cast_expression
    (28) postfix_expression -> . primary_expression
    (29) postfix_expression -> . postfix_expression PLUSPLUS
    (30) postfix_expression -> . postfix_expression MINUSMINUS
    (31) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (32) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (36) unary_operator -> . ADDRESS
    (37) unary_operator -> . TIMES
    (38) unary_operator -> . PLUS
    (39) unary_operator -> . MINUS
    (40) unary_operator -> . NOT
    (92) primary_expression -> . identifier
    (93) primary_expression -> . constant
    (94) primary_expression -> . string_literal
    (95) primary_expression -> . LPAREN expression RPAREN
    (35) identifier -> . ID
    (48) constant -> . INT_CONST
    (49) constant -> . FLOAT_CONST
    (50) constant -> . CHAR_CONST
    (91) string_literal -> . STRING

    LPAREN          shift and go to state 59
    PLUSPLUS        shift and go to state 61
    MINUSMINUS      shift and go to state 62
    ADDRESS         shift and go to state 65
    TIMES           shift and go to state 55
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    NOT             shift and go to state 66
    ID              shift and go to state 18
    INT_CONST       shift and go to state 70
    FLOAT_CONST     shift and go to state 71
    CHAR_CONST      shift and go to state 72
    STRING          shift and go to state 73

    binary_expression              shift and go to state 172
    cast_expression                shift and go to state 54
    unary_expression               shift and go to state 58
    postfix_expression             shift and go to state 60
    unary_operator                 shift and go to state 63
    primary_expression             shift and go to state 64
    identifier                     shift and go to state 67
    constant                       shift and go to state 68
    string_literal                 shift and go to state 69

state 126

    (34) cast_expression -> LPAREN type_specifier . RPAREN cast_expression

    RPAREN          shift and go to state 173


state 127

    (95) primary_expression -> LPAREN expression . RPAREN
    (90) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 174
    COMMA           shift and go to state 150


state 128

    (29) postfix_expression -> postfix_expression PLUSPLUS .

    PLUSPLUS        reduce using rule 29 (postfix_expression -> postfix_expression PLUSPLUS .)
    MINUSMINUS      reduce using rule 29 (postfix_expression -> postfix_expression PLUSPLUS .)
    LBRACKET        reduce using rule 29 (postfix_expression -> postfix_expression PLUSPLUS .)
    LPAREN          reduce using rule 29 (postfix_expression -> postfix_expression PLUSPLUS .)
    TIMES           reduce using rule 29 (postfix_expression -> postfix_expression PLUSPLUS .)
    DIVIDE          reduce using rule 29 (postfix_expression -> postfix_expression PLUSPLUS .)
    MOD             reduce using rule 29 (postfix_expression -> postfix_expression PLUSPLUS .)
    PLUS            reduce using rule 29 (postfix_expression -> postfix_expression PLUSPLUS .)
    MINUS           reduce using rule 29 (postfix_expression -> postfix_expression PLUSPLUS .)
    LT              reduce using rule 29 (postfix_expression -> postfix_expression PLUSPLUS .)
    LE              reduce using rule 29 (postfix_expression -> postfix_expression PLUSPLUS .)
    HT              reduce using rule 29 (postfix_expression -> postfix_expression PLUSPLUS .)
    HE              reduce using rule 29 (postfix_expression -> postfix_expression PLUSPLUS .)
    EQUALS          reduce using rule 29 (postfix_expression -> postfix_expression PLUSPLUS .)
    DIFF            reduce using rule 29 (postfix_expression -> postfix_expression PLUSPLUS .)
    AND             reduce using rule 29 (postfix_expression -> postfix_expression PLUSPLUS .)
    OR              reduce using rule 29 (postfix_expression -> postfix_expression PLUSPLUS .)
    RBRACKET        reduce using rule 29 (postfix_expression -> postfix_expression PLUSPLUS .)
    EQ              reduce using rule 29 (postfix_expression -> postfix_expression PLUSPLUS .)
    ASSIGN_TIMES    reduce using rule 29 (postfix_expression -> postfix_expression PLUSPLUS .)
    ASSIGN_DIVIDE   reduce using rule 29 (postfix_expression -> postfix_expression PLUSPLUS .)
    ASSIGN_MOD      reduce using rule 29 (postfix_expression -> postfix_expression PLUSPLUS .)
    ASSIGN_PLUS     reduce using rule 29 (postfix_expression -> postfix_expression PLUSPLUS .)
    ASSIGN_MINUS    reduce using rule 29 (postfix_expression -> postfix_expression PLUSPLUS .)
    COMMA           reduce using rule 29 (postfix_expression -> postfix_expression PLUSPLUS .)
    SEMI            reduce using rule 29 (postfix_expression -> postfix_expression PLUSPLUS .)
    RPAREN          reduce using rule 29 (postfix_expression -> postfix_expression PLUSPLUS .)
    RBRACE          reduce using rule 29 (postfix_expression -> postfix_expression PLUSPLUS .)


state 129

    (30) postfix_expression -> postfix_expression MINUSMINUS .

    PLUSPLUS        reduce using rule 30 (postfix_expression -> postfix_expression MINUSMINUS .)
    MINUSMINUS      reduce using rule 30 (postfix_expression -> postfix_expression MINUSMINUS .)
    LBRACKET        reduce using rule 30 (postfix_expression -> postfix_expression MINUSMINUS .)
    LPAREN          reduce using rule 30 (postfix_expression -> postfix_expression MINUSMINUS .)
    TIMES           reduce using rule 30 (postfix_expression -> postfix_expression MINUSMINUS .)
    DIVIDE          reduce using rule 30 (postfix_expression -> postfix_expression MINUSMINUS .)
    MOD             reduce using rule 30 (postfix_expression -> postfix_expression MINUSMINUS .)
    PLUS            reduce using rule 30 (postfix_expression -> postfix_expression MINUSMINUS .)
    MINUS           reduce using rule 30 (postfix_expression -> postfix_expression MINUSMINUS .)
    LT              reduce using rule 30 (postfix_expression -> postfix_expression MINUSMINUS .)
    LE              reduce using rule 30 (postfix_expression -> postfix_expression MINUSMINUS .)
    HT              reduce using rule 30 (postfix_expression -> postfix_expression MINUSMINUS .)
    HE              reduce using rule 30 (postfix_expression -> postfix_expression MINUSMINUS .)
    EQUALS          reduce using rule 30 (postfix_expression -> postfix_expression MINUSMINUS .)
    DIFF            reduce using rule 30 (postfix_expression -> postfix_expression MINUSMINUS .)
    AND             reduce using rule 30 (postfix_expression -> postfix_expression MINUSMINUS .)
    OR              reduce using rule 30 (postfix_expression -> postfix_expression MINUSMINUS .)
    RBRACKET        reduce using rule 30 (postfix_expression -> postfix_expression MINUSMINUS .)
    EQ              reduce using rule 30 (postfix_expression -> postfix_expression MINUSMINUS .)
    ASSIGN_TIMES    reduce using rule 30 (postfix_expression -> postfix_expression MINUSMINUS .)
    ASSIGN_DIVIDE   reduce using rule 30 (postfix_expression -> postfix_expression MINUSMINUS .)
    ASSIGN_MOD      reduce using rule 30 (postfix_expression -> postfix_expression MINUSMINUS .)
    ASSIGN_PLUS     reduce using rule 30 (postfix_expression -> postfix_expression MINUSMINUS .)
    ASSIGN_MINUS    reduce using rule 30 (postfix_expression -> postfix_expression MINUSMINUS .)
    COMMA           reduce using rule 30 (postfix_expression -> postfix_expression MINUSMINUS .)
    SEMI            reduce using rule 30 (postfix_expression -> postfix_expression MINUSMINUS .)
    RPAREN          reduce using rule 30 (postfix_expression -> postfix_expression MINUSMINUS .)
    RBRACE          reduce using rule 30 (postfix_expression -> postfix_expression MINUSMINUS .)


state 130

    (31) postfix_expression -> postfix_expression LBRACKET . expression RBRACKET
    (89) expression -> . assignment_expression
    (90) expression -> . expression COMMA assignment_expression
    (98) assignment_expression -> . binary_expression
    (99) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (110) binary_expression -> . cast_expression
    (111) binary_expression -> . binary_expression TIMES binary_expression
    (112) binary_expression -> . binary_expression DIVIDE binary_expression
    (113) binary_expression -> . binary_expression MOD binary_expression
    (114) binary_expression -> . binary_expression PLUS binary_expression
    (115) binary_expression -> . binary_expression MINUS binary_expression
    (116) binary_expression -> . binary_expression LT binary_expression
    (117) binary_expression -> . binary_expression LE binary_expression
    (118) binary_expression -> . binary_expression HT binary_expression
    (119) binary_expression -> . binary_expression HE binary_expression
    (120) binary_expression -> . binary_expression EQUALS binary_expression
    (121) binary_expression -> . binary_expression DIFF binary_expression
    (122) binary_expression -> . binary_expression AND binary_expression
    (123) binary_expression -> . binary_expression OR binary_expression
    (106) unary_expression -> . postfix_expression
    (107) unary_expression -> . PLUSPLUS unary_expression
    (108) unary_expression -> . MINUSMINUS unary_expression
    (109) unary_expression -> . unary_operator cast_expression
    (33) cast_expression -> . unary_expression
    (34) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (28) postfix_expression -> . primary_expression
    (29) postfix_expression -> . postfix_expression PLUSPLUS
    (30) postfix_expression -> . postfix_expression MINUSMINUS
    (31) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (32) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (36) unary_operator -> . ADDRESS
    (37) unary_operator -> . TIMES
    (38) unary_operator -> . PLUS
    (39) unary_operator -> . MINUS
    (40) unary_operator -> . NOT
    (92) primary_expression -> . identifier
    (93) primary_expression -> . constant
    (94) primary_expression -> . string_literal
    (95) primary_expression -> . LPAREN expression RPAREN
    (35) identifier -> . ID
    (48) constant -> . INT_CONST
    (49) constant -> . FLOAT_CONST
    (50) constant -> . CHAR_CONST
    (91) string_literal -> . STRING

    PLUSPLUS        shift and go to state 61
    MINUSMINUS      shift and go to state 62
    LPAREN          shift and go to state 59
    ADDRESS         shift and go to state 65
    TIMES           shift and go to state 55
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    NOT             shift and go to state 66
    ID              shift and go to state 18
    INT_CONST       shift and go to state 70
    FLOAT_CONST     shift and go to state 71
    CHAR_CONST      shift and go to state 72
    STRING          shift and go to state 73

    postfix_expression             shift and go to state 60
    expression                     shift and go to state 175
    assignment_expression          shift and go to state 106
    binary_expression              shift and go to state 79
    unary_expression               shift and go to state 80
    cast_expression                shift and go to state 54
    unary_operator                 shift and go to state 63
    primary_expression             shift and go to state 64
    identifier                     shift and go to state 67
    constant                       shift and go to state 68
    string_literal                 shift and go to state 69

state 131

    (32) postfix_expression -> postfix_expression LPAREN . argument_expression_opt RPAREN
    (66) argument_expression_opt -> . argument_expression_list
    (67) argument_expression_opt -> . empty
    (64) argument_expression_list -> . assignment_expression
    (65) argument_expression_list -> . argument_expression_list COMMA assignment_expression
    (124) empty -> .
    (98) assignment_expression -> . binary_expression
    (99) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (110) binary_expression -> . cast_expression
    (111) binary_expression -> . binary_expression TIMES binary_expression
    (112) binary_expression -> . binary_expression DIVIDE binary_expression
    (113) binary_expression -> . binary_expression MOD binary_expression
    (114) binary_expression -> . binary_expression PLUS binary_expression
    (115) binary_expression -> . binary_expression MINUS binary_expression
    (116) binary_expression -> . binary_expression LT binary_expression
    (117) binary_expression -> . binary_expression LE binary_expression
    (118) binary_expression -> . binary_expression HT binary_expression
    (119) binary_expression -> . binary_expression HE binary_expression
    (120) binary_expression -> . binary_expression EQUALS binary_expression
    (121) binary_expression -> . binary_expression DIFF binary_expression
    (122) binary_expression -> . binary_expression AND binary_expression
    (123) binary_expression -> . binary_expression OR binary_expression
    (106) unary_expression -> . postfix_expression
    (107) unary_expression -> . PLUSPLUS unary_expression
    (108) unary_expression -> . MINUSMINUS unary_expression
    (109) unary_expression -> . unary_operator cast_expression
    (33) cast_expression -> . unary_expression
    (34) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (28) postfix_expression -> . primary_expression
    (29) postfix_expression -> . postfix_expression PLUSPLUS
    (30) postfix_expression -> . postfix_expression MINUSMINUS
    (31) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (32) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (36) unary_operator -> . ADDRESS
    (37) unary_operator -> . TIMES
    (38) unary_operator -> . PLUS
    (39) unary_operator -> . MINUS
    (40) unary_operator -> . NOT
    (92) primary_expression -> . identifier
    (93) primary_expression -> . constant
    (94) primary_expression -> . string_literal
    (95) primary_expression -> . LPAREN expression RPAREN
    (35) identifier -> . ID
    (48) constant -> . INT_CONST
    (49) constant -> . FLOAT_CONST
    (50) constant -> . CHAR_CONST
    (91) string_literal -> . STRING

    RPAREN          reduce using rule 124 (empty -> .)
    PLUSPLUS        shift and go to state 61
    MINUSMINUS      shift and go to state 62
    LPAREN          shift and go to state 59
    ADDRESS         shift and go to state 65
    TIMES           shift and go to state 55
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    NOT             shift and go to state 66
    ID              shift and go to state 18
    INT_CONST       shift and go to state 70
    FLOAT_CONST     shift and go to state 71
    CHAR_CONST      shift and go to state 72
    STRING          shift and go to state 73

    postfix_expression             shift and go to state 60
    argument_expression_opt        shift and go to state 176
    argument_expression_list       shift and go to state 177
    empty                          shift and go to state 178
    assignment_expression          shift and go to state 179
    binary_expression              shift and go to state 79
    unary_expression               shift and go to state 80
    cast_expression                shift and go to state 54
    unary_operator                 shift and go to state 63
    primary_expression             shift and go to state 64
    identifier                     shift and go to state 67
    constant                       shift and go to state 68
    string_literal                 shift and go to state 69

state 132

    (107) unary_expression -> PLUSPLUS unary_expression .

    TIMES           reduce using rule 107 (unary_expression -> PLUSPLUS unary_expression .)
    DIVIDE          reduce using rule 107 (unary_expression -> PLUSPLUS unary_expression .)
    MOD             reduce using rule 107 (unary_expression -> PLUSPLUS unary_expression .)
    PLUS            reduce using rule 107 (unary_expression -> PLUSPLUS unary_expression .)
    MINUS           reduce using rule 107 (unary_expression -> PLUSPLUS unary_expression .)
    LT              reduce using rule 107 (unary_expression -> PLUSPLUS unary_expression .)
    LE              reduce using rule 107 (unary_expression -> PLUSPLUS unary_expression .)
    HT              reduce using rule 107 (unary_expression -> PLUSPLUS unary_expression .)
    HE              reduce using rule 107 (unary_expression -> PLUSPLUS unary_expression .)
    EQUALS          reduce using rule 107 (unary_expression -> PLUSPLUS unary_expression .)
    DIFF            reduce using rule 107 (unary_expression -> PLUSPLUS unary_expression .)
    AND             reduce using rule 107 (unary_expression -> PLUSPLUS unary_expression .)
    OR              reduce using rule 107 (unary_expression -> PLUSPLUS unary_expression .)
    RBRACKET        reduce using rule 107 (unary_expression -> PLUSPLUS unary_expression .)
    EQ              reduce using rule 107 (unary_expression -> PLUSPLUS unary_expression .)
    ASSIGN_TIMES    reduce using rule 107 (unary_expression -> PLUSPLUS unary_expression .)
    ASSIGN_DIVIDE   reduce using rule 107 (unary_expression -> PLUSPLUS unary_expression .)
    ASSIGN_MOD      reduce using rule 107 (unary_expression -> PLUSPLUS unary_expression .)
    ASSIGN_PLUS     reduce using rule 107 (unary_expression -> PLUSPLUS unary_expression .)
    ASSIGN_MINUS    reduce using rule 107 (unary_expression -> PLUSPLUS unary_expression .)
    COMMA           reduce using rule 107 (unary_expression -> PLUSPLUS unary_expression .)
    SEMI            reduce using rule 107 (unary_expression -> PLUSPLUS unary_expression .)
    RPAREN          reduce using rule 107 (unary_expression -> PLUSPLUS unary_expression .)
    RBRACE          reduce using rule 107 (unary_expression -> PLUSPLUS unary_expression .)


state 133

    (95) primary_expression -> LPAREN . expression RPAREN
    (89) expression -> . assignment_expression
    (90) expression -> . expression COMMA assignment_expression
    (98) assignment_expression -> . binary_expression
    (99) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (110) binary_expression -> . cast_expression
    (111) binary_expression -> . binary_expression TIMES binary_expression
    (112) binary_expression -> . binary_expression DIVIDE binary_expression
    (113) binary_expression -> . binary_expression MOD binary_expression
    (114) binary_expression -> . binary_expression PLUS binary_expression
    (115) binary_expression -> . binary_expression MINUS binary_expression
    (116) binary_expression -> . binary_expression LT binary_expression
    (117) binary_expression -> . binary_expression LE binary_expression
    (118) binary_expression -> . binary_expression HT binary_expression
    (119) binary_expression -> . binary_expression HE binary_expression
    (120) binary_expression -> . binary_expression EQUALS binary_expression
    (121) binary_expression -> . binary_expression DIFF binary_expression
    (122) binary_expression -> . binary_expression AND binary_expression
    (123) binary_expression -> . binary_expression OR binary_expression
    (106) unary_expression -> . postfix_expression
    (107) unary_expression -> . PLUSPLUS unary_expression
    (108) unary_expression -> . MINUSMINUS unary_expression
    (109) unary_expression -> . unary_operator cast_expression
    (33) cast_expression -> . unary_expression
    (34) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (28) postfix_expression -> . primary_expression
    (29) postfix_expression -> . postfix_expression PLUSPLUS
    (30) postfix_expression -> . postfix_expression MINUSMINUS
    (31) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (32) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (36) unary_operator -> . ADDRESS
    (37) unary_operator -> . TIMES
    (38) unary_operator -> . PLUS
    (39) unary_operator -> . MINUS
    (40) unary_operator -> . NOT
    (92) primary_expression -> . identifier
    (93) primary_expression -> . constant
    (94) primary_expression -> . string_literal
    (95) primary_expression -> . LPAREN expression RPAREN
    (35) identifier -> . ID
    (48) constant -> . INT_CONST
    (49) constant -> . FLOAT_CONST
    (50) constant -> . CHAR_CONST
    (91) string_literal -> . STRING

    PLUSPLUS        shift and go to state 61
    MINUSMINUS      shift and go to state 62
    LPAREN          shift and go to state 59
    ADDRESS         shift and go to state 65
    TIMES           shift and go to state 55
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    NOT             shift and go to state 66
    ID              shift and go to state 18
    INT_CONST       shift and go to state 70
    FLOAT_CONST     shift and go to state 71
    CHAR_CONST      shift and go to state 72
    STRING          shift and go to state 73

    expression                     shift and go to state 127
    assignment_expression          shift and go to state 106
    binary_expression              shift and go to state 79
    unary_expression               shift and go to state 80
    cast_expression                shift and go to state 54
    postfix_expression             shift and go to state 60
    unary_operator                 shift and go to state 63
    primary_expression             shift and go to state 64
    identifier                     shift and go to state 67
    constant                       shift and go to state 68
    string_literal                 shift and go to state 69

state 134

    (108) unary_expression -> MINUSMINUS unary_expression .

    TIMES           reduce using rule 108 (unary_expression -> MINUSMINUS unary_expression .)
    DIVIDE          reduce using rule 108 (unary_expression -> MINUSMINUS unary_expression .)
    MOD             reduce using rule 108 (unary_expression -> MINUSMINUS unary_expression .)
    PLUS            reduce using rule 108 (unary_expression -> MINUSMINUS unary_expression .)
    MINUS           reduce using rule 108 (unary_expression -> MINUSMINUS unary_expression .)
    LT              reduce using rule 108 (unary_expression -> MINUSMINUS unary_expression .)
    LE              reduce using rule 108 (unary_expression -> MINUSMINUS unary_expression .)
    HT              reduce using rule 108 (unary_expression -> MINUSMINUS unary_expression .)
    HE              reduce using rule 108 (unary_expression -> MINUSMINUS unary_expression .)
    EQUALS          reduce using rule 108 (unary_expression -> MINUSMINUS unary_expression .)
    DIFF            reduce using rule 108 (unary_expression -> MINUSMINUS unary_expression .)
    AND             reduce using rule 108 (unary_expression -> MINUSMINUS unary_expression .)
    OR              reduce using rule 108 (unary_expression -> MINUSMINUS unary_expression .)
    RBRACKET        reduce using rule 108 (unary_expression -> MINUSMINUS unary_expression .)
    EQ              reduce using rule 108 (unary_expression -> MINUSMINUS unary_expression .)
    ASSIGN_TIMES    reduce using rule 108 (unary_expression -> MINUSMINUS unary_expression .)
    ASSIGN_DIVIDE   reduce using rule 108 (unary_expression -> MINUSMINUS unary_expression .)
    ASSIGN_MOD      reduce using rule 108 (unary_expression -> MINUSMINUS unary_expression .)
    ASSIGN_PLUS     reduce using rule 108 (unary_expression -> MINUSMINUS unary_expression .)
    ASSIGN_MINUS    reduce using rule 108 (unary_expression -> MINUSMINUS unary_expression .)
    COMMA           reduce using rule 108 (unary_expression -> MINUSMINUS unary_expression .)
    SEMI            reduce using rule 108 (unary_expression -> MINUSMINUS unary_expression .)
    RPAREN          reduce using rule 108 (unary_expression -> MINUSMINUS unary_expression .)
    RBRACE          reduce using rule 108 (unary_expression -> MINUSMINUS unary_expression .)


state 135

    (109) unary_expression -> unary_operator cast_expression .

    TIMES           reduce using rule 109 (unary_expression -> unary_operator cast_expression .)
    DIVIDE          reduce using rule 109 (unary_expression -> unary_operator cast_expression .)
    MOD             reduce using rule 109 (unary_expression -> unary_operator cast_expression .)
    PLUS            reduce using rule 109 (unary_expression -> unary_operator cast_expression .)
    MINUS           reduce using rule 109 (unary_expression -> unary_operator cast_expression .)
    LT              reduce using rule 109 (unary_expression -> unary_operator cast_expression .)
    LE              reduce using rule 109 (unary_expression -> unary_operator cast_expression .)
    HT              reduce using rule 109 (unary_expression -> unary_operator cast_expression .)
    HE              reduce using rule 109 (unary_expression -> unary_operator cast_expression .)
    EQUALS          reduce using rule 109 (unary_expression -> unary_operator cast_expression .)
    DIFF            reduce using rule 109 (unary_expression -> unary_operator cast_expression .)
    AND             reduce using rule 109 (unary_expression -> unary_operator cast_expression .)
    OR              reduce using rule 109 (unary_expression -> unary_operator cast_expression .)
    RBRACKET        reduce using rule 109 (unary_expression -> unary_operator cast_expression .)
    EQ              reduce using rule 109 (unary_expression -> unary_operator cast_expression .)
    ASSIGN_TIMES    reduce using rule 109 (unary_expression -> unary_operator cast_expression .)
    ASSIGN_DIVIDE   reduce using rule 109 (unary_expression -> unary_operator cast_expression .)
    ASSIGN_MOD      reduce using rule 109 (unary_expression -> unary_operator cast_expression .)
    ASSIGN_PLUS     reduce using rule 109 (unary_expression -> unary_operator cast_expression .)
    ASSIGN_MINUS    reduce using rule 109 (unary_expression -> unary_operator cast_expression .)
    COMMA           reduce using rule 109 (unary_expression -> unary_operator cast_expression .)
    SEMI            reduce using rule 109 (unary_expression -> unary_operator cast_expression .)
    RPAREN          reduce using rule 109 (unary_expression -> unary_operator cast_expression .)
    RBRACE          reduce using rule 109 (unary_expression -> unary_operator cast_expression .)


state 136

    (26) initializer -> LBRACE initializer_list . RBRACE
    (27) initializer -> LBRACE initializer_list . COMMA RBRACE
    (63) initializer_list -> initializer_list . COMMA initializer

    RBRACE          shift and go to state 180
    COMMA           shift and go to state 181


state 137

    (62) initializer_list -> initializer .

    RBRACE          reduce using rule 62 (initializer_list -> initializer .)
    COMMA           reduce using rule 62 (initializer_list -> initializer .)


state 138

    (99) assignment_expression -> unary_expression assignment_operator . assignment_expression
    (98) assignment_expression -> . binary_expression
    (99) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (110) binary_expression -> . cast_expression
    (111) binary_expression -> . binary_expression TIMES binary_expression
    (112) binary_expression -> . binary_expression DIVIDE binary_expression
    (113) binary_expression -> . binary_expression MOD binary_expression
    (114) binary_expression -> . binary_expression PLUS binary_expression
    (115) binary_expression -> . binary_expression MINUS binary_expression
    (116) binary_expression -> . binary_expression LT binary_expression
    (117) binary_expression -> . binary_expression LE binary_expression
    (118) binary_expression -> . binary_expression HT binary_expression
    (119) binary_expression -> . binary_expression HE binary_expression
    (120) binary_expression -> . binary_expression EQUALS binary_expression
    (121) binary_expression -> . binary_expression DIFF binary_expression
    (122) binary_expression -> . binary_expression AND binary_expression
    (123) binary_expression -> . binary_expression OR binary_expression
    (106) unary_expression -> . postfix_expression
    (107) unary_expression -> . PLUSPLUS unary_expression
    (108) unary_expression -> . MINUSMINUS unary_expression
    (109) unary_expression -> . unary_operator cast_expression
    (33) cast_expression -> . unary_expression
    (34) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (28) postfix_expression -> . primary_expression
    (29) postfix_expression -> . postfix_expression PLUSPLUS
    (30) postfix_expression -> . postfix_expression MINUSMINUS
    (31) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (32) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (36) unary_operator -> . ADDRESS
    (37) unary_operator -> . TIMES
    (38) unary_operator -> . PLUS
    (39) unary_operator -> . MINUS
    (40) unary_operator -> . NOT
    (92) primary_expression -> . identifier
    (93) primary_expression -> . constant
    (94) primary_expression -> . string_literal
    (95) primary_expression -> . LPAREN expression RPAREN
    (35) identifier -> . ID
    (48) constant -> . INT_CONST
    (49) constant -> . FLOAT_CONST
    (50) constant -> . CHAR_CONST
    (91) string_literal -> . STRING

    PLUSPLUS        shift and go to state 61
    MINUSMINUS      shift and go to state 62
    LPAREN          shift and go to state 59
    ADDRESS         shift and go to state 65
    TIMES           shift and go to state 55
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    NOT             shift and go to state 66
    ID              shift and go to state 18
    INT_CONST       shift and go to state 70
    FLOAT_CONST     shift and go to state 71
    CHAR_CONST      shift and go to state 72
    STRING          shift and go to state 73

    unary_expression               shift and go to state 80
    assignment_expression          shift and go to state 182
    binary_expression              shift and go to state 79
    cast_expression                shift and go to state 54
    postfix_expression             shift and go to state 60
    unary_operator                 shift and go to state 63
    primary_expression             shift and go to state 64
    identifier                     shift and go to state 67
    constant                       shift and go to state 68
    string_literal                 shift and go to state 69

state 139

    (100) assignment_operator -> EQ .

    PLUSPLUS        reduce using rule 100 (assignment_operator -> EQ .)
    MINUSMINUS      reduce using rule 100 (assignment_operator -> EQ .)
    LPAREN          reduce using rule 100 (assignment_operator -> EQ .)
    ADDRESS         reduce using rule 100 (assignment_operator -> EQ .)
    TIMES           reduce using rule 100 (assignment_operator -> EQ .)
    PLUS            reduce using rule 100 (assignment_operator -> EQ .)
    MINUS           reduce using rule 100 (assignment_operator -> EQ .)
    NOT             reduce using rule 100 (assignment_operator -> EQ .)
    ID              reduce using rule 100 (assignment_operator -> EQ .)
    INT_CONST       reduce using rule 100 (assignment_operator -> EQ .)
    FLOAT_CONST     reduce using rule 100 (assignment_operator -> EQ .)
    CHAR_CONST      reduce using rule 100 (assignment_operator -> EQ .)
    STRING          reduce using rule 100 (assignment_operator -> EQ .)


state 140

    (101) assignment_operator -> ASSIGN_TIMES .

    PLUSPLUS        reduce using rule 101 (assignment_operator -> ASSIGN_TIMES .)
    MINUSMINUS      reduce using rule 101 (assignment_operator -> ASSIGN_TIMES .)
    LPAREN          reduce using rule 101 (assignment_operator -> ASSIGN_TIMES .)
    ADDRESS         reduce using rule 101 (assignment_operator -> ASSIGN_TIMES .)
    TIMES           reduce using rule 101 (assignment_operator -> ASSIGN_TIMES .)
    PLUS            reduce using rule 101 (assignment_operator -> ASSIGN_TIMES .)
    MINUS           reduce using rule 101 (assignment_operator -> ASSIGN_TIMES .)
    NOT             reduce using rule 101 (assignment_operator -> ASSIGN_TIMES .)
    ID              reduce using rule 101 (assignment_operator -> ASSIGN_TIMES .)
    INT_CONST       reduce using rule 101 (assignment_operator -> ASSIGN_TIMES .)
    FLOAT_CONST     reduce using rule 101 (assignment_operator -> ASSIGN_TIMES .)
    CHAR_CONST      reduce using rule 101 (assignment_operator -> ASSIGN_TIMES .)
    STRING          reduce using rule 101 (assignment_operator -> ASSIGN_TIMES .)


state 141

    (102) assignment_operator -> ASSIGN_DIVIDE .

    PLUSPLUS        reduce using rule 102 (assignment_operator -> ASSIGN_DIVIDE .)
    MINUSMINUS      reduce using rule 102 (assignment_operator -> ASSIGN_DIVIDE .)
    LPAREN          reduce using rule 102 (assignment_operator -> ASSIGN_DIVIDE .)
    ADDRESS         reduce using rule 102 (assignment_operator -> ASSIGN_DIVIDE .)
    TIMES           reduce using rule 102 (assignment_operator -> ASSIGN_DIVIDE .)
    PLUS            reduce using rule 102 (assignment_operator -> ASSIGN_DIVIDE .)
    MINUS           reduce using rule 102 (assignment_operator -> ASSIGN_DIVIDE .)
    NOT             reduce using rule 102 (assignment_operator -> ASSIGN_DIVIDE .)
    ID              reduce using rule 102 (assignment_operator -> ASSIGN_DIVIDE .)
    INT_CONST       reduce using rule 102 (assignment_operator -> ASSIGN_DIVIDE .)
    FLOAT_CONST     reduce using rule 102 (assignment_operator -> ASSIGN_DIVIDE .)
    CHAR_CONST      reduce using rule 102 (assignment_operator -> ASSIGN_DIVIDE .)
    STRING          reduce using rule 102 (assignment_operator -> ASSIGN_DIVIDE .)


state 142

    (103) assignment_operator -> ASSIGN_MOD .

    PLUSPLUS        reduce using rule 103 (assignment_operator -> ASSIGN_MOD .)
    MINUSMINUS      reduce using rule 103 (assignment_operator -> ASSIGN_MOD .)
    LPAREN          reduce using rule 103 (assignment_operator -> ASSIGN_MOD .)
    ADDRESS         reduce using rule 103 (assignment_operator -> ASSIGN_MOD .)
    TIMES           reduce using rule 103 (assignment_operator -> ASSIGN_MOD .)
    PLUS            reduce using rule 103 (assignment_operator -> ASSIGN_MOD .)
    MINUS           reduce using rule 103 (assignment_operator -> ASSIGN_MOD .)
    NOT             reduce using rule 103 (assignment_operator -> ASSIGN_MOD .)
    ID              reduce using rule 103 (assignment_operator -> ASSIGN_MOD .)
    INT_CONST       reduce using rule 103 (assignment_operator -> ASSIGN_MOD .)
    FLOAT_CONST     reduce using rule 103 (assignment_operator -> ASSIGN_MOD .)
    CHAR_CONST      reduce using rule 103 (assignment_operator -> ASSIGN_MOD .)
    STRING          reduce using rule 103 (assignment_operator -> ASSIGN_MOD .)


state 143

    (104) assignment_operator -> ASSIGN_PLUS .

    PLUSPLUS        reduce using rule 104 (assignment_operator -> ASSIGN_PLUS .)
    MINUSMINUS      reduce using rule 104 (assignment_operator -> ASSIGN_PLUS .)
    LPAREN          reduce using rule 104 (assignment_operator -> ASSIGN_PLUS .)
    ADDRESS         reduce using rule 104 (assignment_operator -> ASSIGN_PLUS .)
    TIMES           reduce using rule 104 (assignment_operator -> ASSIGN_PLUS .)
    PLUS            reduce using rule 104 (assignment_operator -> ASSIGN_PLUS .)
    MINUS           reduce using rule 104 (assignment_operator -> ASSIGN_PLUS .)
    NOT             reduce using rule 104 (assignment_operator -> ASSIGN_PLUS .)
    ID              reduce using rule 104 (assignment_operator -> ASSIGN_PLUS .)
    INT_CONST       reduce using rule 104 (assignment_operator -> ASSIGN_PLUS .)
    FLOAT_CONST     reduce using rule 104 (assignment_operator -> ASSIGN_PLUS .)
    CHAR_CONST      reduce using rule 104 (assignment_operator -> ASSIGN_PLUS .)
    STRING          reduce using rule 104 (assignment_operator -> ASSIGN_PLUS .)


state 144

    (105) assignment_operator -> ASSIGN_MINUS .

    PLUSPLUS        reduce using rule 105 (assignment_operator -> ASSIGN_MINUS .)
    MINUSMINUS      reduce using rule 105 (assignment_operator -> ASSIGN_MINUS .)
    LPAREN          reduce using rule 105 (assignment_operator -> ASSIGN_MINUS .)
    ADDRESS         reduce using rule 105 (assignment_operator -> ASSIGN_MINUS .)
    TIMES           reduce using rule 105 (assignment_operator -> ASSIGN_MINUS .)
    PLUS            reduce using rule 105 (assignment_operator -> ASSIGN_MINUS .)
    MINUS           reduce using rule 105 (assignment_operator -> ASSIGN_MINUS .)
    NOT             reduce using rule 105 (assignment_operator -> ASSIGN_MINUS .)
    ID              reduce using rule 105 (assignment_operator -> ASSIGN_MINUS .)
    INT_CONST       reduce using rule 105 (assignment_operator -> ASSIGN_MINUS .)
    FLOAT_CONST     reduce using rule 105 (assignment_operator -> ASSIGN_MINUS .)
    CHAR_CONST      reduce using rule 105 (assignment_operator -> ASSIGN_MINUS .)
    STRING          reduce using rule 105 (assignment_operator -> ASSIGN_MINUS .)


state 145

    (74) compound_statement -> LBRACE block_item_list_opt RBRACE .

    VOID            reduce using rule 74 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    INT             reduce using rule 74 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    FLOAT           reduce using rule 74 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    CHAR            reduce using rule 74 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    TIMES           reduce using rule 74 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    LPAREN          reduce using rule 74 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    ID              reduce using rule 74 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    $end            reduce using rule 74 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    IF              reduce using rule 74 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    BREAK           reduce using rule 74 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    RETURN          reduce using rule 74 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    PRINT           reduce using rule 74 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    ASSERT          reduce using rule 74 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    READ            reduce using rule 74 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    WHILE           reduce using rule 74 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    FOR             reduce using rule 74 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    LBRACE          reduce using rule 74 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    PLUSPLUS        reduce using rule 74 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    MINUSMINUS      reduce using rule 74 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    ADDRESS         reduce using rule 74 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    PLUS            reduce using rule 74 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    MINUS           reduce using rule 74 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    NOT             reduce using rule 74 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    INT_CONST       reduce using rule 74 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    FLOAT_CONST     reduce using rule 74 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    CHAR_CONST      reduce using rule 74 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    STRING          reduce using rule 74 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    SEMI            reduce using rule 74 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    RBRACE          reduce using rule 74 (compound_statement -> LBRACE block_item_list_opt RBRACE .)
    ELSE            reduce using rule 74 (compound_statement -> LBRACE block_item_list_opt RBRACE .)


state 146

    (54) block_item_list -> block_item_list block_item .

    IF              reduce using rule 54 (block_item_list -> block_item_list block_item .)
    BREAK           reduce using rule 54 (block_item_list -> block_item_list block_item .)
    RETURN          reduce using rule 54 (block_item_list -> block_item_list block_item .)
    PRINT           reduce using rule 54 (block_item_list -> block_item_list block_item .)
    ASSERT          reduce using rule 54 (block_item_list -> block_item_list block_item .)
    READ            reduce using rule 54 (block_item_list -> block_item_list block_item .)
    WHILE           reduce using rule 54 (block_item_list -> block_item_list block_item .)
    FOR             reduce using rule 54 (block_item_list -> block_item_list block_item .)
    LBRACE          reduce using rule 54 (block_item_list -> block_item_list block_item .)
    VOID            reduce using rule 54 (block_item_list -> block_item_list block_item .)
    INT             reduce using rule 54 (block_item_list -> block_item_list block_item .)
    FLOAT           reduce using rule 54 (block_item_list -> block_item_list block_item .)
    CHAR            reduce using rule 54 (block_item_list -> block_item_list block_item .)
    PLUSPLUS        reduce using rule 54 (block_item_list -> block_item_list block_item .)
    MINUSMINUS      reduce using rule 54 (block_item_list -> block_item_list block_item .)
    LPAREN          reduce using rule 54 (block_item_list -> block_item_list block_item .)
    ADDRESS         reduce using rule 54 (block_item_list -> block_item_list block_item .)
    TIMES           reduce using rule 54 (block_item_list -> block_item_list block_item .)
    PLUS            reduce using rule 54 (block_item_list -> block_item_list block_item .)
    MINUS           reduce using rule 54 (block_item_list -> block_item_list block_item .)
    NOT             reduce using rule 54 (block_item_list -> block_item_list block_item .)
    ID              reduce using rule 54 (block_item_list -> block_item_list block_item .)
    INT_CONST       reduce using rule 54 (block_item_list -> block_item_list block_item .)
    FLOAT_CONST     reduce using rule 54 (block_item_list -> block_item_list block_item .)
    CHAR_CONST      reduce using rule 54 (block_item_list -> block_item_list block_item .)
    STRING          reduce using rule 54 (block_item_list -> block_item_list block_item .)
    SEMI            reduce using rule 54 (block_item_list -> block_item_list block_item .)
    RBRACE          reduce using rule 54 (block_item_list -> block_item_list block_item .)


state 147

    (97) expression_opt -> empty .

    SEMI            reduce using rule 97 (expression_opt -> empty .)
    RPAREN          reduce using rule 97 (expression_opt -> empty .)


state 148

    (73) expression_statement -> expression_opt SEMI .

    IF              reduce using rule 73 (expression_statement -> expression_opt SEMI .)
    BREAK           reduce using rule 73 (expression_statement -> expression_opt SEMI .)
    RETURN          reduce using rule 73 (expression_statement -> expression_opt SEMI .)
    PRINT           reduce using rule 73 (expression_statement -> expression_opt SEMI .)
    ASSERT          reduce using rule 73 (expression_statement -> expression_opt SEMI .)
    READ            reduce using rule 73 (expression_statement -> expression_opt SEMI .)
    WHILE           reduce using rule 73 (expression_statement -> expression_opt SEMI .)
    FOR             reduce using rule 73 (expression_statement -> expression_opt SEMI .)
    LBRACE          reduce using rule 73 (expression_statement -> expression_opt SEMI .)
    VOID            reduce using rule 73 (expression_statement -> expression_opt SEMI .)
    INT             reduce using rule 73 (expression_statement -> expression_opt SEMI .)
    FLOAT           reduce using rule 73 (expression_statement -> expression_opt SEMI .)
    CHAR            reduce using rule 73 (expression_statement -> expression_opt SEMI .)
    PLUSPLUS        reduce using rule 73 (expression_statement -> expression_opt SEMI .)
    MINUSMINUS      reduce using rule 73 (expression_statement -> expression_opt SEMI .)
    LPAREN          reduce using rule 73 (expression_statement -> expression_opt SEMI .)
    ADDRESS         reduce using rule 73 (expression_statement -> expression_opt SEMI .)
    TIMES           reduce using rule 73 (expression_statement -> expression_opt SEMI .)
    PLUS            reduce using rule 73 (expression_statement -> expression_opt SEMI .)
    MINUS           reduce using rule 73 (expression_statement -> expression_opt SEMI .)
    NOT             reduce using rule 73 (expression_statement -> expression_opt SEMI .)
    ID              reduce using rule 73 (expression_statement -> expression_opt SEMI .)
    INT_CONST       reduce using rule 73 (expression_statement -> expression_opt SEMI .)
    FLOAT_CONST     reduce using rule 73 (expression_statement -> expression_opt SEMI .)
    CHAR_CONST      reduce using rule 73 (expression_statement -> expression_opt SEMI .)
    STRING          reduce using rule 73 (expression_statement -> expression_opt SEMI .)
    SEMI            reduce using rule 73 (expression_statement -> expression_opt SEMI .)
    RBRACE          reduce using rule 73 (expression_statement -> expression_opt SEMI .)
    ELSE            reduce using rule 73 (expression_statement -> expression_opt SEMI .)


state 149

    (57) selection_statement -> IF LPAREN . expression RPAREN statement
    (58) selection_statement -> IF LPAREN . expression RPAREN statement ELSE statement
    (89) expression -> . assignment_expression
    (90) expression -> . expression COMMA assignment_expression
    (98) assignment_expression -> . binary_expression
    (99) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (110) binary_expression -> . cast_expression
    (111) binary_expression -> . binary_expression TIMES binary_expression
    (112) binary_expression -> . binary_expression DIVIDE binary_expression
    (113) binary_expression -> . binary_expression MOD binary_expression
    (114) binary_expression -> . binary_expression PLUS binary_expression
    (115) binary_expression -> . binary_expression MINUS binary_expression
    (116) binary_expression -> . binary_expression LT binary_expression
    (117) binary_expression -> . binary_expression LE binary_expression
    (118) binary_expression -> . binary_expression HT binary_expression
    (119) binary_expression -> . binary_expression HE binary_expression
    (120) binary_expression -> . binary_expression EQUALS binary_expression
    (121) binary_expression -> . binary_expression DIFF binary_expression
    (122) binary_expression -> . binary_expression AND binary_expression
    (123) binary_expression -> . binary_expression OR binary_expression
    (106) unary_expression -> . postfix_expression
    (107) unary_expression -> . PLUSPLUS unary_expression
    (108) unary_expression -> . MINUSMINUS unary_expression
    (109) unary_expression -> . unary_operator cast_expression
    (33) cast_expression -> . unary_expression
    (34) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (28) postfix_expression -> . primary_expression
    (29) postfix_expression -> . postfix_expression PLUSPLUS
    (30) postfix_expression -> . postfix_expression MINUSMINUS
    (31) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (32) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (36) unary_operator -> . ADDRESS
    (37) unary_operator -> . TIMES
    (38) unary_operator -> . PLUS
    (39) unary_operator -> . MINUS
    (40) unary_operator -> . NOT
    (92) primary_expression -> . identifier
    (93) primary_expression -> . constant
    (94) primary_expression -> . string_literal
    (95) primary_expression -> . LPAREN expression RPAREN
    (35) identifier -> . ID
    (48) constant -> . INT_CONST
    (49) constant -> . FLOAT_CONST
    (50) constant -> . CHAR_CONST
    (91) string_literal -> . STRING

    PLUSPLUS        shift and go to state 61
    MINUSMINUS      shift and go to state 62
    LPAREN          shift and go to state 59
    ADDRESS         shift and go to state 65
    TIMES           shift and go to state 55
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    NOT             shift and go to state 66
    ID              shift and go to state 18
    INT_CONST       shift and go to state 70
    FLOAT_CONST     shift and go to state 71
    CHAR_CONST      shift and go to state 72
    STRING          shift and go to state 73

    expression                     shift and go to state 183
    assignment_expression          shift and go to state 106
    binary_expression              shift and go to state 79
    unary_expression               shift and go to state 80
    cast_expression                shift and go to state 54
    postfix_expression             shift and go to state 60
    unary_operator                 shift and go to state 63
    primary_expression             shift and go to state 64
    identifier                     shift and go to state 67
    constant                       shift and go to state 68
    string_literal                 shift and go to state 69

state 150

    (90) expression -> expression COMMA . assignment_expression
    (98) assignment_expression -> . binary_expression
    (99) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (110) binary_expression -> . cast_expression
    (111) binary_expression -> . binary_expression TIMES binary_expression
    (112) binary_expression -> . binary_expression DIVIDE binary_expression
    (113) binary_expression -> . binary_expression MOD binary_expression
    (114) binary_expression -> . binary_expression PLUS binary_expression
    (115) binary_expression -> . binary_expression MINUS binary_expression
    (116) binary_expression -> . binary_expression LT binary_expression
    (117) binary_expression -> . binary_expression LE binary_expression
    (118) binary_expression -> . binary_expression HT binary_expression
    (119) binary_expression -> . binary_expression HE binary_expression
    (120) binary_expression -> . binary_expression EQUALS binary_expression
    (121) binary_expression -> . binary_expression DIFF binary_expression
    (122) binary_expression -> . binary_expression AND binary_expression
    (123) binary_expression -> . binary_expression OR binary_expression
    (106) unary_expression -> . postfix_expression
    (107) unary_expression -> . PLUSPLUS unary_expression
    (108) unary_expression -> . MINUSMINUS unary_expression
    (109) unary_expression -> . unary_operator cast_expression
    (33) cast_expression -> . unary_expression
    (34) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (28) postfix_expression -> . primary_expression
    (29) postfix_expression -> . postfix_expression PLUSPLUS
    (30) postfix_expression -> . postfix_expression MINUSMINUS
    (31) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (32) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (36) unary_operator -> . ADDRESS
    (37) unary_operator -> . TIMES
    (38) unary_operator -> . PLUS
    (39) unary_operator -> . MINUS
    (40) unary_operator -> . NOT
    (92) primary_expression -> . identifier
    (93) primary_expression -> . constant
    (94) primary_expression -> . string_literal
    (95) primary_expression -> . LPAREN expression RPAREN
    (35) identifier -> . ID
    (48) constant -> . INT_CONST
    (49) constant -> . FLOAT_CONST
    (50) constant -> . CHAR_CONST
    (91) string_literal -> . STRING

    PLUSPLUS        shift and go to state 61
    MINUSMINUS      shift and go to state 62
    LPAREN          shift and go to state 59
    ADDRESS         shift and go to state 65
    TIMES           shift and go to state 55
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    NOT             shift and go to state 66
    ID              shift and go to state 18
    INT_CONST       shift and go to state 70
    FLOAT_CONST     shift and go to state 71
    CHAR_CONST      shift and go to state 72
    STRING          shift and go to state 73

    assignment_expression          shift and go to state 184
    binary_expression              shift and go to state 79
    unary_expression               shift and go to state 80
    cast_expression                shift and go to state 54
    postfix_expression             shift and go to state 60
    unary_operator                 shift and go to state 63
    primary_expression             shift and go to state 64
    identifier                     shift and go to state 67
    constant                       shift and go to state 68
    string_literal                 shift and go to state 69

state 151

    (83) jump_statement -> BREAK SEMI .

    IF              reduce using rule 83 (jump_statement -> BREAK SEMI .)
    BREAK           reduce using rule 83 (jump_statement -> BREAK SEMI .)
    RETURN          reduce using rule 83 (jump_statement -> BREAK SEMI .)
    PRINT           reduce using rule 83 (jump_statement -> BREAK SEMI .)
    ASSERT          reduce using rule 83 (jump_statement -> BREAK SEMI .)
    READ            reduce using rule 83 (jump_statement -> BREAK SEMI .)
    WHILE           reduce using rule 83 (jump_statement -> BREAK SEMI .)
    FOR             reduce using rule 83 (jump_statement -> BREAK SEMI .)
    LBRACE          reduce using rule 83 (jump_statement -> BREAK SEMI .)
    VOID            reduce using rule 83 (jump_statement -> BREAK SEMI .)
    INT             reduce using rule 83 (jump_statement -> BREAK SEMI .)
    FLOAT           reduce using rule 83 (jump_statement -> BREAK SEMI .)
    CHAR            reduce using rule 83 (jump_statement -> BREAK SEMI .)
    PLUSPLUS        reduce using rule 83 (jump_statement -> BREAK SEMI .)
    MINUSMINUS      reduce using rule 83 (jump_statement -> BREAK SEMI .)
    LPAREN          reduce using rule 83 (jump_statement -> BREAK SEMI .)
    ADDRESS         reduce using rule 83 (jump_statement -> BREAK SEMI .)
    TIMES           reduce using rule 83 (jump_statement -> BREAK SEMI .)
    PLUS            reduce using rule 83 (jump_statement -> BREAK SEMI .)
    MINUS           reduce using rule 83 (jump_statement -> BREAK SEMI .)
    NOT             reduce using rule 83 (jump_statement -> BREAK SEMI .)
    ID              reduce using rule 83 (jump_statement -> BREAK SEMI .)
    INT_CONST       reduce using rule 83 (jump_statement -> BREAK SEMI .)
    FLOAT_CONST     reduce using rule 83 (jump_statement -> BREAK SEMI .)
    CHAR_CONST      reduce using rule 83 (jump_statement -> BREAK SEMI .)
    STRING          reduce using rule 83 (jump_statement -> BREAK SEMI .)
    SEMI            reduce using rule 83 (jump_statement -> BREAK SEMI .)
    RBRACE          reduce using rule 83 (jump_statement -> BREAK SEMI .)
    ELSE            reduce using rule 83 (jump_statement -> BREAK SEMI .)


state 152

    (84) jump_statement -> RETURN expression . SEMI
    (90) expression -> expression . COMMA assignment_expression

    SEMI            shift and go to state 185
    COMMA           shift and go to state 150


state 153

    (85) jump_statement -> RETURN SEMI .

    IF              reduce using rule 85 (jump_statement -> RETURN SEMI .)
    BREAK           reduce using rule 85 (jump_statement -> RETURN SEMI .)
    RETURN          reduce using rule 85 (jump_statement -> RETURN SEMI .)
    PRINT           reduce using rule 85 (jump_statement -> RETURN SEMI .)
    ASSERT          reduce using rule 85 (jump_statement -> RETURN SEMI .)
    READ            reduce using rule 85 (jump_statement -> RETURN SEMI .)
    WHILE           reduce using rule 85 (jump_statement -> RETURN SEMI .)
    FOR             reduce using rule 85 (jump_statement -> RETURN SEMI .)
    LBRACE          reduce using rule 85 (jump_statement -> RETURN SEMI .)
    VOID            reduce using rule 85 (jump_statement -> RETURN SEMI .)
    INT             reduce using rule 85 (jump_statement -> RETURN SEMI .)
    FLOAT           reduce using rule 85 (jump_statement -> RETURN SEMI .)
    CHAR            reduce using rule 85 (jump_statement -> RETURN SEMI .)
    PLUSPLUS        reduce using rule 85 (jump_statement -> RETURN SEMI .)
    MINUSMINUS      reduce using rule 85 (jump_statement -> RETURN SEMI .)
    LPAREN          reduce using rule 85 (jump_statement -> RETURN SEMI .)
    ADDRESS         reduce using rule 85 (jump_statement -> RETURN SEMI .)
    TIMES           reduce using rule 85 (jump_statement -> RETURN SEMI .)
    PLUS            reduce using rule 85 (jump_statement -> RETURN SEMI .)
    MINUS           reduce using rule 85 (jump_statement -> RETURN SEMI .)
    NOT             reduce using rule 85 (jump_statement -> RETURN SEMI .)
    ID              reduce using rule 85 (jump_statement -> RETURN SEMI .)
    INT_CONST       reduce using rule 85 (jump_statement -> RETURN SEMI .)
    FLOAT_CONST     reduce using rule 85 (jump_statement -> RETURN SEMI .)
    CHAR_CONST      reduce using rule 85 (jump_statement -> RETURN SEMI .)
    STRING          reduce using rule 85 (jump_statement -> RETURN SEMI .)
    SEMI            reduce using rule 85 (jump_statement -> RETURN SEMI .)
    RBRACE          reduce using rule 85 (jump_statement -> RETURN SEMI .)
    ELSE            reduce using rule 85 (jump_statement -> RETURN SEMI .)


state 154

    (71) print_statement -> PRINT LPAREN . expression_opt RPAREN SEMI
    (96) expression_opt -> . expression
    (97) expression_opt -> . empty
    (89) expression -> . assignment_expression
    (90) expression -> . expression COMMA assignment_expression
    (124) empty -> .
    (98) assignment_expression -> . binary_expression
    (99) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (110) binary_expression -> . cast_expression
    (111) binary_expression -> . binary_expression TIMES binary_expression
    (112) binary_expression -> . binary_expression DIVIDE binary_expression
    (113) binary_expression -> . binary_expression MOD binary_expression
    (114) binary_expression -> . binary_expression PLUS binary_expression
    (115) binary_expression -> . binary_expression MINUS binary_expression
    (116) binary_expression -> . binary_expression LT binary_expression
    (117) binary_expression -> . binary_expression LE binary_expression
    (118) binary_expression -> . binary_expression HT binary_expression
    (119) binary_expression -> . binary_expression HE binary_expression
    (120) binary_expression -> . binary_expression EQUALS binary_expression
    (121) binary_expression -> . binary_expression DIFF binary_expression
    (122) binary_expression -> . binary_expression AND binary_expression
    (123) binary_expression -> . binary_expression OR binary_expression
    (106) unary_expression -> . postfix_expression
    (107) unary_expression -> . PLUSPLUS unary_expression
    (108) unary_expression -> . MINUSMINUS unary_expression
    (109) unary_expression -> . unary_operator cast_expression
    (33) cast_expression -> . unary_expression
    (34) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (28) postfix_expression -> . primary_expression
    (29) postfix_expression -> . postfix_expression PLUSPLUS
    (30) postfix_expression -> . postfix_expression MINUSMINUS
    (31) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (32) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (36) unary_operator -> . ADDRESS
    (37) unary_operator -> . TIMES
    (38) unary_operator -> . PLUS
    (39) unary_operator -> . MINUS
    (40) unary_operator -> . NOT
    (92) primary_expression -> . identifier
    (93) primary_expression -> . constant
    (94) primary_expression -> . string_literal
    (95) primary_expression -> . LPAREN expression RPAREN
    (35) identifier -> . ID
    (48) constant -> . INT_CONST
    (49) constant -> . FLOAT_CONST
    (50) constant -> . CHAR_CONST
    (91) string_literal -> . STRING

    RPAREN          reduce using rule 124 (empty -> .)
    PLUSPLUS        shift and go to state 61
    MINUSMINUS      shift and go to state 62
    LPAREN          shift and go to state 59
    ADDRESS         shift and go to state 65
    TIMES           shift and go to state 55
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    NOT             shift and go to state 66
    ID              shift and go to state 18
    INT_CONST       shift and go to state 70
    FLOAT_CONST     shift and go to state 71
    CHAR_CONST      shift and go to state 72
    STRING          shift and go to state 73

    expression_opt                 shift and go to state 186
    expression                     shift and go to state 98
    empty                          shift and go to state 147
    assignment_expression          shift and go to state 106
    binary_expression              shift and go to state 79
    unary_expression               shift and go to state 80
    cast_expression                shift and go to state 54
    postfix_expression             shift and go to state 60
    unary_operator                 shift and go to state 63
    primary_expression             shift and go to state 64
    identifier                     shift and go to state 67
    constant                       shift and go to state 68
    string_literal                 shift and go to state 69

state 155

    (70) assert_statement -> ASSERT expression . SEMI
    (90) expression -> expression . COMMA assignment_expression

    SEMI            shift and go to state 187
    COMMA           shift and go to state 150


state 156

    (72) read_statement -> READ LPAREN . argument_expression_list RPAREN SEMI
    (64) argument_expression_list -> . assignment_expression
    (65) argument_expression_list -> . argument_expression_list COMMA assignment_expression
    (98) assignment_expression -> . binary_expression
    (99) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (110) binary_expression -> . cast_expression
    (111) binary_expression -> . binary_expression TIMES binary_expression
    (112) binary_expression -> . binary_expression DIVIDE binary_expression
    (113) binary_expression -> . binary_expression MOD binary_expression
    (114) binary_expression -> . binary_expression PLUS binary_expression
    (115) binary_expression -> . binary_expression MINUS binary_expression
    (116) binary_expression -> . binary_expression LT binary_expression
    (117) binary_expression -> . binary_expression LE binary_expression
    (118) binary_expression -> . binary_expression HT binary_expression
    (119) binary_expression -> . binary_expression HE binary_expression
    (120) binary_expression -> . binary_expression EQUALS binary_expression
    (121) binary_expression -> . binary_expression DIFF binary_expression
    (122) binary_expression -> . binary_expression AND binary_expression
    (123) binary_expression -> . binary_expression OR binary_expression
    (106) unary_expression -> . postfix_expression
    (107) unary_expression -> . PLUSPLUS unary_expression
    (108) unary_expression -> . MINUSMINUS unary_expression
    (109) unary_expression -> . unary_operator cast_expression
    (33) cast_expression -> . unary_expression
    (34) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (28) postfix_expression -> . primary_expression
    (29) postfix_expression -> . postfix_expression PLUSPLUS
    (30) postfix_expression -> . postfix_expression MINUSMINUS
    (31) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (32) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (36) unary_operator -> . ADDRESS
    (37) unary_operator -> . TIMES
    (38) unary_operator -> . PLUS
    (39) unary_operator -> . MINUS
    (40) unary_operator -> . NOT
    (92) primary_expression -> . identifier
    (93) primary_expression -> . constant
    (94) primary_expression -> . string_literal
    (95) primary_expression -> . LPAREN expression RPAREN
    (35) identifier -> . ID
    (48) constant -> . INT_CONST
    (49) constant -> . FLOAT_CONST
    (50) constant -> . CHAR_CONST
    (91) string_literal -> . STRING

    PLUSPLUS        shift and go to state 61
    MINUSMINUS      shift and go to state 62
    LPAREN          shift and go to state 59
    ADDRESS         shift and go to state 65
    TIMES           shift and go to state 55
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    NOT             shift and go to state 66
    ID              shift and go to state 18
    INT_CONST       shift and go to state 70
    FLOAT_CONST     shift and go to state 71
    CHAR_CONST      shift and go to state 72
    STRING          shift and go to state 73

    argument_expression_list       shift and go to state 188
    assignment_expression          shift and go to state 179
    binary_expression              shift and go to state 79
    unary_expression               shift and go to state 80
    cast_expression                shift and go to state 54
    postfix_expression             shift and go to state 60
    unary_operator                 shift and go to state 63
    primary_expression             shift and go to state 64
    identifier                     shift and go to state 67
    constant                       shift and go to state 68
    string_literal                 shift and go to state 69

state 157

    (59) iteration_statement -> WHILE LPAREN . expression RPAREN statement
    (89) expression -> . assignment_expression
    (90) expression -> . expression COMMA assignment_expression
    (98) assignment_expression -> . binary_expression
    (99) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (110) binary_expression -> . cast_expression
    (111) binary_expression -> . binary_expression TIMES binary_expression
    (112) binary_expression -> . binary_expression DIVIDE binary_expression
    (113) binary_expression -> . binary_expression MOD binary_expression
    (114) binary_expression -> . binary_expression PLUS binary_expression
    (115) binary_expression -> . binary_expression MINUS binary_expression
    (116) binary_expression -> . binary_expression LT binary_expression
    (117) binary_expression -> . binary_expression LE binary_expression
    (118) binary_expression -> . binary_expression HT binary_expression
    (119) binary_expression -> . binary_expression HE binary_expression
    (120) binary_expression -> . binary_expression EQUALS binary_expression
    (121) binary_expression -> . binary_expression DIFF binary_expression
    (122) binary_expression -> . binary_expression AND binary_expression
    (123) binary_expression -> . binary_expression OR binary_expression
    (106) unary_expression -> . postfix_expression
    (107) unary_expression -> . PLUSPLUS unary_expression
    (108) unary_expression -> . MINUSMINUS unary_expression
    (109) unary_expression -> . unary_operator cast_expression
    (33) cast_expression -> . unary_expression
    (34) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (28) postfix_expression -> . primary_expression
    (29) postfix_expression -> . postfix_expression PLUSPLUS
    (30) postfix_expression -> . postfix_expression MINUSMINUS
    (31) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (32) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (36) unary_operator -> . ADDRESS
    (37) unary_operator -> . TIMES
    (38) unary_operator -> . PLUS
    (39) unary_operator -> . MINUS
    (40) unary_operator -> . NOT
    (92) primary_expression -> . identifier
    (93) primary_expression -> . constant
    (94) primary_expression -> . string_literal
    (95) primary_expression -> . LPAREN expression RPAREN
    (35) identifier -> . ID
    (48) constant -> . INT_CONST
    (49) constant -> . FLOAT_CONST
    (50) constant -> . CHAR_CONST
    (91) string_literal -> . STRING

    PLUSPLUS        shift and go to state 61
    MINUSMINUS      shift and go to state 62
    LPAREN          shift and go to state 59
    ADDRESS         shift and go to state 65
    TIMES           shift and go to state 55
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    NOT             shift and go to state 66
    ID              shift and go to state 18
    INT_CONST       shift and go to state 70
    FLOAT_CONST     shift and go to state 71
    CHAR_CONST      shift and go to state 72
    STRING          shift and go to state 73

    expression                     shift and go to state 189
    assignment_expression          shift and go to state 106
    binary_expression              shift and go to state 79
    unary_expression               shift and go to state 80
    cast_expression                shift and go to state 54
    postfix_expression             shift and go to state 60
    unary_operator                 shift and go to state 63
    primary_expression             shift and go to state 64
    identifier                     shift and go to state 67
    constant                       shift and go to state 68
    string_literal                 shift and go to state 69

state 158

    (60) iteration_statement -> FOR LPAREN . expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (61) iteration_statement -> FOR LPAREN . declaration expression_opt SEMI expression_opt RPAREN statement
    (96) expression_opt -> . expression
    (97) expression_opt -> . empty
    (6) declaration -> . decl_body SEMI
    (89) expression -> . assignment_expression
    (90) expression -> . expression COMMA assignment_expression
    (124) empty -> .
    (11) decl_body -> . type_specifier init_declarator_list_opt
    (98) assignment_expression -> . binary_expression
    (99) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (41) type_specifier -> . VOID
    (42) type_specifier -> . INT
    (43) type_specifier -> . FLOAT
    (44) type_specifier -> . CHAR
    (110) binary_expression -> . cast_expression
    (111) binary_expression -> . binary_expression TIMES binary_expression
    (112) binary_expression -> . binary_expression DIVIDE binary_expression
    (113) binary_expression -> . binary_expression MOD binary_expression
    (114) binary_expression -> . binary_expression PLUS binary_expression
    (115) binary_expression -> . binary_expression MINUS binary_expression
    (116) binary_expression -> . binary_expression LT binary_expression
    (117) binary_expression -> . binary_expression LE binary_expression
    (118) binary_expression -> . binary_expression HT binary_expression
    (119) binary_expression -> . binary_expression HE binary_expression
    (120) binary_expression -> . binary_expression EQUALS binary_expression
    (121) binary_expression -> . binary_expression DIFF binary_expression
    (122) binary_expression -> . binary_expression AND binary_expression
    (123) binary_expression -> . binary_expression OR binary_expression
    (106) unary_expression -> . postfix_expression
    (107) unary_expression -> . PLUSPLUS unary_expression
    (108) unary_expression -> . MINUSMINUS unary_expression
    (109) unary_expression -> . unary_operator cast_expression
    (33) cast_expression -> . unary_expression
    (34) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (28) postfix_expression -> . primary_expression
    (29) postfix_expression -> . postfix_expression PLUSPLUS
    (30) postfix_expression -> . postfix_expression MINUSMINUS
    (31) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (32) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (36) unary_operator -> . ADDRESS
    (37) unary_operator -> . TIMES
    (38) unary_operator -> . PLUS
    (39) unary_operator -> . MINUS
    (40) unary_operator -> . NOT
    (92) primary_expression -> . identifier
    (93) primary_expression -> . constant
    (94) primary_expression -> . string_literal
    (95) primary_expression -> . LPAREN expression RPAREN
    (35) identifier -> . ID
    (48) constant -> . INT_CONST
    (49) constant -> . FLOAT_CONST
    (50) constant -> . CHAR_CONST
    (91) string_literal -> . STRING

    SEMI            reduce using rule 124 (empty -> .)
    VOID            shift and go to state 9
    INT             shift and go to state 10
    FLOAT           shift and go to state 11
    CHAR            shift and go to state 12
    PLUSPLUS        shift and go to state 61
    MINUSMINUS      shift and go to state 62
    LPAREN          shift and go to state 59
    ADDRESS         shift and go to state 65
    TIMES           shift and go to state 55
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    NOT             shift and go to state 66
    ID              shift and go to state 18
    INT_CONST       shift and go to state 70
    FLOAT_CONST     shift and go to state 71
    CHAR_CONST      shift and go to state 72
    STRING          shift and go to state 73

    expression_opt                 shift and go to state 190
    declaration                    shift and go to state 191
    expression                     shift and go to state 98
    empty                          shift and go to state 147
    decl_body                      shift and go to state 8
    assignment_expression          shift and go to state 106
    type_specifier                 shift and go to state 29
    binary_expression              shift and go to state 79
    unary_expression               shift and go to state 80
    cast_expression                shift and go to state 54
    postfix_expression             shift and go to state 60
    unary_operator                 shift and go to state 63
    primary_expression             shift and go to state 64
    identifier                     shift and go to state 67
    constant                       shift and go to state 68
    string_literal                 shift and go to state 69

state 159

    (126) parameter_list -> parameter_list COMMA parameter_declaration .

    RPAREN          reduce using rule 126 (parameter_list -> parameter_list COMMA parameter_declaration .)
    COMMA           reduce using rule 126 (parameter_list -> parameter_list COMMA parameter_declaration .)


state 160

    (111) binary_expression -> binary_expression TIMES binary_expression .
    (111) binary_expression -> binary_expression . TIMES binary_expression
    (112) binary_expression -> binary_expression . DIVIDE binary_expression
    (113) binary_expression -> binary_expression . MOD binary_expression
    (114) binary_expression -> binary_expression . PLUS binary_expression
    (115) binary_expression -> binary_expression . MINUS binary_expression
    (116) binary_expression -> binary_expression . LT binary_expression
    (117) binary_expression -> binary_expression . LE binary_expression
    (118) binary_expression -> binary_expression . HT binary_expression
    (119) binary_expression -> binary_expression . HE binary_expression
    (120) binary_expression -> binary_expression . EQUALS binary_expression
    (121) binary_expression -> binary_expression . DIFF binary_expression
    (122) binary_expression -> binary_expression . AND binary_expression
    (123) binary_expression -> binary_expression . OR binary_expression

    TIMES           reduce using rule 111 (binary_expression -> binary_expression TIMES binary_expression .)
    DIVIDE          reduce using rule 111 (binary_expression -> binary_expression TIMES binary_expression .)
    MOD             reduce using rule 111 (binary_expression -> binary_expression TIMES binary_expression .)
    PLUS            reduce using rule 111 (binary_expression -> binary_expression TIMES binary_expression .)
    MINUS           reduce using rule 111 (binary_expression -> binary_expression TIMES binary_expression .)
    LT              reduce using rule 111 (binary_expression -> binary_expression TIMES binary_expression .)
    LE              reduce using rule 111 (binary_expression -> binary_expression TIMES binary_expression .)
    HT              reduce using rule 111 (binary_expression -> binary_expression TIMES binary_expression .)
    HE              reduce using rule 111 (binary_expression -> binary_expression TIMES binary_expression .)
    EQUALS          reduce using rule 111 (binary_expression -> binary_expression TIMES binary_expression .)
    DIFF            reduce using rule 111 (binary_expression -> binary_expression TIMES binary_expression .)
    AND             reduce using rule 111 (binary_expression -> binary_expression TIMES binary_expression .)
    OR              reduce using rule 111 (binary_expression -> binary_expression TIMES binary_expression .)
    RBRACKET        reduce using rule 111 (binary_expression -> binary_expression TIMES binary_expression .)
    COMMA           reduce using rule 111 (binary_expression -> binary_expression TIMES binary_expression .)
    SEMI            reduce using rule 111 (binary_expression -> binary_expression TIMES binary_expression .)
    RPAREN          reduce using rule 111 (binary_expression -> binary_expression TIMES binary_expression .)
    RBRACE          reduce using rule 111 (binary_expression -> binary_expression TIMES binary_expression .)

  ! TIMES           [ shift and go to state 113 ]
  ! DIVIDE          [ shift and go to state 114 ]
  ! MOD             [ shift and go to state 115 ]
  ! PLUS            [ shift and go to state 116 ]
  ! MINUS           [ shift and go to state 117 ]
  ! LT              [ shift and go to state 118 ]
  ! LE              [ shift and go to state 119 ]
  ! HT              [ shift and go to state 120 ]
  ! HE              [ shift and go to state 121 ]
  ! EQUALS          [ shift and go to state 122 ]
  ! DIFF            [ shift and go to state 123 ]
  ! AND             [ shift and go to state 124 ]
  ! OR              [ shift and go to state 125 ]


state 161

    (112) binary_expression -> binary_expression DIVIDE binary_expression .
    (111) binary_expression -> binary_expression . TIMES binary_expression
    (112) binary_expression -> binary_expression . DIVIDE binary_expression
    (113) binary_expression -> binary_expression . MOD binary_expression
    (114) binary_expression -> binary_expression . PLUS binary_expression
    (115) binary_expression -> binary_expression . MINUS binary_expression
    (116) binary_expression -> binary_expression . LT binary_expression
    (117) binary_expression -> binary_expression . LE binary_expression
    (118) binary_expression -> binary_expression . HT binary_expression
    (119) binary_expression -> binary_expression . HE binary_expression
    (120) binary_expression -> binary_expression . EQUALS binary_expression
    (121) binary_expression -> binary_expression . DIFF binary_expression
    (122) binary_expression -> binary_expression . AND binary_expression
    (123) binary_expression -> binary_expression . OR binary_expression

    TIMES           reduce using rule 112 (binary_expression -> binary_expression DIVIDE binary_expression .)
    DIVIDE          reduce using rule 112 (binary_expression -> binary_expression DIVIDE binary_expression .)
    MOD             reduce using rule 112 (binary_expression -> binary_expression DIVIDE binary_expression .)
    PLUS            reduce using rule 112 (binary_expression -> binary_expression DIVIDE binary_expression .)
    MINUS           reduce using rule 112 (binary_expression -> binary_expression DIVIDE binary_expression .)
    LT              reduce using rule 112 (binary_expression -> binary_expression DIVIDE binary_expression .)
    LE              reduce using rule 112 (binary_expression -> binary_expression DIVIDE binary_expression .)
    HT              reduce using rule 112 (binary_expression -> binary_expression DIVIDE binary_expression .)
    HE              reduce using rule 112 (binary_expression -> binary_expression DIVIDE binary_expression .)
    EQUALS          reduce using rule 112 (binary_expression -> binary_expression DIVIDE binary_expression .)
    DIFF            reduce using rule 112 (binary_expression -> binary_expression DIVIDE binary_expression .)
    AND             reduce using rule 112 (binary_expression -> binary_expression DIVIDE binary_expression .)
    OR              reduce using rule 112 (binary_expression -> binary_expression DIVIDE binary_expression .)
    RBRACKET        reduce using rule 112 (binary_expression -> binary_expression DIVIDE binary_expression .)
    COMMA           reduce using rule 112 (binary_expression -> binary_expression DIVIDE binary_expression .)
    SEMI            reduce using rule 112 (binary_expression -> binary_expression DIVIDE binary_expression .)
    RPAREN          reduce using rule 112 (binary_expression -> binary_expression DIVIDE binary_expression .)
    RBRACE          reduce using rule 112 (binary_expression -> binary_expression DIVIDE binary_expression .)

  ! TIMES           [ shift and go to state 113 ]
  ! DIVIDE          [ shift and go to state 114 ]
  ! MOD             [ shift and go to state 115 ]
  ! PLUS            [ shift and go to state 116 ]
  ! MINUS           [ shift and go to state 117 ]
  ! LT              [ shift and go to state 118 ]
  ! LE              [ shift and go to state 119 ]
  ! HT              [ shift and go to state 120 ]
  ! HE              [ shift and go to state 121 ]
  ! EQUALS          [ shift and go to state 122 ]
  ! DIFF            [ shift and go to state 123 ]
  ! AND             [ shift and go to state 124 ]
  ! OR              [ shift and go to state 125 ]


state 162

    (113) binary_expression -> binary_expression MOD binary_expression .
    (111) binary_expression -> binary_expression . TIMES binary_expression
    (112) binary_expression -> binary_expression . DIVIDE binary_expression
    (113) binary_expression -> binary_expression . MOD binary_expression
    (114) binary_expression -> binary_expression . PLUS binary_expression
    (115) binary_expression -> binary_expression . MINUS binary_expression
    (116) binary_expression -> binary_expression . LT binary_expression
    (117) binary_expression -> binary_expression . LE binary_expression
    (118) binary_expression -> binary_expression . HT binary_expression
    (119) binary_expression -> binary_expression . HE binary_expression
    (120) binary_expression -> binary_expression . EQUALS binary_expression
    (121) binary_expression -> binary_expression . DIFF binary_expression
    (122) binary_expression -> binary_expression . AND binary_expression
    (123) binary_expression -> binary_expression . OR binary_expression

    TIMES           reduce using rule 113 (binary_expression -> binary_expression MOD binary_expression .)
    DIVIDE          reduce using rule 113 (binary_expression -> binary_expression MOD binary_expression .)
    MOD             reduce using rule 113 (binary_expression -> binary_expression MOD binary_expression .)
    PLUS            reduce using rule 113 (binary_expression -> binary_expression MOD binary_expression .)
    MINUS           reduce using rule 113 (binary_expression -> binary_expression MOD binary_expression .)
    LT              reduce using rule 113 (binary_expression -> binary_expression MOD binary_expression .)
    LE              reduce using rule 113 (binary_expression -> binary_expression MOD binary_expression .)
    HT              reduce using rule 113 (binary_expression -> binary_expression MOD binary_expression .)
    HE              reduce using rule 113 (binary_expression -> binary_expression MOD binary_expression .)
    EQUALS          reduce using rule 113 (binary_expression -> binary_expression MOD binary_expression .)
    DIFF            reduce using rule 113 (binary_expression -> binary_expression MOD binary_expression .)
    AND             reduce using rule 113 (binary_expression -> binary_expression MOD binary_expression .)
    OR              reduce using rule 113 (binary_expression -> binary_expression MOD binary_expression .)
    RBRACKET        reduce using rule 113 (binary_expression -> binary_expression MOD binary_expression .)
    COMMA           reduce using rule 113 (binary_expression -> binary_expression MOD binary_expression .)
    SEMI            reduce using rule 113 (binary_expression -> binary_expression MOD binary_expression .)
    RPAREN          reduce using rule 113 (binary_expression -> binary_expression MOD binary_expression .)
    RBRACE          reduce using rule 113 (binary_expression -> binary_expression MOD binary_expression .)

  ! TIMES           [ shift and go to state 113 ]
  ! DIVIDE          [ shift and go to state 114 ]
  ! MOD             [ shift and go to state 115 ]
  ! PLUS            [ shift and go to state 116 ]
  ! MINUS           [ shift and go to state 117 ]
  ! LT              [ shift and go to state 118 ]
  ! LE              [ shift and go to state 119 ]
  ! HT              [ shift and go to state 120 ]
  ! HE              [ shift and go to state 121 ]
  ! EQUALS          [ shift and go to state 122 ]
  ! DIFF            [ shift and go to state 123 ]
  ! AND             [ shift and go to state 124 ]
  ! OR              [ shift and go to state 125 ]


state 163

    (114) binary_expression -> binary_expression PLUS binary_expression .
    (111) binary_expression -> binary_expression . TIMES binary_expression
    (112) binary_expression -> binary_expression . DIVIDE binary_expression
    (113) binary_expression -> binary_expression . MOD binary_expression
    (114) binary_expression -> binary_expression . PLUS binary_expression
    (115) binary_expression -> binary_expression . MINUS binary_expression
    (116) binary_expression -> binary_expression . LT binary_expression
    (117) binary_expression -> binary_expression . LE binary_expression
    (118) binary_expression -> binary_expression . HT binary_expression
    (119) binary_expression -> binary_expression . HE binary_expression
    (120) binary_expression -> binary_expression . EQUALS binary_expression
    (121) binary_expression -> binary_expression . DIFF binary_expression
    (122) binary_expression -> binary_expression . AND binary_expression
    (123) binary_expression -> binary_expression . OR binary_expression

    PLUS            reduce using rule 114 (binary_expression -> binary_expression PLUS binary_expression .)
    MINUS           reduce using rule 114 (binary_expression -> binary_expression PLUS binary_expression .)
    LT              reduce using rule 114 (binary_expression -> binary_expression PLUS binary_expression .)
    LE              reduce using rule 114 (binary_expression -> binary_expression PLUS binary_expression .)
    HT              reduce using rule 114 (binary_expression -> binary_expression PLUS binary_expression .)
    HE              reduce using rule 114 (binary_expression -> binary_expression PLUS binary_expression .)
    EQUALS          reduce using rule 114 (binary_expression -> binary_expression PLUS binary_expression .)
    DIFF            reduce using rule 114 (binary_expression -> binary_expression PLUS binary_expression .)
    AND             reduce using rule 114 (binary_expression -> binary_expression PLUS binary_expression .)
    OR              reduce using rule 114 (binary_expression -> binary_expression PLUS binary_expression .)
    RBRACKET        reduce using rule 114 (binary_expression -> binary_expression PLUS binary_expression .)
    COMMA           reduce using rule 114 (binary_expression -> binary_expression PLUS binary_expression .)
    SEMI            reduce using rule 114 (binary_expression -> binary_expression PLUS binary_expression .)
    RPAREN          reduce using rule 114 (binary_expression -> binary_expression PLUS binary_expression .)
    RBRACE          reduce using rule 114 (binary_expression -> binary_expression PLUS binary_expression .)
    TIMES           shift and go to state 113
    DIVIDE          shift and go to state 114
    MOD             shift and go to state 115

  ! TIMES           [ reduce using rule 114 (binary_expression -> binary_expression PLUS binary_expression .) ]
  ! DIVIDE          [ reduce using rule 114 (binary_expression -> binary_expression PLUS binary_expression .) ]
  ! MOD             [ reduce using rule 114 (binary_expression -> binary_expression PLUS binary_expression .) ]
  ! PLUS            [ shift and go to state 116 ]
  ! MINUS           [ shift and go to state 117 ]
  ! LT              [ shift and go to state 118 ]
  ! LE              [ shift and go to state 119 ]
  ! HT              [ shift and go to state 120 ]
  ! HE              [ shift and go to state 121 ]
  ! EQUALS          [ shift and go to state 122 ]
  ! DIFF            [ shift and go to state 123 ]
  ! AND             [ shift and go to state 124 ]
  ! OR              [ shift and go to state 125 ]


state 164

    (115) binary_expression -> binary_expression MINUS binary_expression .
    (111) binary_expression -> binary_expression . TIMES binary_expression
    (112) binary_expression -> binary_expression . DIVIDE binary_expression
    (113) binary_expression -> binary_expression . MOD binary_expression
    (114) binary_expression -> binary_expression . PLUS binary_expression
    (115) binary_expression -> binary_expression . MINUS binary_expression
    (116) binary_expression -> binary_expression . LT binary_expression
    (117) binary_expression -> binary_expression . LE binary_expression
    (118) binary_expression -> binary_expression . HT binary_expression
    (119) binary_expression -> binary_expression . HE binary_expression
    (120) binary_expression -> binary_expression . EQUALS binary_expression
    (121) binary_expression -> binary_expression . DIFF binary_expression
    (122) binary_expression -> binary_expression . AND binary_expression
    (123) binary_expression -> binary_expression . OR binary_expression

    PLUS            reduce using rule 115 (binary_expression -> binary_expression MINUS binary_expression .)
    MINUS           reduce using rule 115 (binary_expression -> binary_expression MINUS binary_expression .)
    LT              reduce using rule 115 (binary_expression -> binary_expression MINUS binary_expression .)
    LE              reduce using rule 115 (binary_expression -> binary_expression MINUS binary_expression .)
    HT              reduce using rule 115 (binary_expression -> binary_expression MINUS binary_expression .)
    HE              reduce using rule 115 (binary_expression -> binary_expression MINUS binary_expression .)
    EQUALS          reduce using rule 115 (binary_expression -> binary_expression MINUS binary_expression .)
    DIFF            reduce using rule 115 (binary_expression -> binary_expression MINUS binary_expression .)
    AND             reduce using rule 115 (binary_expression -> binary_expression MINUS binary_expression .)
    OR              reduce using rule 115 (binary_expression -> binary_expression MINUS binary_expression .)
    RBRACKET        reduce using rule 115 (binary_expression -> binary_expression MINUS binary_expression .)
    COMMA           reduce using rule 115 (binary_expression -> binary_expression MINUS binary_expression .)
    SEMI            reduce using rule 115 (binary_expression -> binary_expression MINUS binary_expression .)
    RPAREN          reduce using rule 115 (binary_expression -> binary_expression MINUS binary_expression .)
    RBRACE          reduce using rule 115 (binary_expression -> binary_expression MINUS binary_expression .)
    TIMES           shift and go to state 113
    DIVIDE          shift and go to state 114
    MOD             shift and go to state 115

  ! TIMES           [ reduce using rule 115 (binary_expression -> binary_expression MINUS binary_expression .) ]
  ! DIVIDE          [ reduce using rule 115 (binary_expression -> binary_expression MINUS binary_expression .) ]
  ! MOD             [ reduce using rule 115 (binary_expression -> binary_expression MINUS binary_expression .) ]
  ! PLUS            [ shift and go to state 116 ]
  ! MINUS           [ shift and go to state 117 ]
  ! LT              [ shift and go to state 118 ]
  ! LE              [ shift and go to state 119 ]
  ! HT              [ shift and go to state 120 ]
  ! HE              [ shift and go to state 121 ]
  ! EQUALS          [ shift and go to state 122 ]
  ! DIFF            [ shift and go to state 123 ]
  ! AND             [ shift and go to state 124 ]
  ! OR              [ shift and go to state 125 ]


state 165

    (116) binary_expression -> binary_expression LT binary_expression .
    (111) binary_expression -> binary_expression . TIMES binary_expression
    (112) binary_expression -> binary_expression . DIVIDE binary_expression
    (113) binary_expression -> binary_expression . MOD binary_expression
    (114) binary_expression -> binary_expression . PLUS binary_expression
    (115) binary_expression -> binary_expression . MINUS binary_expression
    (116) binary_expression -> binary_expression . LT binary_expression
    (117) binary_expression -> binary_expression . LE binary_expression
    (118) binary_expression -> binary_expression . HT binary_expression
    (119) binary_expression -> binary_expression . HE binary_expression
    (120) binary_expression -> binary_expression . EQUALS binary_expression
    (121) binary_expression -> binary_expression . DIFF binary_expression
    (122) binary_expression -> binary_expression . AND binary_expression
    (123) binary_expression -> binary_expression . OR binary_expression

    LT              reduce using rule 116 (binary_expression -> binary_expression LT binary_expression .)
    LE              reduce using rule 116 (binary_expression -> binary_expression LT binary_expression .)
    HT              reduce using rule 116 (binary_expression -> binary_expression LT binary_expression .)
    HE              reduce using rule 116 (binary_expression -> binary_expression LT binary_expression .)
    EQUALS          reduce using rule 116 (binary_expression -> binary_expression LT binary_expression .)
    DIFF            reduce using rule 116 (binary_expression -> binary_expression LT binary_expression .)
    AND             reduce using rule 116 (binary_expression -> binary_expression LT binary_expression .)
    OR              reduce using rule 116 (binary_expression -> binary_expression LT binary_expression .)
    RBRACKET        reduce using rule 116 (binary_expression -> binary_expression LT binary_expression .)
    COMMA           reduce using rule 116 (binary_expression -> binary_expression LT binary_expression .)
    SEMI            reduce using rule 116 (binary_expression -> binary_expression LT binary_expression .)
    RPAREN          reduce using rule 116 (binary_expression -> binary_expression LT binary_expression .)
    RBRACE          reduce using rule 116 (binary_expression -> binary_expression LT binary_expression .)
    TIMES           shift and go to state 113
    DIVIDE          shift and go to state 114
    MOD             shift and go to state 115
    PLUS            shift and go to state 116
    MINUS           shift and go to state 117

  ! TIMES           [ reduce using rule 116 (binary_expression -> binary_expression LT binary_expression .) ]
  ! DIVIDE          [ reduce using rule 116 (binary_expression -> binary_expression LT binary_expression .) ]
  ! MOD             [ reduce using rule 116 (binary_expression -> binary_expression LT binary_expression .) ]
  ! PLUS            [ reduce using rule 116 (binary_expression -> binary_expression LT binary_expression .) ]
  ! MINUS           [ reduce using rule 116 (binary_expression -> binary_expression LT binary_expression .) ]
  ! LT              [ shift and go to state 118 ]
  ! LE              [ shift and go to state 119 ]
  ! HT              [ shift and go to state 120 ]
  ! HE              [ shift and go to state 121 ]
  ! EQUALS          [ shift and go to state 122 ]
  ! DIFF            [ shift and go to state 123 ]
  ! AND             [ shift and go to state 124 ]
  ! OR              [ shift and go to state 125 ]


state 166

    (117) binary_expression -> binary_expression LE binary_expression .
    (111) binary_expression -> binary_expression . TIMES binary_expression
    (112) binary_expression -> binary_expression . DIVIDE binary_expression
    (113) binary_expression -> binary_expression . MOD binary_expression
    (114) binary_expression -> binary_expression . PLUS binary_expression
    (115) binary_expression -> binary_expression . MINUS binary_expression
    (116) binary_expression -> binary_expression . LT binary_expression
    (117) binary_expression -> binary_expression . LE binary_expression
    (118) binary_expression -> binary_expression . HT binary_expression
    (119) binary_expression -> binary_expression . HE binary_expression
    (120) binary_expression -> binary_expression . EQUALS binary_expression
    (121) binary_expression -> binary_expression . DIFF binary_expression
    (122) binary_expression -> binary_expression . AND binary_expression
    (123) binary_expression -> binary_expression . OR binary_expression

    LT              reduce using rule 117 (binary_expression -> binary_expression LE binary_expression .)
    LE              reduce using rule 117 (binary_expression -> binary_expression LE binary_expression .)
    HT              reduce using rule 117 (binary_expression -> binary_expression LE binary_expression .)
    HE              reduce using rule 117 (binary_expression -> binary_expression LE binary_expression .)
    EQUALS          reduce using rule 117 (binary_expression -> binary_expression LE binary_expression .)
    DIFF            reduce using rule 117 (binary_expression -> binary_expression LE binary_expression .)
    AND             reduce using rule 117 (binary_expression -> binary_expression LE binary_expression .)
    OR              reduce using rule 117 (binary_expression -> binary_expression LE binary_expression .)
    RBRACKET        reduce using rule 117 (binary_expression -> binary_expression LE binary_expression .)
    COMMA           reduce using rule 117 (binary_expression -> binary_expression LE binary_expression .)
    SEMI            reduce using rule 117 (binary_expression -> binary_expression LE binary_expression .)
    RPAREN          reduce using rule 117 (binary_expression -> binary_expression LE binary_expression .)
    RBRACE          reduce using rule 117 (binary_expression -> binary_expression LE binary_expression .)
    TIMES           shift and go to state 113
    DIVIDE          shift and go to state 114
    MOD             shift and go to state 115
    PLUS            shift and go to state 116
    MINUS           shift and go to state 117

  ! TIMES           [ reduce using rule 117 (binary_expression -> binary_expression LE binary_expression .) ]
  ! DIVIDE          [ reduce using rule 117 (binary_expression -> binary_expression LE binary_expression .) ]
  ! MOD             [ reduce using rule 117 (binary_expression -> binary_expression LE binary_expression .) ]
  ! PLUS            [ reduce using rule 117 (binary_expression -> binary_expression LE binary_expression .) ]
  ! MINUS           [ reduce using rule 117 (binary_expression -> binary_expression LE binary_expression .) ]
  ! LT              [ shift and go to state 118 ]
  ! LE              [ shift and go to state 119 ]
  ! HT              [ shift and go to state 120 ]
  ! HE              [ shift and go to state 121 ]
  ! EQUALS          [ shift and go to state 122 ]
  ! DIFF            [ shift and go to state 123 ]
  ! AND             [ shift and go to state 124 ]
  ! OR              [ shift and go to state 125 ]


state 167

    (118) binary_expression -> binary_expression HT binary_expression .
    (111) binary_expression -> binary_expression . TIMES binary_expression
    (112) binary_expression -> binary_expression . DIVIDE binary_expression
    (113) binary_expression -> binary_expression . MOD binary_expression
    (114) binary_expression -> binary_expression . PLUS binary_expression
    (115) binary_expression -> binary_expression . MINUS binary_expression
    (116) binary_expression -> binary_expression . LT binary_expression
    (117) binary_expression -> binary_expression . LE binary_expression
    (118) binary_expression -> binary_expression . HT binary_expression
    (119) binary_expression -> binary_expression . HE binary_expression
    (120) binary_expression -> binary_expression . EQUALS binary_expression
    (121) binary_expression -> binary_expression . DIFF binary_expression
    (122) binary_expression -> binary_expression . AND binary_expression
    (123) binary_expression -> binary_expression . OR binary_expression

    LT              reduce using rule 118 (binary_expression -> binary_expression HT binary_expression .)
    LE              reduce using rule 118 (binary_expression -> binary_expression HT binary_expression .)
    HT              reduce using rule 118 (binary_expression -> binary_expression HT binary_expression .)
    HE              reduce using rule 118 (binary_expression -> binary_expression HT binary_expression .)
    EQUALS          reduce using rule 118 (binary_expression -> binary_expression HT binary_expression .)
    DIFF            reduce using rule 118 (binary_expression -> binary_expression HT binary_expression .)
    AND             reduce using rule 118 (binary_expression -> binary_expression HT binary_expression .)
    OR              reduce using rule 118 (binary_expression -> binary_expression HT binary_expression .)
    RBRACKET        reduce using rule 118 (binary_expression -> binary_expression HT binary_expression .)
    COMMA           reduce using rule 118 (binary_expression -> binary_expression HT binary_expression .)
    SEMI            reduce using rule 118 (binary_expression -> binary_expression HT binary_expression .)
    RPAREN          reduce using rule 118 (binary_expression -> binary_expression HT binary_expression .)
    RBRACE          reduce using rule 118 (binary_expression -> binary_expression HT binary_expression .)
    TIMES           shift and go to state 113
    DIVIDE          shift and go to state 114
    MOD             shift and go to state 115
    PLUS            shift and go to state 116
    MINUS           shift and go to state 117

  ! TIMES           [ reduce using rule 118 (binary_expression -> binary_expression HT binary_expression .) ]
  ! DIVIDE          [ reduce using rule 118 (binary_expression -> binary_expression HT binary_expression .) ]
  ! MOD             [ reduce using rule 118 (binary_expression -> binary_expression HT binary_expression .) ]
  ! PLUS            [ reduce using rule 118 (binary_expression -> binary_expression HT binary_expression .) ]
  ! MINUS           [ reduce using rule 118 (binary_expression -> binary_expression HT binary_expression .) ]
  ! LT              [ shift and go to state 118 ]
  ! LE              [ shift and go to state 119 ]
  ! HT              [ shift and go to state 120 ]
  ! HE              [ shift and go to state 121 ]
  ! EQUALS          [ shift and go to state 122 ]
  ! DIFF            [ shift and go to state 123 ]
  ! AND             [ shift and go to state 124 ]
  ! OR              [ shift and go to state 125 ]


state 168

    (119) binary_expression -> binary_expression HE binary_expression .
    (111) binary_expression -> binary_expression . TIMES binary_expression
    (112) binary_expression -> binary_expression . DIVIDE binary_expression
    (113) binary_expression -> binary_expression . MOD binary_expression
    (114) binary_expression -> binary_expression . PLUS binary_expression
    (115) binary_expression -> binary_expression . MINUS binary_expression
    (116) binary_expression -> binary_expression . LT binary_expression
    (117) binary_expression -> binary_expression . LE binary_expression
    (118) binary_expression -> binary_expression . HT binary_expression
    (119) binary_expression -> binary_expression . HE binary_expression
    (120) binary_expression -> binary_expression . EQUALS binary_expression
    (121) binary_expression -> binary_expression . DIFF binary_expression
    (122) binary_expression -> binary_expression . AND binary_expression
    (123) binary_expression -> binary_expression . OR binary_expression

    LT              reduce using rule 119 (binary_expression -> binary_expression HE binary_expression .)
    LE              reduce using rule 119 (binary_expression -> binary_expression HE binary_expression .)
    HT              reduce using rule 119 (binary_expression -> binary_expression HE binary_expression .)
    HE              reduce using rule 119 (binary_expression -> binary_expression HE binary_expression .)
    EQUALS          reduce using rule 119 (binary_expression -> binary_expression HE binary_expression .)
    DIFF            reduce using rule 119 (binary_expression -> binary_expression HE binary_expression .)
    AND             reduce using rule 119 (binary_expression -> binary_expression HE binary_expression .)
    OR              reduce using rule 119 (binary_expression -> binary_expression HE binary_expression .)
    RBRACKET        reduce using rule 119 (binary_expression -> binary_expression HE binary_expression .)
    COMMA           reduce using rule 119 (binary_expression -> binary_expression HE binary_expression .)
    SEMI            reduce using rule 119 (binary_expression -> binary_expression HE binary_expression .)
    RPAREN          reduce using rule 119 (binary_expression -> binary_expression HE binary_expression .)
    RBRACE          reduce using rule 119 (binary_expression -> binary_expression HE binary_expression .)
    TIMES           shift and go to state 113
    DIVIDE          shift and go to state 114
    MOD             shift and go to state 115
    PLUS            shift and go to state 116
    MINUS           shift and go to state 117

  ! TIMES           [ reduce using rule 119 (binary_expression -> binary_expression HE binary_expression .) ]
  ! DIVIDE          [ reduce using rule 119 (binary_expression -> binary_expression HE binary_expression .) ]
  ! MOD             [ reduce using rule 119 (binary_expression -> binary_expression HE binary_expression .) ]
  ! PLUS            [ reduce using rule 119 (binary_expression -> binary_expression HE binary_expression .) ]
  ! MINUS           [ reduce using rule 119 (binary_expression -> binary_expression HE binary_expression .) ]
  ! LT              [ shift and go to state 118 ]
  ! LE              [ shift and go to state 119 ]
  ! HT              [ shift and go to state 120 ]
  ! HE              [ shift and go to state 121 ]
  ! EQUALS          [ shift and go to state 122 ]
  ! DIFF            [ shift and go to state 123 ]
  ! AND             [ shift and go to state 124 ]
  ! OR              [ shift and go to state 125 ]


state 169

    (120) binary_expression -> binary_expression EQUALS binary_expression .
    (111) binary_expression -> binary_expression . TIMES binary_expression
    (112) binary_expression -> binary_expression . DIVIDE binary_expression
    (113) binary_expression -> binary_expression . MOD binary_expression
    (114) binary_expression -> binary_expression . PLUS binary_expression
    (115) binary_expression -> binary_expression . MINUS binary_expression
    (116) binary_expression -> binary_expression . LT binary_expression
    (117) binary_expression -> binary_expression . LE binary_expression
    (118) binary_expression -> binary_expression . HT binary_expression
    (119) binary_expression -> binary_expression . HE binary_expression
    (120) binary_expression -> binary_expression . EQUALS binary_expression
    (121) binary_expression -> binary_expression . DIFF binary_expression
    (122) binary_expression -> binary_expression . AND binary_expression
    (123) binary_expression -> binary_expression . OR binary_expression

    EQUALS          reduce using rule 120 (binary_expression -> binary_expression EQUALS binary_expression .)
    DIFF            reduce using rule 120 (binary_expression -> binary_expression EQUALS binary_expression .)
    AND             reduce using rule 120 (binary_expression -> binary_expression EQUALS binary_expression .)
    OR              reduce using rule 120 (binary_expression -> binary_expression EQUALS binary_expression .)
    RBRACKET        reduce using rule 120 (binary_expression -> binary_expression EQUALS binary_expression .)
    COMMA           reduce using rule 120 (binary_expression -> binary_expression EQUALS binary_expression .)
    SEMI            reduce using rule 120 (binary_expression -> binary_expression EQUALS binary_expression .)
    RPAREN          reduce using rule 120 (binary_expression -> binary_expression EQUALS binary_expression .)
    RBRACE          reduce using rule 120 (binary_expression -> binary_expression EQUALS binary_expression .)
    TIMES           shift and go to state 113
    DIVIDE          shift and go to state 114
    MOD             shift and go to state 115
    PLUS            shift and go to state 116
    MINUS           shift and go to state 117
    LT              shift and go to state 118
    LE              shift and go to state 119
    HT              shift and go to state 120
    HE              shift and go to state 121

  ! TIMES           [ reduce using rule 120 (binary_expression -> binary_expression EQUALS binary_expression .) ]
  ! DIVIDE          [ reduce using rule 120 (binary_expression -> binary_expression EQUALS binary_expression .) ]
  ! MOD             [ reduce using rule 120 (binary_expression -> binary_expression EQUALS binary_expression .) ]
  ! PLUS            [ reduce using rule 120 (binary_expression -> binary_expression EQUALS binary_expression .) ]
  ! MINUS           [ reduce using rule 120 (binary_expression -> binary_expression EQUALS binary_expression .) ]
  ! LT              [ reduce using rule 120 (binary_expression -> binary_expression EQUALS binary_expression .) ]
  ! LE              [ reduce using rule 120 (binary_expression -> binary_expression EQUALS binary_expression .) ]
  ! HT              [ reduce using rule 120 (binary_expression -> binary_expression EQUALS binary_expression .) ]
  ! HE              [ reduce using rule 120 (binary_expression -> binary_expression EQUALS binary_expression .) ]
  ! EQUALS          [ shift and go to state 122 ]
  ! DIFF            [ shift and go to state 123 ]
  ! AND             [ shift and go to state 124 ]
  ! OR              [ shift and go to state 125 ]


state 170

    (121) binary_expression -> binary_expression DIFF binary_expression .
    (111) binary_expression -> binary_expression . TIMES binary_expression
    (112) binary_expression -> binary_expression . DIVIDE binary_expression
    (113) binary_expression -> binary_expression . MOD binary_expression
    (114) binary_expression -> binary_expression . PLUS binary_expression
    (115) binary_expression -> binary_expression . MINUS binary_expression
    (116) binary_expression -> binary_expression . LT binary_expression
    (117) binary_expression -> binary_expression . LE binary_expression
    (118) binary_expression -> binary_expression . HT binary_expression
    (119) binary_expression -> binary_expression . HE binary_expression
    (120) binary_expression -> binary_expression . EQUALS binary_expression
    (121) binary_expression -> binary_expression . DIFF binary_expression
    (122) binary_expression -> binary_expression . AND binary_expression
    (123) binary_expression -> binary_expression . OR binary_expression

    EQUALS          reduce using rule 121 (binary_expression -> binary_expression DIFF binary_expression .)
    DIFF            reduce using rule 121 (binary_expression -> binary_expression DIFF binary_expression .)
    AND             reduce using rule 121 (binary_expression -> binary_expression DIFF binary_expression .)
    OR              reduce using rule 121 (binary_expression -> binary_expression DIFF binary_expression .)
    RBRACKET        reduce using rule 121 (binary_expression -> binary_expression DIFF binary_expression .)
    COMMA           reduce using rule 121 (binary_expression -> binary_expression DIFF binary_expression .)
    SEMI            reduce using rule 121 (binary_expression -> binary_expression DIFF binary_expression .)
    RPAREN          reduce using rule 121 (binary_expression -> binary_expression DIFF binary_expression .)
    RBRACE          reduce using rule 121 (binary_expression -> binary_expression DIFF binary_expression .)
    TIMES           shift and go to state 113
    DIVIDE          shift and go to state 114
    MOD             shift and go to state 115
    PLUS            shift and go to state 116
    MINUS           shift and go to state 117
    LT              shift and go to state 118
    LE              shift and go to state 119
    HT              shift and go to state 120
    HE              shift and go to state 121

  ! TIMES           [ reduce using rule 121 (binary_expression -> binary_expression DIFF binary_expression .) ]
  ! DIVIDE          [ reduce using rule 121 (binary_expression -> binary_expression DIFF binary_expression .) ]
  ! MOD             [ reduce using rule 121 (binary_expression -> binary_expression DIFF binary_expression .) ]
  ! PLUS            [ reduce using rule 121 (binary_expression -> binary_expression DIFF binary_expression .) ]
  ! MINUS           [ reduce using rule 121 (binary_expression -> binary_expression DIFF binary_expression .) ]
  ! LT              [ reduce using rule 121 (binary_expression -> binary_expression DIFF binary_expression .) ]
  ! LE              [ reduce using rule 121 (binary_expression -> binary_expression DIFF binary_expression .) ]
  ! HT              [ reduce using rule 121 (binary_expression -> binary_expression DIFF binary_expression .) ]
  ! HE              [ reduce using rule 121 (binary_expression -> binary_expression DIFF binary_expression .) ]
  ! EQUALS          [ shift and go to state 122 ]
  ! DIFF            [ shift and go to state 123 ]
  ! AND             [ shift and go to state 124 ]
  ! OR              [ shift and go to state 125 ]


state 171

    (122) binary_expression -> binary_expression AND binary_expression .
    (111) binary_expression -> binary_expression . TIMES binary_expression
    (112) binary_expression -> binary_expression . DIVIDE binary_expression
    (113) binary_expression -> binary_expression . MOD binary_expression
    (114) binary_expression -> binary_expression . PLUS binary_expression
    (115) binary_expression -> binary_expression . MINUS binary_expression
    (116) binary_expression -> binary_expression . LT binary_expression
    (117) binary_expression -> binary_expression . LE binary_expression
    (118) binary_expression -> binary_expression . HT binary_expression
    (119) binary_expression -> binary_expression . HE binary_expression
    (120) binary_expression -> binary_expression . EQUALS binary_expression
    (121) binary_expression -> binary_expression . DIFF binary_expression
    (122) binary_expression -> binary_expression . AND binary_expression
    (123) binary_expression -> binary_expression . OR binary_expression

    EQUALS          reduce using rule 122 (binary_expression -> binary_expression AND binary_expression .)
    DIFF            reduce using rule 122 (binary_expression -> binary_expression AND binary_expression .)
    AND             reduce using rule 122 (binary_expression -> binary_expression AND binary_expression .)
    OR              reduce using rule 122 (binary_expression -> binary_expression AND binary_expression .)
    RBRACKET        reduce using rule 122 (binary_expression -> binary_expression AND binary_expression .)
    COMMA           reduce using rule 122 (binary_expression -> binary_expression AND binary_expression .)
    SEMI            reduce using rule 122 (binary_expression -> binary_expression AND binary_expression .)
    RPAREN          reduce using rule 122 (binary_expression -> binary_expression AND binary_expression .)
    RBRACE          reduce using rule 122 (binary_expression -> binary_expression AND binary_expression .)
    TIMES           shift and go to state 113
    DIVIDE          shift and go to state 114
    MOD             shift and go to state 115
    PLUS            shift and go to state 116
    MINUS           shift and go to state 117
    LT              shift and go to state 118
    LE              shift and go to state 119
    HT              shift and go to state 120
    HE              shift and go to state 121

  ! TIMES           [ reduce using rule 122 (binary_expression -> binary_expression AND binary_expression .) ]
  ! DIVIDE          [ reduce using rule 122 (binary_expression -> binary_expression AND binary_expression .) ]
  ! MOD             [ reduce using rule 122 (binary_expression -> binary_expression AND binary_expression .) ]
  ! PLUS            [ reduce using rule 122 (binary_expression -> binary_expression AND binary_expression .) ]
  ! MINUS           [ reduce using rule 122 (binary_expression -> binary_expression AND binary_expression .) ]
  ! LT              [ reduce using rule 122 (binary_expression -> binary_expression AND binary_expression .) ]
  ! LE              [ reduce using rule 122 (binary_expression -> binary_expression AND binary_expression .) ]
  ! HT              [ reduce using rule 122 (binary_expression -> binary_expression AND binary_expression .) ]
  ! HE              [ reduce using rule 122 (binary_expression -> binary_expression AND binary_expression .) ]
  ! EQUALS          [ shift and go to state 122 ]
  ! DIFF            [ shift and go to state 123 ]
  ! AND             [ shift and go to state 124 ]
  ! OR              [ shift and go to state 125 ]


state 172

    (123) binary_expression -> binary_expression OR binary_expression .
    (111) binary_expression -> binary_expression . TIMES binary_expression
    (112) binary_expression -> binary_expression . DIVIDE binary_expression
    (113) binary_expression -> binary_expression . MOD binary_expression
    (114) binary_expression -> binary_expression . PLUS binary_expression
    (115) binary_expression -> binary_expression . MINUS binary_expression
    (116) binary_expression -> binary_expression . LT binary_expression
    (117) binary_expression -> binary_expression . LE binary_expression
    (118) binary_expression -> binary_expression . HT binary_expression
    (119) binary_expression -> binary_expression . HE binary_expression
    (120) binary_expression -> binary_expression . EQUALS binary_expression
    (121) binary_expression -> binary_expression . DIFF binary_expression
    (122) binary_expression -> binary_expression . AND binary_expression
    (123) binary_expression -> binary_expression . OR binary_expression

    OR              reduce using rule 123 (binary_expression -> binary_expression OR binary_expression .)
    RBRACKET        reduce using rule 123 (binary_expression -> binary_expression OR binary_expression .)
    COMMA           reduce using rule 123 (binary_expression -> binary_expression OR binary_expression .)
    SEMI            reduce using rule 123 (binary_expression -> binary_expression OR binary_expression .)
    RPAREN          reduce using rule 123 (binary_expression -> binary_expression OR binary_expression .)
    RBRACE          reduce using rule 123 (binary_expression -> binary_expression OR binary_expression .)
    TIMES           shift and go to state 113
    DIVIDE          shift and go to state 114
    MOD             shift and go to state 115
    PLUS            shift and go to state 116
    MINUS           shift and go to state 117
    LT              shift and go to state 118
    LE              shift and go to state 119
    HT              shift and go to state 120
    HE              shift and go to state 121
    EQUALS          shift and go to state 122
    DIFF            shift and go to state 123
    AND             shift and go to state 124

  ! TIMES           [ reduce using rule 123 (binary_expression -> binary_expression OR binary_expression .) ]
  ! DIVIDE          [ reduce using rule 123 (binary_expression -> binary_expression OR binary_expression .) ]
  ! MOD             [ reduce using rule 123 (binary_expression -> binary_expression OR binary_expression .) ]
  ! PLUS            [ reduce using rule 123 (binary_expression -> binary_expression OR binary_expression .) ]
  ! MINUS           [ reduce using rule 123 (binary_expression -> binary_expression OR binary_expression .) ]
  ! LT              [ reduce using rule 123 (binary_expression -> binary_expression OR binary_expression .) ]
  ! LE              [ reduce using rule 123 (binary_expression -> binary_expression OR binary_expression .) ]
  ! HT              [ reduce using rule 123 (binary_expression -> binary_expression OR binary_expression .) ]
  ! HE              [ reduce using rule 123 (binary_expression -> binary_expression OR binary_expression .) ]
  ! EQUALS          [ reduce using rule 123 (binary_expression -> binary_expression OR binary_expression .) ]
  ! DIFF            [ reduce using rule 123 (binary_expression -> binary_expression OR binary_expression .) ]
  ! AND             [ reduce using rule 123 (binary_expression -> binary_expression OR binary_expression .) ]
  ! OR              [ shift and go to state 125 ]


state 173

    (34) cast_expression -> LPAREN type_specifier RPAREN . cast_expression
    (33) cast_expression -> . unary_expression
    (34) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (106) unary_expression -> . postfix_expression
    (107) unary_expression -> . PLUSPLUS unary_expression
    (108) unary_expression -> . MINUSMINUS unary_expression
    (109) unary_expression -> . unary_operator cast_expression
    (28) postfix_expression -> . primary_expression
    (29) postfix_expression -> . postfix_expression PLUSPLUS
    (30) postfix_expression -> . postfix_expression MINUSMINUS
    (31) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (32) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (36) unary_operator -> . ADDRESS
    (37) unary_operator -> . TIMES
    (38) unary_operator -> . PLUS
    (39) unary_operator -> . MINUS
    (40) unary_operator -> . NOT
    (92) primary_expression -> . identifier
    (93) primary_expression -> . constant
    (94) primary_expression -> . string_literal
    (95) primary_expression -> . LPAREN expression RPAREN
    (35) identifier -> . ID
    (48) constant -> . INT_CONST
    (49) constant -> . FLOAT_CONST
    (50) constant -> . CHAR_CONST
    (91) string_literal -> . STRING

    LPAREN          shift and go to state 59
    PLUSPLUS        shift and go to state 61
    MINUSMINUS      shift and go to state 62
    ADDRESS         shift and go to state 65
    TIMES           shift and go to state 55
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    NOT             shift and go to state 66
    ID              shift and go to state 18
    INT_CONST       shift and go to state 70
    FLOAT_CONST     shift and go to state 71
    CHAR_CONST      shift and go to state 72
    STRING          shift and go to state 73

    cast_expression                shift and go to state 192
    unary_expression               shift and go to state 58
    postfix_expression             shift and go to state 60
    unary_operator                 shift and go to state 63
    primary_expression             shift and go to state 64
    identifier                     shift and go to state 67
    constant                       shift and go to state 68
    string_literal                 shift and go to state 69

state 174

    (95) primary_expression -> LPAREN expression RPAREN .

    PLUSPLUS        reduce using rule 95 (primary_expression -> LPAREN expression RPAREN .)
    MINUSMINUS      reduce using rule 95 (primary_expression -> LPAREN expression RPAREN .)
    LBRACKET        reduce using rule 95 (primary_expression -> LPAREN expression RPAREN .)
    LPAREN          reduce using rule 95 (primary_expression -> LPAREN expression RPAREN .)
    TIMES           reduce using rule 95 (primary_expression -> LPAREN expression RPAREN .)
    DIVIDE          reduce using rule 95 (primary_expression -> LPAREN expression RPAREN .)
    MOD             reduce using rule 95 (primary_expression -> LPAREN expression RPAREN .)
    PLUS            reduce using rule 95 (primary_expression -> LPAREN expression RPAREN .)
    MINUS           reduce using rule 95 (primary_expression -> LPAREN expression RPAREN .)
    LT              reduce using rule 95 (primary_expression -> LPAREN expression RPAREN .)
    LE              reduce using rule 95 (primary_expression -> LPAREN expression RPAREN .)
    HT              reduce using rule 95 (primary_expression -> LPAREN expression RPAREN .)
    HE              reduce using rule 95 (primary_expression -> LPAREN expression RPAREN .)
    EQUALS          reduce using rule 95 (primary_expression -> LPAREN expression RPAREN .)
    DIFF            reduce using rule 95 (primary_expression -> LPAREN expression RPAREN .)
    AND             reduce using rule 95 (primary_expression -> LPAREN expression RPAREN .)
    OR              reduce using rule 95 (primary_expression -> LPAREN expression RPAREN .)
    RBRACKET        reduce using rule 95 (primary_expression -> LPAREN expression RPAREN .)
    EQ              reduce using rule 95 (primary_expression -> LPAREN expression RPAREN .)
    ASSIGN_TIMES    reduce using rule 95 (primary_expression -> LPAREN expression RPAREN .)
    ASSIGN_DIVIDE   reduce using rule 95 (primary_expression -> LPAREN expression RPAREN .)
    ASSIGN_MOD      reduce using rule 95 (primary_expression -> LPAREN expression RPAREN .)
    ASSIGN_PLUS     reduce using rule 95 (primary_expression -> LPAREN expression RPAREN .)
    ASSIGN_MINUS    reduce using rule 95 (primary_expression -> LPAREN expression RPAREN .)
    COMMA           reduce using rule 95 (primary_expression -> LPAREN expression RPAREN .)
    SEMI            reduce using rule 95 (primary_expression -> LPAREN expression RPAREN .)
    RPAREN          reduce using rule 95 (primary_expression -> LPAREN expression RPAREN .)
    RBRACE          reduce using rule 95 (primary_expression -> LPAREN expression RPAREN .)


state 175

    (31) postfix_expression -> postfix_expression LBRACKET expression . RBRACKET
    (90) expression -> expression . COMMA assignment_expression

    RBRACKET        shift and go to state 193
    COMMA           shift and go to state 150


state 176

    (32) postfix_expression -> postfix_expression LPAREN argument_expression_opt . RPAREN

    RPAREN          shift and go to state 194


state 177

    (66) argument_expression_opt -> argument_expression_list .
    (65) argument_expression_list -> argument_expression_list . COMMA assignment_expression

    RPAREN          reduce using rule 66 (argument_expression_opt -> argument_expression_list .)
    COMMA           shift and go to state 195


state 178

    (67) argument_expression_opt -> empty .

    RPAREN          reduce using rule 67 (argument_expression_opt -> empty .)


state 179

    (64) argument_expression_list -> assignment_expression .

    COMMA           reduce using rule 64 (argument_expression_list -> assignment_expression .)
    RPAREN          reduce using rule 64 (argument_expression_list -> assignment_expression .)


state 180

    (26) initializer -> LBRACE initializer_list RBRACE .

    COMMA           reduce using rule 26 (initializer -> LBRACE initializer_list RBRACE .)
    SEMI            reduce using rule 26 (initializer -> LBRACE initializer_list RBRACE .)
    RBRACE          reduce using rule 26 (initializer -> LBRACE initializer_list RBRACE .)


state 181

    (27) initializer -> LBRACE initializer_list COMMA . RBRACE
    (63) initializer_list -> initializer_list COMMA . initializer
    (25) initializer -> . assignment_expression
    (26) initializer -> . LBRACE initializer_list RBRACE
    (27) initializer -> . LBRACE initializer_list COMMA RBRACE
    (98) assignment_expression -> . binary_expression
    (99) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (110) binary_expression -> . cast_expression
    (111) binary_expression -> . binary_expression TIMES binary_expression
    (112) binary_expression -> . binary_expression DIVIDE binary_expression
    (113) binary_expression -> . binary_expression MOD binary_expression
    (114) binary_expression -> . binary_expression PLUS binary_expression
    (115) binary_expression -> . binary_expression MINUS binary_expression
    (116) binary_expression -> . binary_expression LT binary_expression
    (117) binary_expression -> . binary_expression LE binary_expression
    (118) binary_expression -> . binary_expression HT binary_expression
    (119) binary_expression -> . binary_expression HE binary_expression
    (120) binary_expression -> . binary_expression EQUALS binary_expression
    (121) binary_expression -> . binary_expression DIFF binary_expression
    (122) binary_expression -> . binary_expression AND binary_expression
    (123) binary_expression -> . binary_expression OR binary_expression
    (106) unary_expression -> . postfix_expression
    (107) unary_expression -> . PLUSPLUS unary_expression
    (108) unary_expression -> . MINUSMINUS unary_expression
    (109) unary_expression -> . unary_operator cast_expression
    (33) cast_expression -> . unary_expression
    (34) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (28) postfix_expression -> . primary_expression
    (29) postfix_expression -> . postfix_expression PLUSPLUS
    (30) postfix_expression -> . postfix_expression MINUSMINUS
    (31) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (32) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (36) unary_operator -> . ADDRESS
    (37) unary_operator -> . TIMES
    (38) unary_operator -> . PLUS
    (39) unary_operator -> . MINUS
    (40) unary_operator -> . NOT
    (92) primary_expression -> . identifier
    (93) primary_expression -> . constant
    (94) primary_expression -> . string_literal
    (95) primary_expression -> . LPAREN expression RPAREN
    (35) identifier -> . ID
    (48) constant -> . INT_CONST
    (49) constant -> . FLOAT_CONST
    (50) constant -> . CHAR_CONST
    (91) string_literal -> . STRING

    RBRACE          shift and go to state 196
    LBRACE          shift and go to state 78
    PLUSPLUS        shift and go to state 61
    MINUSMINUS      shift and go to state 62
    LPAREN          shift and go to state 59
    ADDRESS         shift and go to state 65
    TIMES           shift and go to state 55
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    NOT             shift and go to state 66
    ID              shift and go to state 18
    INT_CONST       shift and go to state 70
    FLOAT_CONST     shift and go to state 71
    CHAR_CONST      shift and go to state 72
    STRING          shift and go to state 73

    initializer                    shift and go to state 197
    assignment_expression          shift and go to state 77
    binary_expression              shift and go to state 79
    unary_expression               shift and go to state 80
    cast_expression                shift and go to state 54
    postfix_expression             shift and go to state 60
    unary_operator                 shift and go to state 63
    primary_expression             shift and go to state 64
    identifier                     shift and go to state 67
    constant                       shift and go to state 68
    string_literal                 shift and go to state 69

state 182

    (99) assignment_expression -> unary_expression assignment_operator assignment_expression .

    COMMA           reduce using rule 99 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    SEMI            reduce using rule 99 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RPAREN          reduce using rule 99 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RBRACE          reduce using rule 99 (assignment_expression -> unary_expression assignment_operator assignment_expression .)
    RBRACKET        reduce using rule 99 (assignment_expression -> unary_expression assignment_operator assignment_expression .)


state 183

    (57) selection_statement -> IF LPAREN expression . RPAREN statement
    (58) selection_statement -> IF LPAREN expression . RPAREN statement ELSE statement
    (90) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 198
    COMMA           shift and go to state 150


state 184

    (90) expression -> expression COMMA assignment_expression .

    COMMA           reduce using rule 90 (expression -> expression COMMA assignment_expression .)
    SEMI            reduce using rule 90 (expression -> expression COMMA assignment_expression .)
    RPAREN          reduce using rule 90 (expression -> expression COMMA assignment_expression .)
    RBRACKET        reduce using rule 90 (expression -> expression COMMA assignment_expression .)


state 185

    (84) jump_statement -> RETURN expression SEMI .

    IF              reduce using rule 84 (jump_statement -> RETURN expression SEMI .)
    BREAK           reduce using rule 84 (jump_statement -> RETURN expression SEMI .)
    RETURN          reduce using rule 84 (jump_statement -> RETURN expression SEMI .)
    PRINT           reduce using rule 84 (jump_statement -> RETURN expression SEMI .)
    ASSERT          reduce using rule 84 (jump_statement -> RETURN expression SEMI .)
    READ            reduce using rule 84 (jump_statement -> RETURN expression SEMI .)
    WHILE           reduce using rule 84 (jump_statement -> RETURN expression SEMI .)
    FOR             reduce using rule 84 (jump_statement -> RETURN expression SEMI .)
    LBRACE          reduce using rule 84 (jump_statement -> RETURN expression SEMI .)
    VOID            reduce using rule 84 (jump_statement -> RETURN expression SEMI .)
    INT             reduce using rule 84 (jump_statement -> RETURN expression SEMI .)
    FLOAT           reduce using rule 84 (jump_statement -> RETURN expression SEMI .)
    CHAR            reduce using rule 84 (jump_statement -> RETURN expression SEMI .)
    PLUSPLUS        reduce using rule 84 (jump_statement -> RETURN expression SEMI .)
    MINUSMINUS      reduce using rule 84 (jump_statement -> RETURN expression SEMI .)
    LPAREN          reduce using rule 84 (jump_statement -> RETURN expression SEMI .)
    ADDRESS         reduce using rule 84 (jump_statement -> RETURN expression SEMI .)
    TIMES           reduce using rule 84 (jump_statement -> RETURN expression SEMI .)
    PLUS            reduce using rule 84 (jump_statement -> RETURN expression SEMI .)
    MINUS           reduce using rule 84 (jump_statement -> RETURN expression SEMI .)
    NOT             reduce using rule 84 (jump_statement -> RETURN expression SEMI .)
    ID              reduce using rule 84 (jump_statement -> RETURN expression SEMI .)
    INT_CONST       reduce using rule 84 (jump_statement -> RETURN expression SEMI .)
    FLOAT_CONST     reduce using rule 84 (jump_statement -> RETURN expression SEMI .)
    CHAR_CONST      reduce using rule 84 (jump_statement -> RETURN expression SEMI .)
    STRING          reduce using rule 84 (jump_statement -> RETURN expression SEMI .)
    SEMI            reduce using rule 84 (jump_statement -> RETURN expression SEMI .)
    RBRACE          reduce using rule 84 (jump_statement -> RETURN expression SEMI .)
    ELSE            reduce using rule 84 (jump_statement -> RETURN expression SEMI .)


state 186

    (71) print_statement -> PRINT LPAREN expression_opt . RPAREN SEMI

    RPAREN          shift and go to state 199


state 187

    (70) assert_statement -> ASSERT expression SEMI .

    IF              reduce using rule 70 (assert_statement -> ASSERT expression SEMI .)
    BREAK           reduce using rule 70 (assert_statement -> ASSERT expression SEMI .)
    RETURN          reduce using rule 70 (assert_statement -> ASSERT expression SEMI .)
    PRINT           reduce using rule 70 (assert_statement -> ASSERT expression SEMI .)
    ASSERT          reduce using rule 70 (assert_statement -> ASSERT expression SEMI .)
    READ            reduce using rule 70 (assert_statement -> ASSERT expression SEMI .)
    WHILE           reduce using rule 70 (assert_statement -> ASSERT expression SEMI .)
    FOR             reduce using rule 70 (assert_statement -> ASSERT expression SEMI .)
    LBRACE          reduce using rule 70 (assert_statement -> ASSERT expression SEMI .)
    VOID            reduce using rule 70 (assert_statement -> ASSERT expression SEMI .)
    INT             reduce using rule 70 (assert_statement -> ASSERT expression SEMI .)
    FLOAT           reduce using rule 70 (assert_statement -> ASSERT expression SEMI .)
    CHAR            reduce using rule 70 (assert_statement -> ASSERT expression SEMI .)
    PLUSPLUS        reduce using rule 70 (assert_statement -> ASSERT expression SEMI .)
    MINUSMINUS      reduce using rule 70 (assert_statement -> ASSERT expression SEMI .)
    LPAREN          reduce using rule 70 (assert_statement -> ASSERT expression SEMI .)
    ADDRESS         reduce using rule 70 (assert_statement -> ASSERT expression SEMI .)
    TIMES           reduce using rule 70 (assert_statement -> ASSERT expression SEMI .)
    PLUS            reduce using rule 70 (assert_statement -> ASSERT expression SEMI .)
    MINUS           reduce using rule 70 (assert_statement -> ASSERT expression SEMI .)
    NOT             reduce using rule 70 (assert_statement -> ASSERT expression SEMI .)
    ID              reduce using rule 70 (assert_statement -> ASSERT expression SEMI .)
    INT_CONST       reduce using rule 70 (assert_statement -> ASSERT expression SEMI .)
    FLOAT_CONST     reduce using rule 70 (assert_statement -> ASSERT expression SEMI .)
    CHAR_CONST      reduce using rule 70 (assert_statement -> ASSERT expression SEMI .)
    STRING          reduce using rule 70 (assert_statement -> ASSERT expression SEMI .)
    SEMI            reduce using rule 70 (assert_statement -> ASSERT expression SEMI .)
    RBRACE          reduce using rule 70 (assert_statement -> ASSERT expression SEMI .)
    ELSE            reduce using rule 70 (assert_statement -> ASSERT expression SEMI .)


state 188

    (72) read_statement -> READ LPAREN argument_expression_list . RPAREN SEMI
    (65) argument_expression_list -> argument_expression_list . COMMA assignment_expression

    RPAREN          shift and go to state 200
    COMMA           shift and go to state 195


state 189

    (59) iteration_statement -> WHILE LPAREN expression . RPAREN statement
    (90) expression -> expression . COMMA assignment_expression

    RPAREN          shift and go to state 201
    COMMA           shift and go to state 150


state 190

    (60) iteration_statement -> FOR LPAREN expression_opt . SEMI expression_opt SEMI expression_opt RPAREN statement

    SEMI            shift and go to state 202


state 191

    (61) iteration_statement -> FOR LPAREN declaration . expression_opt SEMI expression_opt RPAREN statement
    (96) expression_opt -> . expression
    (97) expression_opt -> . empty
    (89) expression -> . assignment_expression
    (90) expression -> . expression COMMA assignment_expression
    (124) empty -> .
    (98) assignment_expression -> . binary_expression
    (99) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (110) binary_expression -> . cast_expression
    (111) binary_expression -> . binary_expression TIMES binary_expression
    (112) binary_expression -> . binary_expression DIVIDE binary_expression
    (113) binary_expression -> . binary_expression MOD binary_expression
    (114) binary_expression -> . binary_expression PLUS binary_expression
    (115) binary_expression -> . binary_expression MINUS binary_expression
    (116) binary_expression -> . binary_expression LT binary_expression
    (117) binary_expression -> . binary_expression LE binary_expression
    (118) binary_expression -> . binary_expression HT binary_expression
    (119) binary_expression -> . binary_expression HE binary_expression
    (120) binary_expression -> . binary_expression EQUALS binary_expression
    (121) binary_expression -> . binary_expression DIFF binary_expression
    (122) binary_expression -> . binary_expression AND binary_expression
    (123) binary_expression -> . binary_expression OR binary_expression
    (106) unary_expression -> . postfix_expression
    (107) unary_expression -> . PLUSPLUS unary_expression
    (108) unary_expression -> . MINUSMINUS unary_expression
    (109) unary_expression -> . unary_operator cast_expression
    (33) cast_expression -> . unary_expression
    (34) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (28) postfix_expression -> . primary_expression
    (29) postfix_expression -> . postfix_expression PLUSPLUS
    (30) postfix_expression -> . postfix_expression MINUSMINUS
    (31) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (32) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (36) unary_operator -> . ADDRESS
    (37) unary_operator -> . TIMES
    (38) unary_operator -> . PLUS
    (39) unary_operator -> . MINUS
    (40) unary_operator -> . NOT
    (92) primary_expression -> . identifier
    (93) primary_expression -> . constant
    (94) primary_expression -> . string_literal
    (95) primary_expression -> . LPAREN expression RPAREN
    (35) identifier -> . ID
    (48) constant -> . INT_CONST
    (49) constant -> . FLOAT_CONST
    (50) constant -> . CHAR_CONST
    (91) string_literal -> . STRING

    SEMI            reduce using rule 124 (empty -> .)
    PLUSPLUS        shift and go to state 61
    MINUSMINUS      shift and go to state 62
    LPAREN          shift and go to state 59
    ADDRESS         shift and go to state 65
    TIMES           shift and go to state 55
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    NOT             shift and go to state 66
    ID              shift and go to state 18
    INT_CONST       shift and go to state 70
    FLOAT_CONST     shift and go to state 71
    CHAR_CONST      shift and go to state 72
    STRING          shift and go to state 73

    expression_opt                 shift and go to state 203
    expression                     shift and go to state 98
    empty                          shift and go to state 147
    assignment_expression          shift and go to state 106
    binary_expression              shift and go to state 79
    unary_expression               shift and go to state 80
    cast_expression                shift and go to state 54
    postfix_expression             shift and go to state 60
    unary_operator                 shift and go to state 63
    primary_expression             shift and go to state 64
    identifier                     shift and go to state 67
    constant                       shift and go to state 68
    string_literal                 shift and go to state 69

state 192

    (34) cast_expression -> LPAREN type_specifier RPAREN cast_expression .

    TIMES           reduce using rule 34 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    DIVIDE          reduce using rule 34 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    MOD             reduce using rule 34 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    PLUS            reduce using rule 34 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    MINUS           reduce using rule 34 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    LT              reduce using rule 34 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    LE              reduce using rule 34 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    HT              reduce using rule 34 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    HE              reduce using rule 34 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    EQUALS          reduce using rule 34 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    DIFF            reduce using rule 34 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    AND             reduce using rule 34 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    OR              reduce using rule 34 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    RBRACKET        reduce using rule 34 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    COMMA           reduce using rule 34 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    SEMI            reduce using rule 34 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    RPAREN          reduce using rule 34 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    EQ              reduce using rule 34 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    ASSIGN_TIMES    reduce using rule 34 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    ASSIGN_DIVIDE   reduce using rule 34 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    ASSIGN_MOD      reduce using rule 34 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    ASSIGN_PLUS     reduce using rule 34 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    ASSIGN_MINUS    reduce using rule 34 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)
    RBRACE          reduce using rule 34 (cast_expression -> LPAREN type_specifier RPAREN cast_expression .)


state 193

    (31) postfix_expression -> postfix_expression LBRACKET expression RBRACKET .

    PLUSPLUS        reduce using rule 31 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MINUSMINUS      reduce using rule 31 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LBRACKET        reduce using rule 31 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LPAREN          reduce using rule 31 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    TIMES           reduce using rule 31 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    DIVIDE          reduce using rule 31 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MOD             reduce using rule 31 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    PLUS            reduce using rule 31 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    MINUS           reduce using rule 31 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LT              reduce using rule 31 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    LE              reduce using rule 31 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    HT              reduce using rule 31 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    HE              reduce using rule 31 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    EQUALS          reduce using rule 31 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    DIFF            reduce using rule 31 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    AND             reduce using rule 31 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    OR              reduce using rule 31 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RBRACKET        reduce using rule 31 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    EQ              reduce using rule 31 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    ASSIGN_TIMES    reduce using rule 31 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    ASSIGN_DIVIDE   reduce using rule 31 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    ASSIGN_MOD      reduce using rule 31 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    ASSIGN_PLUS     reduce using rule 31 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    ASSIGN_MINUS    reduce using rule 31 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    COMMA           reduce using rule 31 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    SEMI            reduce using rule 31 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RPAREN          reduce using rule 31 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)
    RBRACE          reduce using rule 31 (postfix_expression -> postfix_expression LBRACKET expression RBRACKET .)


state 194

    (32) postfix_expression -> postfix_expression LPAREN argument_expression_opt RPAREN .

    PLUSPLUS        reduce using rule 32 (postfix_expression -> postfix_expression LPAREN argument_expression_opt RPAREN .)
    MINUSMINUS      reduce using rule 32 (postfix_expression -> postfix_expression LPAREN argument_expression_opt RPAREN .)
    LBRACKET        reduce using rule 32 (postfix_expression -> postfix_expression LPAREN argument_expression_opt RPAREN .)
    LPAREN          reduce using rule 32 (postfix_expression -> postfix_expression LPAREN argument_expression_opt RPAREN .)
    TIMES           reduce using rule 32 (postfix_expression -> postfix_expression LPAREN argument_expression_opt RPAREN .)
    DIVIDE          reduce using rule 32 (postfix_expression -> postfix_expression LPAREN argument_expression_opt RPAREN .)
    MOD             reduce using rule 32 (postfix_expression -> postfix_expression LPAREN argument_expression_opt RPAREN .)
    PLUS            reduce using rule 32 (postfix_expression -> postfix_expression LPAREN argument_expression_opt RPAREN .)
    MINUS           reduce using rule 32 (postfix_expression -> postfix_expression LPAREN argument_expression_opt RPAREN .)
    LT              reduce using rule 32 (postfix_expression -> postfix_expression LPAREN argument_expression_opt RPAREN .)
    LE              reduce using rule 32 (postfix_expression -> postfix_expression LPAREN argument_expression_opt RPAREN .)
    HT              reduce using rule 32 (postfix_expression -> postfix_expression LPAREN argument_expression_opt RPAREN .)
    HE              reduce using rule 32 (postfix_expression -> postfix_expression LPAREN argument_expression_opt RPAREN .)
    EQUALS          reduce using rule 32 (postfix_expression -> postfix_expression LPAREN argument_expression_opt RPAREN .)
    DIFF            reduce using rule 32 (postfix_expression -> postfix_expression LPAREN argument_expression_opt RPAREN .)
    AND             reduce using rule 32 (postfix_expression -> postfix_expression LPAREN argument_expression_opt RPAREN .)
    OR              reduce using rule 32 (postfix_expression -> postfix_expression LPAREN argument_expression_opt RPAREN .)
    RBRACKET        reduce using rule 32 (postfix_expression -> postfix_expression LPAREN argument_expression_opt RPAREN .)
    EQ              reduce using rule 32 (postfix_expression -> postfix_expression LPAREN argument_expression_opt RPAREN .)
    ASSIGN_TIMES    reduce using rule 32 (postfix_expression -> postfix_expression LPAREN argument_expression_opt RPAREN .)
    ASSIGN_DIVIDE   reduce using rule 32 (postfix_expression -> postfix_expression LPAREN argument_expression_opt RPAREN .)
    ASSIGN_MOD      reduce using rule 32 (postfix_expression -> postfix_expression LPAREN argument_expression_opt RPAREN .)
    ASSIGN_PLUS     reduce using rule 32 (postfix_expression -> postfix_expression LPAREN argument_expression_opt RPAREN .)
    ASSIGN_MINUS    reduce using rule 32 (postfix_expression -> postfix_expression LPAREN argument_expression_opt RPAREN .)
    COMMA           reduce using rule 32 (postfix_expression -> postfix_expression LPAREN argument_expression_opt RPAREN .)
    SEMI            reduce using rule 32 (postfix_expression -> postfix_expression LPAREN argument_expression_opt RPAREN .)
    RPAREN          reduce using rule 32 (postfix_expression -> postfix_expression LPAREN argument_expression_opt RPAREN .)
    RBRACE          reduce using rule 32 (postfix_expression -> postfix_expression LPAREN argument_expression_opt RPAREN .)


state 195

    (65) argument_expression_list -> argument_expression_list COMMA . assignment_expression
    (98) assignment_expression -> . binary_expression
    (99) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (110) binary_expression -> . cast_expression
    (111) binary_expression -> . binary_expression TIMES binary_expression
    (112) binary_expression -> . binary_expression DIVIDE binary_expression
    (113) binary_expression -> . binary_expression MOD binary_expression
    (114) binary_expression -> . binary_expression PLUS binary_expression
    (115) binary_expression -> . binary_expression MINUS binary_expression
    (116) binary_expression -> . binary_expression LT binary_expression
    (117) binary_expression -> . binary_expression LE binary_expression
    (118) binary_expression -> . binary_expression HT binary_expression
    (119) binary_expression -> . binary_expression HE binary_expression
    (120) binary_expression -> . binary_expression EQUALS binary_expression
    (121) binary_expression -> . binary_expression DIFF binary_expression
    (122) binary_expression -> . binary_expression AND binary_expression
    (123) binary_expression -> . binary_expression OR binary_expression
    (106) unary_expression -> . postfix_expression
    (107) unary_expression -> . PLUSPLUS unary_expression
    (108) unary_expression -> . MINUSMINUS unary_expression
    (109) unary_expression -> . unary_operator cast_expression
    (33) cast_expression -> . unary_expression
    (34) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (28) postfix_expression -> . primary_expression
    (29) postfix_expression -> . postfix_expression PLUSPLUS
    (30) postfix_expression -> . postfix_expression MINUSMINUS
    (31) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (32) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (36) unary_operator -> . ADDRESS
    (37) unary_operator -> . TIMES
    (38) unary_operator -> . PLUS
    (39) unary_operator -> . MINUS
    (40) unary_operator -> . NOT
    (92) primary_expression -> . identifier
    (93) primary_expression -> . constant
    (94) primary_expression -> . string_literal
    (95) primary_expression -> . LPAREN expression RPAREN
    (35) identifier -> . ID
    (48) constant -> . INT_CONST
    (49) constant -> . FLOAT_CONST
    (50) constant -> . CHAR_CONST
    (91) string_literal -> . STRING

    PLUSPLUS        shift and go to state 61
    MINUSMINUS      shift and go to state 62
    LPAREN          shift and go to state 59
    ADDRESS         shift and go to state 65
    TIMES           shift and go to state 55
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    NOT             shift and go to state 66
    ID              shift and go to state 18
    INT_CONST       shift and go to state 70
    FLOAT_CONST     shift and go to state 71
    CHAR_CONST      shift and go to state 72
    STRING          shift and go to state 73

    assignment_expression          shift and go to state 204
    binary_expression              shift and go to state 79
    unary_expression               shift and go to state 80
    cast_expression                shift and go to state 54
    postfix_expression             shift and go to state 60
    unary_operator                 shift and go to state 63
    primary_expression             shift and go to state 64
    identifier                     shift and go to state 67
    constant                       shift and go to state 68
    string_literal                 shift and go to state 69

state 196

    (27) initializer -> LBRACE initializer_list COMMA RBRACE .

    COMMA           reduce using rule 27 (initializer -> LBRACE initializer_list COMMA RBRACE .)
    SEMI            reduce using rule 27 (initializer -> LBRACE initializer_list COMMA RBRACE .)
    RBRACE          reduce using rule 27 (initializer -> LBRACE initializer_list COMMA RBRACE .)


state 197

    (63) initializer_list -> initializer_list COMMA initializer .

    RBRACE          reduce using rule 63 (initializer_list -> initializer_list COMMA initializer .)
    COMMA           reduce using rule 63 (initializer_list -> initializer_list COMMA initializer .)


state 198

    (57) selection_statement -> IF LPAREN expression RPAREN . statement
    (58) selection_statement -> IF LPAREN expression RPAREN . statement ELSE statement
    (75) statement -> . expression_statement
    (76) statement -> . selection_statement
    (77) statement -> . jump_statement
    (78) statement -> . print_statement
    (79) statement -> . assert_statement
    (80) statement -> . read_statement
    (81) statement -> . iteration_statement
    (82) statement -> . compound_statement
    (73) expression_statement -> . expression_opt SEMI
    (57) selection_statement -> . IF LPAREN expression RPAREN statement
    (58) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (83) jump_statement -> . BREAK SEMI
    (84) jump_statement -> . RETURN expression SEMI
    (85) jump_statement -> . RETURN SEMI
    (71) print_statement -> . PRINT LPAREN expression_opt RPAREN SEMI
    (70) assert_statement -> . ASSERT expression SEMI
    (72) read_statement -> . READ LPAREN argument_expression_list RPAREN SEMI
    (59) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (60) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (61) iteration_statement -> . FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement
    (74) compound_statement -> . LBRACE block_item_list_opt RBRACE
    (96) expression_opt -> . expression
    (97) expression_opt -> . empty
    (89) expression -> . assignment_expression
    (90) expression -> . expression COMMA assignment_expression
    (124) empty -> .
    (98) assignment_expression -> . binary_expression
    (99) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (110) binary_expression -> . cast_expression
    (111) binary_expression -> . binary_expression TIMES binary_expression
    (112) binary_expression -> . binary_expression DIVIDE binary_expression
    (113) binary_expression -> . binary_expression MOD binary_expression
    (114) binary_expression -> . binary_expression PLUS binary_expression
    (115) binary_expression -> . binary_expression MINUS binary_expression
    (116) binary_expression -> . binary_expression LT binary_expression
    (117) binary_expression -> . binary_expression LE binary_expression
    (118) binary_expression -> . binary_expression HT binary_expression
    (119) binary_expression -> . binary_expression HE binary_expression
    (120) binary_expression -> . binary_expression EQUALS binary_expression
    (121) binary_expression -> . binary_expression DIFF binary_expression
    (122) binary_expression -> . binary_expression AND binary_expression
    (123) binary_expression -> . binary_expression OR binary_expression
    (106) unary_expression -> . postfix_expression
    (107) unary_expression -> . PLUSPLUS unary_expression
    (108) unary_expression -> . MINUSMINUS unary_expression
    (109) unary_expression -> . unary_operator cast_expression
    (33) cast_expression -> . unary_expression
    (34) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (28) postfix_expression -> . primary_expression
    (29) postfix_expression -> . postfix_expression PLUSPLUS
    (30) postfix_expression -> . postfix_expression MINUSMINUS
    (31) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (32) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (36) unary_operator -> . ADDRESS
    (37) unary_operator -> . TIMES
    (38) unary_operator -> . PLUS
    (39) unary_operator -> . MINUS
    (40) unary_operator -> . NOT
    (92) primary_expression -> . identifier
    (93) primary_expression -> . constant
    (94) primary_expression -> . string_literal
    (95) primary_expression -> . LPAREN expression RPAREN
    (35) identifier -> . ID
    (48) constant -> . INT_CONST
    (49) constant -> . FLOAT_CONST
    (50) constant -> . CHAR_CONST
    (91) string_literal -> . STRING

    IF              shift and go to state 97
    BREAK           shift and go to state 99
    RETURN          shift and go to state 100
    PRINT           shift and go to state 101
    ASSERT          shift and go to state 102
    READ            shift and go to state 103
    WHILE           shift and go to state 104
    FOR             shift and go to state 105
    LBRACE          shift and go to state 40
    SEMI            reduce using rule 124 (empty -> .)
    PLUSPLUS        shift and go to state 61
    MINUSMINUS      shift and go to state 62
    LPAREN          shift and go to state 59
    ADDRESS         shift and go to state 65
    TIMES           shift and go to state 55
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    NOT             shift and go to state 66
    ID              shift and go to state 18
    INT_CONST       shift and go to state 70
    FLOAT_CONST     shift and go to state 71
    CHAR_CONST      shift and go to state 72
    STRING          shift and go to state 73

    expression                     shift and go to state 98
    statement                      shift and go to state 205
    expression_statement           shift and go to state 88
    selection_statement            shift and go to state 89
    jump_statement                 shift and go to state 90
    print_statement                shift and go to state 91
    assert_statement               shift and go to state 92
    read_statement                 shift and go to state 93
    iteration_statement            shift and go to state 94
    compound_statement             shift and go to state 95
    expression_opt                 shift and go to state 96
    empty                          shift and go to state 147
    assignment_expression          shift and go to state 106
    binary_expression              shift and go to state 79
    unary_expression               shift and go to state 80
    cast_expression                shift and go to state 54
    postfix_expression             shift and go to state 60
    unary_operator                 shift and go to state 63
    primary_expression             shift and go to state 64
    identifier                     shift and go to state 67
    constant                       shift and go to state 68
    string_literal                 shift and go to state 69

state 199

    (71) print_statement -> PRINT LPAREN expression_opt RPAREN . SEMI

    SEMI            shift and go to state 206


state 200

    (72) read_statement -> READ LPAREN argument_expression_list RPAREN . SEMI

    SEMI            shift and go to state 207


state 201

    (59) iteration_statement -> WHILE LPAREN expression RPAREN . statement
    (75) statement -> . expression_statement
    (76) statement -> . selection_statement
    (77) statement -> . jump_statement
    (78) statement -> . print_statement
    (79) statement -> . assert_statement
    (80) statement -> . read_statement
    (81) statement -> . iteration_statement
    (82) statement -> . compound_statement
    (73) expression_statement -> . expression_opt SEMI
    (57) selection_statement -> . IF LPAREN expression RPAREN statement
    (58) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (83) jump_statement -> . BREAK SEMI
    (84) jump_statement -> . RETURN expression SEMI
    (85) jump_statement -> . RETURN SEMI
    (71) print_statement -> . PRINT LPAREN expression_opt RPAREN SEMI
    (70) assert_statement -> . ASSERT expression SEMI
    (72) read_statement -> . READ LPAREN argument_expression_list RPAREN SEMI
    (59) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (60) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (61) iteration_statement -> . FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement
    (74) compound_statement -> . LBRACE block_item_list_opt RBRACE
    (96) expression_opt -> . expression
    (97) expression_opt -> . empty
    (89) expression -> . assignment_expression
    (90) expression -> . expression COMMA assignment_expression
    (124) empty -> .
    (98) assignment_expression -> . binary_expression
    (99) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (110) binary_expression -> . cast_expression
    (111) binary_expression -> . binary_expression TIMES binary_expression
    (112) binary_expression -> . binary_expression DIVIDE binary_expression
    (113) binary_expression -> . binary_expression MOD binary_expression
    (114) binary_expression -> . binary_expression PLUS binary_expression
    (115) binary_expression -> . binary_expression MINUS binary_expression
    (116) binary_expression -> . binary_expression LT binary_expression
    (117) binary_expression -> . binary_expression LE binary_expression
    (118) binary_expression -> . binary_expression HT binary_expression
    (119) binary_expression -> . binary_expression HE binary_expression
    (120) binary_expression -> . binary_expression EQUALS binary_expression
    (121) binary_expression -> . binary_expression DIFF binary_expression
    (122) binary_expression -> . binary_expression AND binary_expression
    (123) binary_expression -> . binary_expression OR binary_expression
    (106) unary_expression -> . postfix_expression
    (107) unary_expression -> . PLUSPLUS unary_expression
    (108) unary_expression -> . MINUSMINUS unary_expression
    (109) unary_expression -> . unary_operator cast_expression
    (33) cast_expression -> . unary_expression
    (34) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (28) postfix_expression -> . primary_expression
    (29) postfix_expression -> . postfix_expression PLUSPLUS
    (30) postfix_expression -> . postfix_expression MINUSMINUS
    (31) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (32) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (36) unary_operator -> . ADDRESS
    (37) unary_operator -> . TIMES
    (38) unary_operator -> . PLUS
    (39) unary_operator -> . MINUS
    (40) unary_operator -> . NOT
    (92) primary_expression -> . identifier
    (93) primary_expression -> . constant
    (94) primary_expression -> . string_literal
    (95) primary_expression -> . LPAREN expression RPAREN
    (35) identifier -> . ID
    (48) constant -> . INT_CONST
    (49) constant -> . FLOAT_CONST
    (50) constant -> . CHAR_CONST
    (91) string_literal -> . STRING

    IF              shift and go to state 97
    BREAK           shift and go to state 99
    RETURN          shift and go to state 100
    PRINT           shift and go to state 101
    ASSERT          shift and go to state 102
    READ            shift and go to state 103
    WHILE           shift and go to state 104
    FOR             shift and go to state 105
    LBRACE          shift and go to state 40
    SEMI            reduce using rule 124 (empty -> .)
    PLUSPLUS        shift and go to state 61
    MINUSMINUS      shift and go to state 62
    LPAREN          shift and go to state 59
    ADDRESS         shift and go to state 65
    TIMES           shift and go to state 55
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    NOT             shift and go to state 66
    ID              shift and go to state 18
    INT_CONST       shift and go to state 70
    FLOAT_CONST     shift and go to state 71
    CHAR_CONST      shift and go to state 72
    STRING          shift and go to state 73

    expression                     shift and go to state 98
    statement                      shift and go to state 208
    expression_statement           shift and go to state 88
    selection_statement            shift and go to state 89
    jump_statement                 shift and go to state 90
    print_statement                shift and go to state 91
    assert_statement               shift and go to state 92
    read_statement                 shift and go to state 93
    iteration_statement            shift and go to state 94
    compound_statement             shift and go to state 95
    expression_opt                 shift and go to state 96
    empty                          shift and go to state 147
    assignment_expression          shift and go to state 106
    binary_expression              shift and go to state 79
    unary_expression               shift and go to state 80
    cast_expression                shift and go to state 54
    postfix_expression             shift and go to state 60
    unary_operator                 shift and go to state 63
    primary_expression             shift and go to state 64
    identifier                     shift and go to state 67
    constant                       shift and go to state 68
    string_literal                 shift and go to state 69

state 202

    (60) iteration_statement -> FOR LPAREN expression_opt SEMI . expression_opt SEMI expression_opt RPAREN statement
    (96) expression_opt -> . expression
    (97) expression_opt -> . empty
    (89) expression -> . assignment_expression
    (90) expression -> . expression COMMA assignment_expression
    (124) empty -> .
    (98) assignment_expression -> . binary_expression
    (99) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (110) binary_expression -> . cast_expression
    (111) binary_expression -> . binary_expression TIMES binary_expression
    (112) binary_expression -> . binary_expression DIVIDE binary_expression
    (113) binary_expression -> . binary_expression MOD binary_expression
    (114) binary_expression -> . binary_expression PLUS binary_expression
    (115) binary_expression -> . binary_expression MINUS binary_expression
    (116) binary_expression -> . binary_expression LT binary_expression
    (117) binary_expression -> . binary_expression LE binary_expression
    (118) binary_expression -> . binary_expression HT binary_expression
    (119) binary_expression -> . binary_expression HE binary_expression
    (120) binary_expression -> . binary_expression EQUALS binary_expression
    (121) binary_expression -> . binary_expression DIFF binary_expression
    (122) binary_expression -> . binary_expression AND binary_expression
    (123) binary_expression -> . binary_expression OR binary_expression
    (106) unary_expression -> . postfix_expression
    (107) unary_expression -> . PLUSPLUS unary_expression
    (108) unary_expression -> . MINUSMINUS unary_expression
    (109) unary_expression -> . unary_operator cast_expression
    (33) cast_expression -> . unary_expression
    (34) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (28) postfix_expression -> . primary_expression
    (29) postfix_expression -> . postfix_expression PLUSPLUS
    (30) postfix_expression -> . postfix_expression MINUSMINUS
    (31) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (32) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (36) unary_operator -> . ADDRESS
    (37) unary_operator -> . TIMES
    (38) unary_operator -> . PLUS
    (39) unary_operator -> . MINUS
    (40) unary_operator -> . NOT
    (92) primary_expression -> . identifier
    (93) primary_expression -> . constant
    (94) primary_expression -> . string_literal
    (95) primary_expression -> . LPAREN expression RPAREN
    (35) identifier -> . ID
    (48) constant -> . INT_CONST
    (49) constant -> . FLOAT_CONST
    (50) constant -> . CHAR_CONST
    (91) string_literal -> . STRING

    SEMI            reduce using rule 124 (empty -> .)
    PLUSPLUS        shift and go to state 61
    MINUSMINUS      shift and go to state 62
    LPAREN          shift and go to state 59
    ADDRESS         shift and go to state 65
    TIMES           shift and go to state 55
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    NOT             shift and go to state 66
    ID              shift and go to state 18
    INT_CONST       shift and go to state 70
    FLOAT_CONST     shift and go to state 71
    CHAR_CONST      shift and go to state 72
    STRING          shift and go to state 73

    expression_opt                 shift and go to state 209
    expression                     shift and go to state 98
    empty                          shift and go to state 147
    assignment_expression          shift and go to state 106
    binary_expression              shift and go to state 79
    unary_expression               shift and go to state 80
    cast_expression                shift and go to state 54
    postfix_expression             shift and go to state 60
    unary_operator                 shift and go to state 63
    primary_expression             shift and go to state 64
    identifier                     shift and go to state 67
    constant                       shift and go to state 68
    string_literal                 shift and go to state 69

state 203

    (61) iteration_statement -> FOR LPAREN declaration expression_opt . SEMI expression_opt RPAREN statement

    SEMI            shift and go to state 210


state 204

    (65) argument_expression_list -> argument_expression_list COMMA assignment_expression .

    COMMA           reduce using rule 65 (argument_expression_list -> argument_expression_list COMMA assignment_expression .)
    RPAREN          reduce using rule 65 (argument_expression_list -> argument_expression_list COMMA assignment_expression .)


state 205

    (57) selection_statement -> IF LPAREN expression RPAREN statement .
    (58) selection_statement -> IF LPAREN expression RPAREN statement . ELSE statement

  ! shift/reduce conflict for ELSE resolved as shift
    IF              reduce using rule 57 (selection_statement -> IF LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 57 (selection_statement -> IF LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 57 (selection_statement -> IF LPAREN expression RPAREN statement .)
    PRINT           reduce using rule 57 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ASSERT          reduce using rule 57 (selection_statement -> IF LPAREN expression RPAREN statement .)
    READ            reduce using rule 57 (selection_statement -> IF LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 57 (selection_statement -> IF LPAREN expression RPAREN statement .)
    FOR             reduce using rule 57 (selection_statement -> IF LPAREN expression RPAREN statement .)
    LBRACE          reduce using rule 57 (selection_statement -> IF LPAREN expression RPAREN statement .)
    VOID            reduce using rule 57 (selection_statement -> IF LPAREN expression RPAREN statement .)
    INT             reduce using rule 57 (selection_statement -> IF LPAREN expression RPAREN statement .)
    FLOAT           reduce using rule 57 (selection_statement -> IF LPAREN expression RPAREN statement .)
    CHAR            reduce using rule 57 (selection_statement -> IF LPAREN expression RPAREN statement .)
    PLUSPLUS        reduce using rule 57 (selection_statement -> IF LPAREN expression RPAREN statement .)
    MINUSMINUS      reduce using rule 57 (selection_statement -> IF LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 57 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ADDRESS         reduce using rule 57 (selection_statement -> IF LPAREN expression RPAREN statement .)
    TIMES           reduce using rule 57 (selection_statement -> IF LPAREN expression RPAREN statement .)
    PLUS            reduce using rule 57 (selection_statement -> IF LPAREN expression RPAREN statement .)
    MINUS           reduce using rule 57 (selection_statement -> IF LPAREN expression RPAREN statement .)
    NOT             reduce using rule 57 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ID              reduce using rule 57 (selection_statement -> IF LPAREN expression RPAREN statement .)
    INT_CONST       reduce using rule 57 (selection_statement -> IF LPAREN expression RPAREN statement .)
    FLOAT_CONST     reduce using rule 57 (selection_statement -> IF LPAREN expression RPAREN statement .)
    CHAR_CONST      reduce using rule 57 (selection_statement -> IF LPAREN expression RPAREN statement .)
    STRING          reduce using rule 57 (selection_statement -> IF LPAREN expression RPAREN statement .)
    SEMI            reduce using rule 57 (selection_statement -> IF LPAREN expression RPAREN statement .)
    RBRACE          reduce using rule 57 (selection_statement -> IF LPAREN expression RPAREN statement .)
    ELSE            shift and go to state 211

  ! ELSE            [ reduce using rule 57 (selection_statement -> IF LPAREN expression RPAREN statement .) ]


state 206

    (71) print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .

    IF              reduce using rule 71 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    BREAK           reduce using rule 71 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    RETURN          reduce using rule 71 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    PRINT           reduce using rule 71 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    ASSERT          reduce using rule 71 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    READ            reduce using rule 71 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    WHILE           reduce using rule 71 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    FOR             reduce using rule 71 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    LBRACE          reduce using rule 71 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    VOID            reduce using rule 71 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    INT             reduce using rule 71 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    FLOAT           reduce using rule 71 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    CHAR            reduce using rule 71 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    PLUSPLUS        reduce using rule 71 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    MINUSMINUS      reduce using rule 71 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    LPAREN          reduce using rule 71 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    ADDRESS         reduce using rule 71 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    TIMES           reduce using rule 71 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    PLUS            reduce using rule 71 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    MINUS           reduce using rule 71 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    NOT             reduce using rule 71 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    ID              reduce using rule 71 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    INT_CONST       reduce using rule 71 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    FLOAT_CONST     reduce using rule 71 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    CHAR_CONST      reduce using rule 71 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    STRING          reduce using rule 71 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    SEMI            reduce using rule 71 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    RBRACE          reduce using rule 71 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)
    ELSE            reduce using rule 71 (print_statement -> PRINT LPAREN expression_opt RPAREN SEMI .)


state 207

    (72) read_statement -> READ LPAREN argument_expression_list RPAREN SEMI .

    IF              reduce using rule 72 (read_statement -> READ LPAREN argument_expression_list RPAREN SEMI .)
    BREAK           reduce using rule 72 (read_statement -> READ LPAREN argument_expression_list RPAREN SEMI .)
    RETURN          reduce using rule 72 (read_statement -> READ LPAREN argument_expression_list RPAREN SEMI .)
    PRINT           reduce using rule 72 (read_statement -> READ LPAREN argument_expression_list RPAREN SEMI .)
    ASSERT          reduce using rule 72 (read_statement -> READ LPAREN argument_expression_list RPAREN SEMI .)
    READ            reduce using rule 72 (read_statement -> READ LPAREN argument_expression_list RPAREN SEMI .)
    WHILE           reduce using rule 72 (read_statement -> READ LPAREN argument_expression_list RPAREN SEMI .)
    FOR             reduce using rule 72 (read_statement -> READ LPAREN argument_expression_list RPAREN SEMI .)
    LBRACE          reduce using rule 72 (read_statement -> READ LPAREN argument_expression_list RPAREN SEMI .)
    VOID            reduce using rule 72 (read_statement -> READ LPAREN argument_expression_list RPAREN SEMI .)
    INT             reduce using rule 72 (read_statement -> READ LPAREN argument_expression_list RPAREN SEMI .)
    FLOAT           reduce using rule 72 (read_statement -> READ LPAREN argument_expression_list RPAREN SEMI .)
    CHAR            reduce using rule 72 (read_statement -> READ LPAREN argument_expression_list RPAREN SEMI .)
    PLUSPLUS        reduce using rule 72 (read_statement -> READ LPAREN argument_expression_list RPAREN SEMI .)
    MINUSMINUS      reduce using rule 72 (read_statement -> READ LPAREN argument_expression_list RPAREN SEMI .)
    LPAREN          reduce using rule 72 (read_statement -> READ LPAREN argument_expression_list RPAREN SEMI .)
    ADDRESS         reduce using rule 72 (read_statement -> READ LPAREN argument_expression_list RPAREN SEMI .)
    TIMES           reduce using rule 72 (read_statement -> READ LPAREN argument_expression_list RPAREN SEMI .)
    PLUS            reduce using rule 72 (read_statement -> READ LPAREN argument_expression_list RPAREN SEMI .)
    MINUS           reduce using rule 72 (read_statement -> READ LPAREN argument_expression_list RPAREN SEMI .)
    NOT             reduce using rule 72 (read_statement -> READ LPAREN argument_expression_list RPAREN SEMI .)
    ID              reduce using rule 72 (read_statement -> READ LPAREN argument_expression_list RPAREN SEMI .)
    INT_CONST       reduce using rule 72 (read_statement -> READ LPAREN argument_expression_list RPAREN SEMI .)
    FLOAT_CONST     reduce using rule 72 (read_statement -> READ LPAREN argument_expression_list RPAREN SEMI .)
    CHAR_CONST      reduce using rule 72 (read_statement -> READ LPAREN argument_expression_list RPAREN SEMI .)
    STRING          reduce using rule 72 (read_statement -> READ LPAREN argument_expression_list RPAREN SEMI .)
    SEMI            reduce using rule 72 (read_statement -> READ LPAREN argument_expression_list RPAREN SEMI .)
    RBRACE          reduce using rule 72 (read_statement -> READ LPAREN argument_expression_list RPAREN SEMI .)
    ELSE            reduce using rule 72 (read_statement -> READ LPAREN argument_expression_list RPAREN SEMI .)


state 208

    (59) iteration_statement -> WHILE LPAREN expression RPAREN statement .

    IF              reduce using rule 59 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    BREAK           reduce using rule 59 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    RETURN          reduce using rule 59 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    PRINT           reduce using rule 59 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    ASSERT          reduce using rule 59 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    READ            reduce using rule 59 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    WHILE           reduce using rule 59 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    FOR             reduce using rule 59 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    LBRACE          reduce using rule 59 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    VOID            reduce using rule 59 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    INT             reduce using rule 59 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    FLOAT           reduce using rule 59 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    CHAR            reduce using rule 59 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    PLUSPLUS        reduce using rule 59 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    MINUSMINUS      reduce using rule 59 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    LPAREN          reduce using rule 59 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    ADDRESS         reduce using rule 59 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    TIMES           reduce using rule 59 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    PLUS            reduce using rule 59 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    MINUS           reduce using rule 59 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    NOT             reduce using rule 59 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    ID              reduce using rule 59 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    INT_CONST       reduce using rule 59 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    FLOAT_CONST     reduce using rule 59 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    CHAR_CONST      reduce using rule 59 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    STRING          reduce using rule 59 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    SEMI            reduce using rule 59 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    RBRACE          reduce using rule 59 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)
    ELSE            reduce using rule 59 (iteration_statement -> WHILE LPAREN expression RPAREN statement .)


state 209

    (60) iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt . SEMI expression_opt RPAREN statement

    SEMI            shift and go to state 212


state 210

    (61) iteration_statement -> FOR LPAREN declaration expression_opt SEMI . expression_opt RPAREN statement
    (96) expression_opt -> . expression
    (97) expression_opt -> . empty
    (89) expression -> . assignment_expression
    (90) expression -> . expression COMMA assignment_expression
    (124) empty -> .
    (98) assignment_expression -> . binary_expression
    (99) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (110) binary_expression -> . cast_expression
    (111) binary_expression -> . binary_expression TIMES binary_expression
    (112) binary_expression -> . binary_expression DIVIDE binary_expression
    (113) binary_expression -> . binary_expression MOD binary_expression
    (114) binary_expression -> . binary_expression PLUS binary_expression
    (115) binary_expression -> . binary_expression MINUS binary_expression
    (116) binary_expression -> . binary_expression LT binary_expression
    (117) binary_expression -> . binary_expression LE binary_expression
    (118) binary_expression -> . binary_expression HT binary_expression
    (119) binary_expression -> . binary_expression HE binary_expression
    (120) binary_expression -> . binary_expression EQUALS binary_expression
    (121) binary_expression -> . binary_expression DIFF binary_expression
    (122) binary_expression -> . binary_expression AND binary_expression
    (123) binary_expression -> . binary_expression OR binary_expression
    (106) unary_expression -> . postfix_expression
    (107) unary_expression -> . PLUSPLUS unary_expression
    (108) unary_expression -> . MINUSMINUS unary_expression
    (109) unary_expression -> . unary_operator cast_expression
    (33) cast_expression -> . unary_expression
    (34) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (28) postfix_expression -> . primary_expression
    (29) postfix_expression -> . postfix_expression PLUSPLUS
    (30) postfix_expression -> . postfix_expression MINUSMINUS
    (31) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (32) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (36) unary_operator -> . ADDRESS
    (37) unary_operator -> . TIMES
    (38) unary_operator -> . PLUS
    (39) unary_operator -> . MINUS
    (40) unary_operator -> . NOT
    (92) primary_expression -> . identifier
    (93) primary_expression -> . constant
    (94) primary_expression -> . string_literal
    (95) primary_expression -> . LPAREN expression RPAREN
    (35) identifier -> . ID
    (48) constant -> . INT_CONST
    (49) constant -> . FLOAT_CONST
    (50) constant -> . CHAR_CONST
    (91) string_literal -> . STRING

    RPAREN          reduce using rule 124 (empty -> .)
    PLUSPLUS        shift and go to state 61
    MINUSMINUS      shift and go to state 62
    LPAREN          shift and go to state 59
    ADDRESS         shift and go to state 65
    TIMES           shift and go to state 55
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    NOT             shift and go to state 66
    ID              shift and go to state 18
    INT_CONST       shift and go to state 70
    FLOAT_CONST     shift and go to state 71
    CHAR_CONST      shift and go to state 72
    STRING          shift and go to state 73

    expression_opt                 shift and go to state 213
    expression                     shift and go to state 98
    empty                          shift and go to state 147
    assignment_expression          shift and go to state 106
    binary_expression              shift and go to state 79
    unary_expression               shift and go to state 80
    cast_expression                shift and go to state 54
    postfix_expression             shift and go to state 60
    unary_operator                 shift and go to state 63
    primary_expression             shift and go to state 64
    identifier                     shift and go to state 67
    constant                       shift and go to state 68
    string_literal                 shift and go to state 69

state 211

    (58) selection_statement -> IF LPAREN expression RPAREN statement ELSE . statement
    (75) statement -> . expression_statement
    (76) statement -> . selection_statement
    (77) statement -> . jump_statement
    (78) statement -> . print_statement
    (79) statement -> . assert_statement
    (80) statement -> . read_statement
    (81) statement -> . iteration_statement
    (82) statement -> . compound_statement
    (73) expression_statement -> . expression_opt SEMI
    (57) selection_statement -> . IF LPAREN expression RPAREN statement
    (58) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (83) jump_statement -> . BREAK SEMI
    (84) jump_statement -> . RETURN expression SEMI
    (85) jump_statement -> . RETURN SEMI
    (71) print_statement -> . PRINT LPAREN expression_opt RPAREN SEMI
    (70) assert_statement -> . ASSERT expression SEMI
    (72) read_statement -> . READ LPAREN argument_expression_list RPAREN SEMI
    (59) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (60) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (61) iteration_statement -> . FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement
    (74) compound_statement -> . LBRACE block_item_list_opt RBRACE
    (96) expression_opt -> . expression
    (97) expression_opt -> . empty
    (89) expression -> . assignment_expression
    (90) expression -> . expression COMMA assignment_expression
    (124) empty -> .
    (98) assignment_expression -> . binary_expression
    (99) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (110) binary_expression -> . cast_expression
    (111) binary_expression -> . binary_expression TIMES binary_expression
    (112) binary_expression -> . binary_expression DIVIDE binary_expression
    (113) binary_expression -> . binary_expression MOD binary_expression
    (114) binary_expression -> . binary_expression PLUS binary_expression
    (115) binary_expression -> . binary_expression MINUS binary_expression
    (116) binary_expression -> . binary_expression LT binary_expression
    (117) binary_expression -> . binary_expression LE binary_expression
    (118) binary_expression -> . binary_expression HT binary_expression
    (119) binary_expression -> . binary_expression HE binary_expression
    (120) binary_expression -> . binary_expression EQUALS binary_expression
    (121) binary_expression -> . binary_expression DIFF binary_expression
    (122) binary_expression -> . binary_expression AND binary_expression
    (123) binary_expression -> . binary_expression OR binary_expression
    (106) unary_expression -> . postfix_expression
    (107) unary_expression -> . PLUSPLUS unary_expression
    (108) unary_expression -> . MINUSMINUS unary_expression
    (109) unary_expression -> . unary_operator cast_expression
    (33) cast_expression -> . unary_expression
    (34) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (28) postfix_expression -> . primary_expression
    (29) postfix_expression -> . postfix_expression PLUSPLUS
    (30) postfix_expression -> . postfix_expression MINUSMINUS
    (31) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (32) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (36) unary_operator -> . ADDRESS
    (37) unary_operator -> . TIMES
    (38) unary_operator -> . PLUS
    (39) unary_operator -> . MINUS
    (40) unary_operator -> . NOT
    (92) primary_expression -> . identifier
    (93) primary_expression -> . constant
    (94) primary_expression -> . string_literal
    (95) primary_expression -> . LPAREN expression RPAREN
    (35) identifier -> . ID
    (48) constant -> . INT_CONST
    (49) constant -> . FLOAT_CONST
    (50) constant -> . CHAR_CONST
    (91) string_literal -> . STRING

    IF              shift and go to state 97
    BREAK           shift and go to state 99
    RETURN          shift and go to state 100
    PRINT           shift and go to state 101
    ASSERT          shift and go to state 102
    READ            shift and go to state 103
    WHILE           shift and go to state 104
    FOR             shift and go to state 105
    LBRACE          shift and go to state 40
    SEMI            reduce using rule 124 (empty -> .)
    PLUSPLUS        shift and go to state 61
    MINUSMINUS      shift and go to state 62
    LPAREN          shift and go to state 59
    ADDRESS         shift and go to state 65
    TIMES           shift and go to state 55
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    NOT             shift and go to state 66
    ID              shift and go to state 18
    INT_CONST       shift and go to state 70
    FLOAT_CONST     shift and go to state 71
    CHAR_CONST      shift and go to state 72
    STRING          shift and go to state 73

    expression                     shift and go to state 98
    statement                      shift and go to state 214
    expression_statement           shift and go to state 88
    selection_statement            shift and go to state 89
    jump_statement                 shift and go to state 90
    print_statement                shift and go to state 91
    assert_statement               shift and go to state 92
    read_statement                 shift and go to state 93
    iteration_statement            shift and go to state 94
    compound_statement             shift and go to state 95
    expression_opt                 shift and go to state 96
    empty                          shift and go to state 147
    assignment_expression          shift and go to state 106
    binary_expression              shift and go to state 79
    unary_expression               shift and go to state 80
    cast_expression                shift and go to state 54
    postfix_expression             shift and go to state 60
    unary_operator                 shift and go to state 63
    primary_expression             shift and go to state 64
    identifier                     shift and go to state 67
    constant                       shift and go to state 68
    string_literal                 shift and go to state 69

state 212

    (60) iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI . expression_opt RPAREN statement
    (96) expression_opt -> . expression
    (97) expression_opt -> . empty
    (89) expression -> . assignment_expression
    (90) expression -> . expression COMMA assignment_expression
    (124) empty -> .
    (98) assignment_expression -> . binary_expression
    (99) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (110) binary_expression -> . cast_expression
    (111) binary_expression -> . binary_expression TIMES binary_expression
    (112) binary_expression -> . binary_expression DIVIDE binary_expression
    (113) binary_expression -> . binary_expression MOD binary_expression
    (114) binary_expression -> . binary_expression PLUS binary_expression
    (115) binary_expression -> . binary_expression MINUS binary_expression
    (116) binary_expression -> . binary_expression LT binary_expression
    (117) binary_expression -> . binary_expression LE binary_expression
    (118) binary_expression -> . binary_expression HT binary_expression
    (119) binary_expression -> . binary_expression HE binary_expression
    (120) binary_expression -> . binary_expression EQUALS binary_expression
    (121) binary_expression -> . binary_expression DIFF binary_expression
    (122) binary_expression -> . binary_expression AND binary_expression
    (123) binary_expression -> . binary_expression OR binary_expression
    (106) unary_expression -> . postfix_expression
    (107) unary_expression -> . PLUSPLUS unary_expression
    (108) unary_expression -> . MINUSMINUS unary_expression
    (109) unary_expression -> . unary_operator cast_expression
    (33) cast_expression -> . unary_expression
    (34) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (28) postfix_expression -> . primary_expression
    (29) postfix_expression -> . postfix_expression PLUSPLUS
    (30) postfix_expression -> . postfix_expression MINUSMINUS
    (31) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (32) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (36) unary_operator -> . ADDRESS
    (37) unary_operator -> . TIMES
    (38) unary_operator -> . PLUS
    (39) unary_operator -> . MINUS
    (40) unary_operator -> . NOT
    (92) primary_expression -> . identifier
    (93) primary_expression -> . constant
    (94) primary_expression -> . string_literal
    (95) primary_expression -> . LPAREN expression RPAREN
    (35) identifier -> . ID
    (48) constant -> . INT_CONST
    (49) constant -> . FLOAT_CONST
    (50) constant -> . CHAR_CONST
    (91) string_literal -> . STRING

    RPAREN          reduce using rule 124 (empty -> .)
    PLUSPLUS        shift and go to state 61
    MINUSMINUS      shift and go to state 62
    LPAREN          shift and go to state 59
    ADDRESS         shift and go to state 65
    TIMES           shift and go to state 55
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    NOT             shift and go to state 66
    ID              shift and go to state 18
    INT_CONST       shift and go to state 70
    FLOAT_CONST     shift and go to state 71
    CHAR_CONST      shift and go to state 72
    STRING          shift and go to state 73

    expression_opt                 shift and go to state 215
    expression                     shift and go to state 98
    empty                          shift and go to state 147
    assignment_expression          shift and go to state 106
    binary_expression              shift and go to state 79
    unary_expression               shift and go to state 80
    cast_expression                shift and go to state 54
    postfix_expression             shift and go to state 60
    unary_operator                 shift and go to state 63
    primary_expression             shift and go to state 64
    identifier                     shift and go to state 67
    constant                       shift and go to state 68
    string_literal                 shift and go to state 69

state 213

    (61) iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt . RPAREN statement

    RPAREN          shift and go to state 216


state 214

    (58) selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .

    IF              reduce using rule 58 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    BREAK           reduce using rule 58 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    RETURN          reduce using rule 58 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    PRINT           reduce using rule 58 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ASSERT          reduce using rule 58 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    READ            reduce using rule 58 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    WHILE           reduce using rule 58 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    FOR             reduce using rule 58 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LBRACE          reduce using rule 58 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    VOID            reduce using rule 58 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    INT             reduce using rule 58 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    FLOAT           reduce using rule 58 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    CHAR            reduce using rule 58 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    PLUSPLUS        reduce using rule 58 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    MINUSMINUS      reduce using rule 58 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    LPAREN          reduce using rule 58 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ADDRESS         reduce using rule 58 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    TIMES           reduce using rule 58 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    PLUS            reduce using rule 58 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    MINUS           reduce using rule 58 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    NOT             reduce using rule 58 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ID              reduce using rule 58 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    INT_CONST       reduce using rule 58 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    FLOAT_CONST     reduce using rule 58 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    CHAR_CONST      reduce using rule 58 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    STRING          reduce using rule 58 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    SEMI            reduce using rule 58 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    RBRACE          reduce using rule 58 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)
    ELSE            reduce using rule 58 (selection_statement -> IF LPAREN expression RPAREN statement ELSE statement .)


state 215

    (60) iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt . RPAREN statement

    RPAREN          shift and go to state 217


state 216

    (61) iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN . statement
    (75) statement -> . expression_statement
    (76) statement -> . selection_statement
    (77) statement -> . jump_statement
    (78) statement -> . print_statement
    (79) statement -> . assert_statement
    (80) statement -> . read_statement
    (81) statement -> . iteration_statement
    (82) statement -> . compound_statement
    (73) expression_statement -> . expression_opt SEMI
    (57) selection_statement -> . IF LPAREN expression RPAREN statement
    (58) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (83) jump_statement -> . BREAK SEMI
    (84) jump_statement -> . RETURN expression SEMI
    (85) jump_statement -> . RETURN SEMI
    (71) print_statement -> . PRINT LPAREN expression_opt RPAREN SEMI
    (70) assert_statement -> . ASSERT expression SEMI
    (72) read_statement -> . READ LPAREN argument_expression_list RPAREN SEMI
    (59) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (60) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (61) iteration_statement -> . FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement
    (74) compound_statement -> . LBRACE block_item_list_opt RBRACE
    (96) expression_opt -> . expression
    (97) expression_opt -> . empty
    (89) expression -> . assignment_expression
    (90) expression -> . expression COMMA assignment_expression
    (124) empty -> .
    (98) assignment_expression -> . binary_expression
    (99) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (110) binary_expression -> . cast_expression
    (111) binary_expression -> . binary_expression TIMES binary_expression
    (112) binary_expression -> . binary_expression DIVIDE binary_expression
    (113) binary_expression -> . binary_expression MOD binary_expression
    (114) binary_expression -> . binary_expression PLUS binary_expression
    (115) binary_expression -> . binary_expression MINUS binary_expression
    (116) binary_expression -> . binary_expression LT binary_expression
    (117) binary_expression -> . binary_expression LE binary_expression
    (118) binary_expression -> . binary_expression HT binary_expression
    (119) binary_expression -> . binary_expression HE binary_expression
    (120) binary_expression -> . binary_expression EQUALS binary_expression
    (121) binary_expression -> . binary_expression DIFF binary_expression
    (122) binary_expression -> . binary_expression AND binary_expression
    (123) binary_expression -> . binary_expression OR binary_expression
    (106) unary_expression -> . postfix_expression
    (107) unary_expression -> . PLUSPLUS unary_expression
    (108) unary_expression -> . MINUSMINUS unary_expression
    (109) unary_expression -> . unary_operator cast_expression
    (33) cast_expression -> . unary_expression
    (34) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (28) postfix_expression -> . primary_expression
    (29) postfix_expression -> . postfix_expression PLUSPLUS
    (30) postfix_expression -> . postfix_expression MINUSMINUS
    (31) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (32) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (36) unary_operator -> . ADDRESS
    (37) unary_operator -> . TIMES
    (38) unary_operator -> . PLUS
    (39) unary_operator -> . MINUS
    (40) unary_operator -> . NOT
    (92) primary_expression -> . identifier
    (93) primary_expression -> . constant
    (94) primary_expression -> . string_literal
    (95) primary_expression -> . LPAREN expression RPAREN
    (35) identifier -> . ID
    (48) constant -> . INT_CONST
    (49) constant -> . FLOAT_CONST
    (50) constant -> . CHAR_CONST
    (91) string_literal -> . STRING

    IF              shift and go to state 97
    BREAK           shift and go to state 99
    RETURN          shift and go to state 100
    PRINT           shift and go to state 101
    ASSERT          shift and go to state 102
    READ            shift and go to state 103
    WHILE           shift and go to state 104
    FOR             shift and go to state 105
    LBRACE          shift and go to state 40
    SEMI            reduce using rule 124 (empty -> .)
    PLUSPLUS        shift and go to state 61
    MINUSMINUS      shift and go to state 62
    LPAREN          shift and go to state 59
    ADDRESS         shift and go to state 65
    TIMES           shift and go to state 55
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    NOT             shift and go to state 66
    ID              shift and go to state 18
    INT_CONST       shift and go to state 70
    FLOAT_CONST     shift and go to state 71
    CHAR_CONST      shift and go to state 72
    STRING          shift and go to state 73

    expression_opt                 shift and go to state 96
    statement                      shift and go to state 218
    expression_statement           shift and go to state 88
    selection_statement            shift and go to state 89
    jump_statement                 shift and go to state 90
    print_statement                shift and go to state 91
    assert_statement               shift and go to state 92
    read_statement                 shift and go to state 93
    iteration_statement            shift and go to state 94
    compound_statement             shift and go to state 95
    expression                     shift and go to state 98
    empty                          shift and go to state 147
    assignment_expression          shift and go to state 106
    binary_expression              shift and go to state 79
    unary_expression               shift and go to state 80
    cast_expression                shift and go to state 54
    postfix_expression             shift and go to state 60
    unary_operator                 shift and go to state 63
    primary_expression             shift and go to state 64
    identifier                     shift and go to state 67
    constant                       shift and go to state 68
    string_literal                 shift and go to state 69

state 217

    (60) iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN . statement
    (75) statement -> . expression_statement
    (76) statement -> . selection_statement
    (77) statement -> . jump_statement
    (78) statement -> . print_statement
    (79) statement -> . assert_statement
    (80) statement -> . read_statement
    (81) statement -> . iteration_statement
    (82) statement -> . compound_statement
    (73) expression_statement -> . expression_opt SEMI
    (57) selection_statement -> . IF LPAREN expression RPAREN statement
    (58) selection_statement -> . IF LPAREN expression RPAREN statement ELSE statement
    (83) jump_statement -> . BREAK SEMI
    (84) jump_statement -> . RETURN expression SEMI
    (85) jump_statement -> . RETURN SEMI
    (71) print_statement -> . PRINT LPAREN expression_opt RPAREN SEMI
    (70) assert_statement -> . ASSERT expression SEMI
    (72) read_statement -> . READ LPAREN argument_expression_list RPAREN SEMI
    (59) iteration_statement -> . WHILE LPAREN expression RPAREN statement
    (60) iteration_statement -> . FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement
    (61) iteration_statement -> . FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement
    (74) compound_statement -> . LBRACE block_item_list_opt RBRACE
    (96) expression_opt -> . expression
    (97) expression_opt -> . empty
    (89) expression -> . assignment_expression
    (90) expression -> . expression COMMA assignment_expression
    (124) empty -> .
    (98) assignment_expression -> . binary_expression
    (99) assignment_expression -> . unary_expression assignment_operator assignment_expression
    (110) binary_expression -> . cast_expression
    (111) binary_expression -> . binary_expression TIMES binary_expression
    (112) binary_expression -> . binary_expression DIVIDE binary_expression
    (113) binary_expression -> . binary_expression MOD binary_expression
    (114) binary_expression -> . binary_expression PLUS binary_expression
    (115) binary_expression -> . binary_expression MINUS binary_expression
    (116) binary_expression -> . binary_expression LT binary_expression
    (117) binary_expression -> . binary_expression LE binary_expression
    (118) binary_expression -> . binary_expression HT binary_expression
    (119) binary_expression -> . binary_expression HE binary_expression
    (120) binary_expression -> . binary_expression EQUALS binary_expression
    (121) binary_expression -> . binary_expression DIFF binary_expression
    (122) binary_expression -> . binary_expression AND binary_expression
    (123) binary_expression -> . binary_expression OR binary_expression
    (106) unary_expression -> . postfix_expression
    (107) unary_expression -> . PLUSPLUS unary_expression
    (108) unary_expression -> . MINUSMINUS unary_expression
    (109) unary_expression -> . unary_operator cast_expression
    (33) cast_expression -> . unary_expression
    (34) cast_expression -> . LPAREN type_specifier RPAREN cast_expression
    (28) postfix_expression -> . primary_expression
    (29) postfix_expression -> . postfix_expression PLUSPLUS
    (30) postfix_expression -> . postfix_expression MINUSMINUS
    (31) postfix_expression -> . postfix_expression LBRACKET expression RBRACKET
    (32) postfix_expression -> . postfix_expression LPAREN argument_expression_opt RPAREN
    (36) unary_operator -> . ADDRESS
    (37) unary_operator -> . TIMES
    (38) unary_operator -> . PLUS
    (39) unary_operator -> . MINUS
    (40) unary_operator -> . NOT
    (92) primary_expression -> . identifier
    (93) primary_expression -> . constant
    (94) primary_expression -> . string_literal
    (95) primary_expression -> . LPAREN expression RPAREN
    (35) identifier -> . ID
    (48) constant -> . INT_CONST
    (49) constant -> . FLOAT_CONST
    (50) constant -> . CHAR_CONST
    (91) string_literal -> . STRING

    IF              shift and go to state 97
    BREAK           shift and go to state 99
    RETURN          shift and go to state 100
    PRINT           shift and go to state 101
    ASSERT          shift and go to state 102
    READ            shift and go to state 103
    WHILE           shift and go to state 104
    FOR             shift and go to state 105
    LBRACE          shift and go to state 40
    SEMI            reduce using rule 124 (empty -> .)
    PLUSPLUS        shift and go to state 61
    MINUSMINUS      shift and go to state 62
    LPAREN          shift and go to state 59
    ADDRESS         shift and go to state 65
    TIMES           shift and go to state 55
    PLUS            shift and go to state 56
    MINUS           shift and go to state 57
    NOT             shift and go to state 66
    ID              shift and go to state 18
    INT_CONST       shift and go to state 70
    FLOAT_CONST     shift and go to state 71
    CHAR_CONST      shift and go to state 72
    STRING          shift and go to state 73

    expression_opt                 shift and go to state 96
    statement                      shift and go to state 219
    expression_statement           shift and go to state 88
    selection_statement            shift and go to state 89
    jump_statement                 shift and go to state 90
    print_statement                shift and go to state 91
    assert_statement               shift and go to state 92
    read_statement                 shift and go to state 93
    iteration_statement            shift and go to state 94
    compound_statement             shift and go to state 95
    expression                     shift and go to state 98
    empty                          shift and go to state 147
    assignment_expression          shift and go to state 106
    binary_expression              shift and go to state 79
    unary_expression               shift and go to state 80
    cast_expression                shift and go to state 54
    postfix_expression             shift and go to state 60
    unary_operator                 shift and go to state 63
    primary_expression             shift and go to state 64
    identifier                     shift and go to state 67
    constant                       shift and go to state 68
    string_literal                 shift and go to state 69

state 218

    (61) iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .

    IF              reduce using rule 61 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    BREAK           reduce using rule 61 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    RETURN          reduce using rule 61 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    PRINT           reduce using rule 61 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    ASSERT          reduce using rule 61 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    READ            reduce using rule 61 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    WHILE           reduce using rule 61 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    FOR             reduce using rule 61 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    LBRACE          reduce using rule 61 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    VOID            reduce using rule 61 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    INT             reduce using rule 61 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    FLOAT           reduce using rule 61 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    CHAR            reduce using rule 61 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    PLUSPLUS        reduce using rule 61 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    MINUSMINUS      reduce using rule 61 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    LPAREN          reduce using rule 61 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    ADDRESS         reduce using rule 61 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    TIMES           reduce using rule 61 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    PLUS            reduce using rule 61 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    MINUS           reduce using rule 61 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    NOT             reduce using rule 61 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    ID              reduce using rule 61 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    INT_CONST       reduce using rule 61 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    FLOAT_CONST     reduce using rule 61 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    CHAR_CONST      reduce using rule 61 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    STRING          reduce using rule 61 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    SEMI            reduce using rule 61 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    RBRACE          reduce using rule 61 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)
    ELSE            reduce using rule 61 (iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement .)


state 219

    (60) iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .

    IF              reduce using rule 60 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    BREAK           reduce using rule 60 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    RETURN          reduce using rule 60 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    PRINT           reduce using rule 60 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    ASSERT          reduce using rule 60 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    READ            reduce using rule 60 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    WHILE           reduce using rule 60 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    FOR             reduce using rule 60 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    LBRACE          reduce using rule 60 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    VOID            reduce using rule 60 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    INT             reduce using rule 60 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    FLOAT           reduce using rule 60 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    CHAR            reduce using rule 60 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    PLUSPLUS        reduce using rule 60 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    MINUSMINUS      reduce using rule 60 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    LPAREN          reduce using rule 60 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    ADDRESS         reduce using rule 60 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    TIMES           reduce using rule 60 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    PLUS            reduce using rule 60 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    MINUS           reduce using rule 60 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    NOT             reduce using rule 60 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    ID              reduce using rule 60 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    INT_CONST       reduce using rule 60 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    FLOAT_CONST     reduce using rule 60 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    CHAR_CONST      reduce using rule 60 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    STRING          reduce using rule 60 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    SEMI            reduce using rule 60 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    RBRACE          reduce using rule 60 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)
    ELSE            reduce using rule 60 (iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement .)

WARNING: 
WARNING: Conflicts:
WARNING: 
WARNING: shift/reduce conflict for ELSE in state 205 resolved as shift
