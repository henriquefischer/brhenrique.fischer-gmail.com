
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORleftANDEQUALSDIFFleftHTHELTLEleftPLUSMINUSleftTIMESDIVIDEMODADDRESS AND ASSERT ASSIGN_DIVIDE ASSIGN_MINUS ASSIGN_MOD ASSIGN_PLUS ASSIGN_TIMES BREAK CHAR COMMA DIFF DIVIDE ELSE EQ EQUALS FLOAT FLOAT_CONST FOR HE HT ID IF INT INT_CONST LBRACE LBRACKET LE LPAREN LT MINUS MINUSMINUS MOD NOT OR PLUS PLUSPLUS PRINT RBRACE RBRACKET READ RETURN RPAREN SEMI STRING TIMES VOID WHILE program  : global_declaration_list\n         global_declaration_list : global_declaration\n                                    | global_declaration_list global_declaration\n         global_declaration  : declaration\n         global_declaration  : function_definition\n         declaration : decl_body SEMI\n         declaration_list    : declaration\n                                | declaration_list declaration\n         declaration_list_opt    : declaration_list\n                                    | empty\n         decl_body  : type_specifier init_declarator_list_opt\n         declarator  : direct_declarator\n         declarator : pointer direct_declarator\n         init_declarator : declarator\n                            | declarator EQ initializer\n         init_declarator_list    : init_declarator\n                                    | init_declarator_list COMMA init_declarator\n         init_declarator_list_opt    : init_declarator_list\n                                        | empty\n         direct_declarator : identifier\n         direct_declarator :  LPAREN declarator RPAREN\n         direct_declarator : direct_declarator LBRACKET constant_expression_opt RBRACKET\n         direct_declarator : direct_declarator LPAREN identifier_list_opt RPAREN\n                              | direct_declarator LPAREN parameter_list RPAREN\n         initializer : assignment_expression\n         initializer : LBRACE initializer_list RBRACE\n                        | LBRACE initializer_list COMMA RBRACE\n         postfix_expression : primary_expression\n         postfix_expression : postfix_expression PLUSPLUS\n                               | postfix_expression MINUSMINUS\n         postfix_expression  : postfix_expression LPAREN RPAREN\n                                | postfix_expression LPAREN argument_expression RPAREN\n         postfix_expression  : postfix_expression LBRACKET expression RBRACKET\n         cast_expression : unary_expression\n         cast_expression : LPAREN type_specifier RPAREN cast_expression\n         identifier : ID\n         identifier_list_opt : identifier_list\n                                | empty\n         identifier_list : identifier\n                            | identifier_list COMMA identifier\n         unary_operator : EQ\n                           | TIMES\n                           | PLUS\n                           | MINUS\n                           | NOT\n         type_specifier : VOID\n                           | CHAR\n                           | INT\n                           | FLOAT\n         constant_expression : binary_expression\n         constant_expression_opt : constant_expression\n                                    | empty\n         constant : INT_CONST\n         constant : FLOAT_CONST\n         constant : STRING\n         block_item  : declaration\n                        | statement\n         block_item_list : block_item\n                            | block_item_list block_item\n         selection_statement : IF LPAREN expression RPAREN statement\n         selection_statement : IF LPAREN expression RPAREN statement ELSE statement\n         initializer_list : initializer\n                             | initializer_list COMMA initializer\n         argument_expression : assignment_expression\n                                | argument_expression COMMA assignment_expression\n         function_definition : type_specifier declarator declaration_list_opt compound_statement\n         function_definition : declarator declaration_list_opt compound_statement\n         assert_statement : ASSERT expression SEMI\n         print_statement : PRINT LPAREN expression_opt RPAREN SEMI\n         read_statement : READ LPAREN argument_expression RPAREN SEMI\n         expression_statement : expression_opt SEMI\n         compound_statement   : LBRACE block_item_list RBRACE\n         statement   : expression_statement\n                        | selection_statement\n                        | jump_statement\n                        | print_statement\n                        | assert_statement\n                        | read_statement\n                        | iteration_statement\n                        | compound_statement\n         jump_statement  : BREAK SEMI\n         jump_statement  : RETURN expression_opt SEMI\n         iteration_statement : WHILE LPAREN expression RPAREN statement\n         iteration_statement : FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement\n         iteration_statement : FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement\n         pointer : TIMES\n                    | TIMES pointer\n         parameter_declaration  : type_specifier declarator\n         parameter_list  : parameter_declaration\n                            | parameter_list COMMA parameter_declaration\n         expression  : assignment_expression\n         expression  : expression COMMA assignment_expression\n         primary_expression : identifier\n                               | constant\n         primary_expression : LPAREN expression RPAREN\n         expression_opt : expression\n                           | empty\n         assignment_expression   : binary_expression\n                                    | unary_expression assignment_operator assignment_expression\n         assignment_operator : EQ\n                                | ASSIGN_TIMES\n                                | ASSIGN_DIVIDE\n                                | ASSIGN_MOD\n                                | ASSIGN_PLUS\n                                | ASSIGN_MINUS\n         unary_expression : postfix_expression\n         unary_expression    : PLUSPLUS unary_expression\n                                | MINUSMINUS unary_expression\n                                | unary_operator cast_expression\n         binary_expression   : cast_expression\n                                | binary_expression TIMES binary_expression\n                                | binary_expression DIVIDE binary_expression\n                                | binary_expression MOD binary_expression\n                                | binary_expression PLUS binary_expression\n                                | binary_expression MINUS binary_expression\n                                | binary_expression LE binary_expression\n                                | binary_expression LT binary_expression\n                                | binary_expression HE binary_expression\n                                | binary_expression HT binary_expression\n                                | binary_expression EQUALS binary_expression\n                                | binary_expression DIFF binary_expression\n                                | binary_expression AND binary_expression\n                                | binary_expression OR binary_expression\n         empty :\n        '
    
_lr_action_items = {'ASSIGN_DIVIDE':([12,39,40,41,43,44,48,52,60,75,80,83,84,85,90,144,147,178,179,181,],[-36,-94,-34,-54,-53,-106,-55,-28,-93,133,-29,-30,-109,-107,-108,-31,-95,-33,-32,-35,]),'RETURN':([30,69,110,116,117,118,119,120,121,122,126,127,129,131,170,171,172,174,183,186,196,199,200,201,202,205,208,210,211,212,213,214,],[-6,111,-73,-76,-79,-77,-80,-74,-57,-78,-56,111,-75,-58,-71,-72,-59,-81,-82,-68,111,111,-70,-69,-83,-60,111,111,-61,111,-85,-84,]),'READ':([30,69,110,116,117,118,119,120,121,122,126,127,129,131,170,171,172,174,183,186,196,199,200,201,202,205,208,210,211,212,213,214,],[-6,112,-73,-76,-79,-77,-80,-74,-57,-78,-56,112,-75,-58,-71,-72,-59,-81,-82,-68,112,112,-70,-69,-83,-60,112,112,-61,112,-85,-84,]),'VOID':([0,1,5,8,11,12,13,17,18,19,23,25,27,30,33,34,53,68,69,70,72,74,104,105,106,107,110,116,117,118,119,120,121,122,126,127,129,131,169,170,171,172,174,183,186,200,201,202,205,211,213,214,],[2,-2,2,-12,-4,-36,-5,2,-20,-13,2,-3,2,-6,2,-7,2,-21,2,-67,-8,-66,-22,-23,-24,2,-73,-76,-79,-77,-80,-74,-57,-78,-56,2,-75,-58,2,-71,-72,-59,-81,-82,-68,-70,-69,-83,-60,-61,-85,-84,]),'ASSIGN_MINUS':([12,39,40,41,43,44,48,52,60,75,80,83,84,85,90,144,147,178,179,181,],[-36,-94,-34,-54,-53,-106,-55,-28,-93,136,-29,-30,-109,-107,-108,-31,-95,-33,-32,-35,]),'LBRACKET':([8,12,18,19,39,41,43,44,48,52,60,68,80,83,104,105,106,144,147,178,179,],[26,-36,-20,26,-94,-54,-53,81,-55,-28,-93,-21,-29,-30,-22,-23,-24,-31,-95,-33,-32,]),'WHILE':([30,69,110,116,117,118,119,120,121,122,126,127,129,131,170,171,172,174,183,186,196,199,200,201,202,205,208,210,211,212,213,214,],[-6,115,-73,-76,-79,-77,-80,-74,-57,-78,-56,115,-75,-58,-71,-72,-59,-81,-82,-68,115,115,-70,-69,-83,-60,115,115,-61,115,-85,-84,]),'FLOAT_CONST':([26,30,38,42,45,46,50,51,53,54,55,59,69,78,81,82,86,91,92,93,94,95,96,97,98,99,100,101,102,103,110,111,114,116,117,118,119,120,121,122,126,127,129,131,133,134,135,136,137,138,139,146,148,165,166,168,169,170,171,172,173,174,176,180,183,186,189,196,197,199,200,201,202,204,205,206,208,210,211,212,213,214,],[41,-6,41,-44,-43,41,41,-42,41,41,-41,-45,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,41,-73,41,41,-76,-79,-77,-80,-74,-57,-78,-56,41,-75,-58,-102,-103,-104,-105,-101,41,-100,41,41,41,41,41,41,-71,-72,-59,41,-81,41,41,-82,-68,41,41,41,41,-70,-69,-83,41,-60,41,41,41,-61,41,-85,-84,]),'PRINT':([30,69,110,116,117,118,119,120,121,122,126,127,129,131,170,171,172,174,183,186,196,199,200,201,202,205,208,210,211,212,213,214,],[-6,113,-73,-76,-79,-77,-80,-74,-57,-78,-56,113,-75,-58,-71,-72,-59,-81,-82,-68,113,113,-70,-69,-83,-60,113,113,-61,113,-85,-84,]),'DIFF':([12,39,40,41,43,44,47,48,52,56,60,75,79,80,83,84,85,90,144,147,149,150,151,152,153,154,155,156,157,158,159,160,161,178,179,181,],[-36,-94,-34,-54,-53,-106,-110,-55,-28,100,-93,-34,100,-29,-30,-109,-107,-108,-31,-95,-122,100,-116,-112,-120,-119,-111,-117,-114,-121,-118,-115,-113,-33,-32,-35,]),'MINUS':([12,26,30,38,39,40,41,42,43,44,45,46,47,48,50,51,52,53,54,55,56,59,60,69,75,78,79,80,81,82,83,84,85,86,90,91,92,93,94,95,96,97,98,99,100,101,102,103,110,111,114,116,117,118,119,120,121,122,126,127,129,131,133,134,135,136,137,138,139,144,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,165,166,168,169,170,171,172,173,174,176,178,179,180,181,183,186,189,196,197,199,200,201,202,204,205,206,208,210,211,212,213,214,],[-36,42,-6,42,-94,-34,-54,-44,-53,-106,-43,42,-110,-55,42,-42,-28,42,42,-41,102,-45,-93,42,-34,42,102,-29,42,42,-30,-109,-107,42,-108,42,42,42,42,42,42,42,42,42,42,42,42,42,-73,42,42,-76,-79,-77,-80,-74,-57,-78,-56,42,-75,-58,-102,-103,-104,-105,-101,42,-100,-31,42,-95,42,102,102,102,-112,102,102,-111,102,-114,102,102,-115,-113,42,42,42,42,-71,-72,-59,42,-81,42,-33,-32,42,-35,-82,-68,42,42,42,42,-70,-69,-83,42,-60,42,42,42,-61,42,-85,-84,]),'HE':([12,39,40,41,43,44,47,48,52,56,60,75,79,80,83,84,85,90,144,147,149,150,151,152,153,154,155,156,157,158,159,160,161,178,179,181,],[-36,-94,-34,-54,-53,-106,-110,-55,-28,101,-93,-34,101,-29,-30,-109,-107,-108,-31,-95,101,101,-116,-112,101,-119,-111,-117,-114,101,-118,-115,-113,-33,-32,-35,]),'ASSIGN_PLUS':([12,39,40,41,43,44,48,52,60,75,80,83,84,85,90,144,147,178,179,181,],[-36,-94,-34,-54,-53,-106,-55,-28,-93,135,-29,-30,-109,-107,-108,-31,-95,-33,-32,-35,]),'INT_CONST':([26,30,38,42,45,46,50,51,53,54,55,59,69,78,81,82,86,91,92,93,94,95,96,97,98,99,100,101,102,103,110,111,114,116,117,118,119,120,121,122,126,127,129,131,133,134,135,136,137,138,139,146,148,165,166,168,169,170,171,172,173,174,176,180,183,186,189,196,197,199,200,201,202,204,205,206,208,210,211,212,213,214,],[43,-6,43,-44,-43,43,43,-42,43,43,-41,-45,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,43,-73,43,43,-76,-79,-77,-80,-74,-57,-78,-56,43,-75,-58,-102,-103,-104,-105,-101,43,-100,43,43,43,43,43,43,-71,-72,-59,43,-81,43,43,-82,-68,43,43,43,43,-70,-69,-83,43,-60,43,43,43,-61,43,-85,-84,]),'LE':([12,39,40,41,43,44,47,48,52,56,60,75,79,80,83,84,85,90,144,147,149,150,151,152,153,154,155,156,157,158,159,160,161,178,179,181,],[-36,-94,-34,-54,-53,-106,-110,-55,-28,93,-93,-34,93,-29,-30,-109,-107,-108,-31,-95,93,93,-116,-112,93,-119,-111,-117,-114,93,-118,-115,-113,-33,-32,-35,]),'RPAREN':([2,7,8,12,14,16,18,19,27,29,39,40,41,43,44,47,48,52,60,61,62,63,64,66,67,68,75,79,80,82,83,84,85,87,88,89,90,104,105,106,108,123,132,143,144,145,147,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,166,175,178,179,181,182,184,185,187,190,193,204,206,207,209,],[-46,-47,-12,-36,-48,-49,-20,-13,-124,68,-94,-34,-54,-53,-106,-110,-55,-28,-93,105,-39,106,-89,-37,-38,-21,-34,-98,-29,144,-30,-109,-107,-91,146,147,-108,-22,-23,-24,-88,-97,-96,-64,-31,179,-95,-122,-123,-116,-112,-120,-119,-111,-117,-114,-121,-118,-115,-113,-90,-40,-124,-99,-33,-32,-35,-92,194,195,196,199,-65,-124,-124,210,212,]),'SEMI':([2,4,7,8,12,14,15,16,18,19,20,21,22,23,24,30,32,39,40,41,43,44,47,48,52,60,68,69,71,73,75,76,77,79,80,83,84,85,87,90,104,105,106,110,111,116,117,118,119,120,121,122,123,125,126,127,129,130,131,132,144,147,149,150,151,152,153,154,155,156,157,158,159,160,161,164,167,169,170,171,172,174,175,177,178,179,181,182,183,186,188,189,192,194,195,196,197,198,199,200,201,202,203,205,208,210,211,212,213,214,],[-46,-124,-47,-12,-36,-48,30,-49,-20,-13,-18,-11,-19,-14,-16,-6,-124,-94,-34,-54,-53,-106,-110,-55,-28,-93,-21,-124,-14,-17,-34,-15,-25,-98,-29,-30,-109,-107,-91,-108,-22,-23,-24,-73,-124,-76,-79,-77,-80,-74,-57,-78,-97,170,-56,-124,-75,174,-58,-96,-31,-95,-122,-123,-116,-112,-120,-119,-111,-117,-114,-121,-118,-115,-113,183,186,-124,-71,-72,-59,-81,-99,-26,-33,-32,-35,-92,-82,-68,197,-124,-27,200,201,-124,-124,204,-124,-70,-69,-83,206,-60,-124,-124,-61,-124,-85,-84,]),'LT':([12,39,40,41,43,44,47,48,52,56,60,75,79,80,83,84,85,90,144,147,149,150,151,152,153,154,155,156,157,158,159,160,161,178,179,181,],[-36,-94,-34,-54,-53,-106,-110,-55,-28,98,-93,-34,98,-29,-30,-109,-107,-108,-31,-95,98,98,-116,-112,98,-119,-111,-117,-114,98,-118,-115,-113,-33,-32,-35,]),'COMMA':([8,12,18,19,20,23,24,39,40,41,43,44,47,48,52,60,62,63,64,66,68,71,73,75,76,77,79,80,83,84,85,87,89,90,104,105,106,108,132,140,141,142,143,144,145,147,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,167,175,177,178,179,181,182,184,187,190,191,192,193,],[-12,-36,-20,-13,36,-14,-16,-94,-34,-54,-53,-106,-110,-55,-28,-93,-39,107,-89,109,-21,-14,-17,-34,-15,-25,-98,-29,-30,-109,-107,-91,148,-108,-22,-23,-24,-88,148,-62,176,148,-64,-31,180,-95,-122,-123,-116,-112,-120,-119,-111,-117,-114,-121,-118,-115,-113,-90,-40,148,-99,-26,-33,-32,-35,-92,180,148,148,-63,-27,-65,]),'PLUS':([12,26,30,38,39,40,41,42,43,44,45,46,47,48,50,51,52,53,54,55,56,59,60,69,75,78,79,80,81,82,83,84,85,86,90,91,92,93,94,95,96,97,98,99,100,101,102,103,110,111,114,116,117,118,119,120,121,122,126,127,129,131,133,134,135,136,137,138,139,144,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,165,166,168,169,170,171,172,173,174,176,178,179,180,181,183,186,189,196,197,199,200,201,202,204,205,206,208,210,211,212,213,214,],[-36,45,-6,45,-94,-34,-54,-44,-53,-106,-43,45,-110,-55,45,-42,-28,45,45,-41,99,-45,-93,45,-34,45,99,-29,45,45,-30,-109,-107,45,-108,45,45,45,45,45,45,45,45,45,45,45,45,45,-73,45,45,-76,-79,-77,-80,-74,-57,-78,-56,45,-75,-58,-102,-103,-104,-105,-101,45,-100,-31,45,-95,45,99,99,99,-112,99,99,-111,99,-114,99,99,-115,-113,45,45,45,45,-71,-72,-59,45,-81,45,-33,-32,45,-35,-82,-68,45,45,45,45,-70,-69,-83,45,-60,45,45,45,-61,45,-85,-84,]),'STRING':([26,30,38,42,45,46,50,51,53,54,55,59,69,78,81,82,86,91,92,93,94,95,96,97,98,99,100,101,102,103,110,111,114,116,117,118,119,120,121,122,126,127,129,131,133,134,135,136,137,138,139,146,148,165,166,168,169,170,171,172,173,174,176,180,183,186,189,196,197,199,200,201,202,204,205,206,208,210,211,212,213,214,],[48,-6,48,-44,-43,48,48,-42,48,48,-41,-45,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-73,48,48,-76,-79,-77,-80,-74,-57,-78,-56,48,-75,-58,-102,-103,-104,-105,-101,48,-100,48,48,48,48,48,48,-71,-72,-59,48,-81,48,48,-82,-68,48,48,48,48,-70,-69,-83,48,-60,48,48,48,-61,48,-85,-84,]),'$end':([1,5,6,11,13,25,30,70,74,171,],[-2,-1,0,-4,-5,-3,-6,-67,-66,-72,]),'ASSIGN_MOD':([12,39,40,41,43,44,48,52,60,75,80,83,84,85,90,144,147,178,179,181,],[-36,-94,-34,-54,-53,-106,-55,-28,-93,134,-29,-30,-109,-107,-108,-31,-95,-33,-32,-35,]),'DIVIDE':([12,39,40,41,43,44,47,48,52,56,60,75,79,80,83,84,85,90,144,147,149,150,151,152,153,154,155,156,157,158,159,160,161,178,179,181,],[-36,-94,-34,-54,-53,-106,-110,-55,-28,94,-93,-34,94,-29,-30,-109,-107,-108,-31,-95,94,94,94,-112,94,94,-111,94,94,94,94,94,-113,-33,-32,-35,]),'FOR':([30,69,110,116,117,118,119,120,121,122,126,127,129,131,170,171,172,174,183,186,196,199,200,201,202,205,208,210,211,212,213,214,],[-6,124,-73,-76,-79,-77,-80,-74,-57,-78,-56,124,-75,-58,-71,-72,-59,-81,-82,-68,124,124,-70,-69,-83,-60,124,124,-61,124,-85,-84,]),'PLUSPLUS':([12,26,30,38,39,41,42,43,44,45,46,48,50,51,52,53,54,55,59,60,69,78,80,81,82,83,86,91,92,93,94,95,96,97,98,99,100,101,102,103,110,111,114,116,117,118,119,120,121,122,126,127,129,131,133,134,135,136,137,138,139,144,146,147,148,165,166,168,169,170,171,172,173,174,176,178,179,180,183,186,189,196,197,199,200,201,202,204,205,206,208,210,211,212,213,214,],[-36,50,-6,50,-94,-54,-44,-53,80,-43,50,-55,50,-42,-28,50,50,-41,-45,-93,50,50,-29,50,50,-30,50,50,50,50,50,50,50,50,50,50,50,50,50,50,-73,50,50,-76,-79,-77,-80,-74,-57,-78,-56,50,-75,-58,-102,-103,-104,-105,-101,50,-100,-31,50,-95,50,50,50,50,50,-71,-72,-59,50,-81,50,-33,-32,50,-82,-68,50,50,50,50,-70,-69,-83,50,-60,50,50,50,-61,50,-85,-84,]),'EQUALS':([12,39,40,41,43,44,47,48,52,56,60,75,79,80,83,84,85,90,144,147,149,150,151,152,153,154,155,156,157,158,159,160,161,178,179,181,],[-36,-94,-34,-54,-53,-106,-110,-55,-28,95,-93,-34,95,-29,-30,-109,-107,-108,-31,-95,-122,95,-116,-112,-120,-119,-111,-117,-114,-121,-118,-115,-113,-33,-32,-35,]),'RBRACE':([12,30,39,40,41,43,44,47,48,52,60,75,77,79,80,83,84,85,90,110,116,117,118,119,120,121,122,126,127,129,131,140,141,144,147,149,150,151,152,153,154,155,156,157,158,159,160,161,170,171,172,174,175,176,177,178,179,181,183,186,191,192,200,201,202,205,211,213,214,],[-36,-6,-94,-34,-54,-53,-106,-110,-55,-28,-93,-34,-25,-98,-29,-30,-109,-107,-108,-73,-76,-79,-77,-80,-74,-57,-78,-56,171,-75,-58,-62,177,-31,-95,-122,-123,-116,-112,-120,-119,-111,-117,-114,-121,-118,-115,-113,-71,-72,-59,-81,-99,192,-26,-33,-32,-35,-82,-68,-63,-27,-70,-69,-83,-60,-61,-85,-84,]),'TIMES':([0,1,2,4,5,7,9,10,11,12,13,14,16,25,26,30,32,36,38,39,40,41,42,43,44,45,46,47,48,50,51,52,53,54,55,56,59,60,65,69,70,74,75,78,79,80,81,82,83,84,85,86,90,91,92,93,94,95,96,97,98,99,100,101,102,103,110,111,114,116,117,118,119,120,121,122,126,127,129,131,133,134,135,136,137,138,139,144,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,165,166,168,169,170,171,172,173,174,176,178,179,180,181,183,186,189,196,197,199,200,201,202,204,205,206,208,210,211,212,213,214,],[9,-2,-46,9,9,-47,9,9,-4,-36,-5,-48,-49,-3,51,-6,9,9,51,-94,-34,-54,-44,-53,-106,-43,51,-110,-55,51,-42,-28,51,51,-41,97,-45,-93,9,51,-67,-66,-34,51,97,-29,51,51,-30,-109,-107,51,-108,51,51,51,51,51,51,51,51,51,51,51,51,51,-73,51,51,-76,-79,-77,-80,-74,-57,-78,-56,51,-75,-58,-102,-103,-104,-105,-101,51,-100,-31,51,-95,51,97,97,97,-112,97,97,-111,97,97,97,97,97,-113,51,51,51,51,-71,-72,-59,51,-81,51,-33,-32,51,-35,-82,-68,51,51,51,51,-70,-69,-83,51,-60,51,51,51,-61,51,-85,-84,]),'ASSERT':([30,69,110,116,117,118,119,120,121,122,126,127,129,131,170,171,172,174,183,186,196,199,200,201,202,205,208,210,211,212,213,214,],[-6,114,-73,-76,-79,-77,-80,-74,-57,-78,-56,114,-75,-58,-71,-72,-59,-81,-82,-68,114,114,-70,-69,-83,-60,114,114,-61,114,-85,-84,]),'ASSIGN_TIMES':([12,39,40,41,43,44,48,52,60,75,80,83,84,85,90,144,147,178,179,181,],[-36,-94,-34,-54,-53,-106,-55,-28,-93,137,-29,-30,-109,-107,-108,-31,-95,-33,-32,-35,]),'HT':([12,39,40,41,43,44,47,48,52,56,60,75,79,80,83,84,85,90,144,147,149,150,151,152,153,154,155,156,157,158,159,160,161,178,179,181,],[-36,-94,-34,-54,-53,-106,-110,-55,-28,96,-93,-34,96,-29,-30,-109,-107,-108,-31,-95,96,96,-116,-112,96,-119,-111,-117,-114,96,-118,-115,-113,-33,-32,-35,]),'LPAREN':([0,1,2,3,4,5,7,8,9,10,11,12,13,14,16,18,19,25,26,28,30,32,36,38,39,41,42,43,44,45,46,48,50,51,52,53,54,55,59,60,65,68,69,70,74,78,80,81,82,83,86,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,110,111,112,113,114,115,116,117,118,119,120,121,122,124,126,127,128,129,131,133,134,135,136,137,138,139,144,146,147,148,165,166,168,169,170,171,172,173,174,176,178,179,180,183,186,189,196,197,199,200,201,202,204,205,206,208,210,211,212,213,214,],[10,-2,-46,10,10,10,-47,27,-86,10,-4,-36,-5,-48,-49,-20,27,-3,53,-87,-6,10,10,53,-94,-54,-44,-53,82,-43,53,-55,86,-42,-28,53,86,-41,-45,-93,10,-21,53,-67,-66,53,-29,53,53,-30,53,53,53,53,53,53,53,53,53,53,53,53,53,53,-22,-23,-24,-73,53,165,166,53,168,-76,-79,-77,-80,-74,-57,-78,169,-56,53,173,-75,-58,-102,-103,-104,-105,-101,53,-100,-31,53,-95,53,53,53,53,53,-71,-72,-59,53,-81,53,-33,-32,53,-82,-68,53,53,53,53,-70,-69,-83,53,-60,53,53,53,-61,53,-85,-84,]),'MINUSMINUS':([12,26,30,38,39,41,42,43,44,45,46,48,50,51,52,53,54,55,59,60,69,78,80,81,82,83,86,91,92,93,94,95,96,97,98,99,100,101,102,103,110,111,114,116,117,118,119,120,121,122,126,127,129,131,133,134,135,136,137,138,139,144,146,147,148,165,166,168,169,170,171,172,173,174,176,178,179,180,183,186,189,196,197,199,200,201,202,204,205,206,208,210,211,212,213,214,],[-36,54,-6,54,-94,-54,-44,-53,83,-43,54,-55,54,-42,-28,54,54,-41,-45,-93,54,54,-29,54,54,-30,54,54,54,54,54,54,54,54,54,54,54,54,54,54,-73,54,54,-76,-79,-77,-80,-74,-57,-78,-56,54,-75,-58,-102,-103,-104,-105,-101,54,-100,-31,54,-95,54,54,54,54,54,-71,-72,-59,54,-81,54,-33,-32,54,-82,-68,54,54,54,54,-70,-69,-83,54,-60,54,54,54,-61,54,-85,-84,]),'ELSE':([110,116,117,118,119,120,122,129,170,171,174,183,186,200,201,202,205,211,213,214,],[-73,-76,-79,-77,-80,-74,-78,-75,-71,-72,-81,-82,-68,-70,-69,-83,208,-61,-85,-84,]),'EQ':([8,12,18,19,23,26,30,38,39,40,41,42,43,44,45,46,48,50,51,52,53,54,55,59,60,68,69,71,75,78,80,81,82,83,84,85,86,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,110,111,114,116,117,118,119,120,121,122,126,127,129,131,133,134,135,136,137,138,139,144,146,147,148,165,166,168,169,170,171,172,173,174,176,178,179,180,181,183,186,189,196,197,199,200,201,202,204,205,206,208,210,211,212,213,214,],[-12,-36,-20,-13,38,55,-6,55,-94,-34,-54,-44,-53,-106,-43,55,-55,55,-42,-28,55,55,-41,-45,-93,-21,55,38,139,55,-29,55,55,-30,-109,-107,55,-108,55,55,55,55,55,55,55,55,55,55,55,55,55,-22,-23,-24,-73,55,55,-76,-79,-77,-80,-74,-57,-78,-56,55,-75,-58,-102,-103,-104,-105,-101,55,-100,-31,55,-95,55,55,55,55,55,-71,-72,-59,55,-81,55,-33,-32,55,-35,-82,-68,55,55,55,55,-70,-69,-83,55,-60,55,55,55,-61,55,-85,-84,]),'ID':([0,1,2,3,4,5,7,9,10,11,13,14,16,25,26,27,28,30,32,36,38,42,45,46,50,51,53,54,55,59,65,69,70,74,78,81,82,86,91,92,93,94,95,96,97,98,99,100,101,102,103,109,110,111,114,116,117,118,119,120,121,122,126,127,129,131,133,134,135,136,137,138,139,146,148,165,166,168,169,170,171,172,173,174,176,180,183,186,189,196,197,199,200,201,202,204,205,206,208,210,211,212,213,214,],[12,-2,-46,12,12,12,-47,-86,12,-4,-5,-48,-49,-3,12,12,-87,-6,12,12,12,-44,-43,12,12,-42,12,12,-41,-45,12,12,-67,-66,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,12,-73,12,12,-76,-79,-77,-80,-74,-57,-78,-56,12,-75,-58,-102,-103,-104,-105,-101,12,-100,12,12,12,12,12,12,-71,-72,-59,12,-81,12,12,-82,-68,12,12,12,12,-70,-69,-83,12,-60,12,12,12,-61,12,-85,-84,]),'IF':([30,69,110,116,117,118,119,120,121,122,126,127,129,131,170,171,172,174,183,186,196,199,200,201,202,205,208,210,211,212,213,214,],[-6,128,-73,-76,-79,-77,-80,-74,-57,-78,-56,128,-75,-58,-71,-72,-59,-81,-82,-68,128,128,-70,-69,-83,-60,128,128,-61,128,-85,-84,]),'AND':([12,39,40,41,43,44,47,48,52,56,60,75,79,80,83,84,85,90,144,147,149,150,151,152,153,154,155,156,157,158,159,160,161,178,179,181,],[-36,-94,-34,-54,-53,-106,-110,-55,-28,91,-93,-34,91,-29,-30,-109,-107,-108,-31,-95,-122,91,-116,-112,-120,-119,-111,-117,-114,-121,-118,-115,-113,-33,-32,-35,]),'CHAR':([0,1,5,8,11,12,13,17,18,19,23,25,27,30,33,34,53,68,69,70,72,74,104,105,106,107,110,116,117,118,119,120,121,122,126,127,129,131,169,170,171,172,174,183,186,200,201,202,205,211,213,214,],[7,-2,7,-12,-4,-36,-5,7,-20,-13,7,-3,7,-6,7,-7,7,-21,7,-67,-8,-66,-22,-23,-24,7,-73,-76,-79,-77,-80,-74,-57,-78,-56,7,-75,-58,7,-71,-72,-59,-81,-82,-68,-70,-69,-83,-60,-61,-85,-84,]),'LBRACE':([8,12,17,18,19,23,30,31,33,34,35,37,38,68,69,72,78,104,105,106,110,116,117,118,119,120,121,122,126,127,129,131,170,171,172,174,176,183,186,196,199,200,201,202,205,208,210,211,212,213,214,],[-12,-36,-124,-20,-13,-124,-6,69,-9,-7,-10,69,78,-21,69,-8,78,-22,-23,-24,-73,-76,-79,-77,-80,-74,-57,-78,-56,69,-75,-58,-71,-72,-59,-81,78,-82,-68,69,69,-70,-69,-83,-60,69,69,-61,69,-85,-84,]),'INT':([0,1,5,8,11,12,13,17,18,19,23,25,27,30,33,34,53,68,69,70,72,74,104,105,106,107,110,116,117,118,119,120,121,122,126,127,129,131,169,170,171,172,174,183,186,200,201,202,205,211,213,214,],[14,-2,14,-12,-4,-36,-5,14,-20,-13,14,-3,14,-6,14,-7,14,-21,14,-67,-8,-66,-22,-23,-24,14,-73,-76,-79,-77,-80,-74,-57,-78,-56,14,-75,-58,14,-71,-72,-59,-81,-82,-68,-70,-69,-83,-60,-61,-85,-84,]),'FLOAT':([0,1,5,8,11,12,13,17,18,19,23,25,27,30,33,34,53,68,69,70,72,74,104,105,106,107,110,116,117,118,119,120,121,122,126,127,129,131,169,170,171,172,174,183,186,200,201,202,205,211,213,214,],[16,-2,16,-12,-4,-36,-5,16,-20,-13,16,-3,16,-6,16,-7,16,-21,16,-67,-8,-66,-22,-23,-24,16,-73,-76,-79,-77,-80,-74,-57,-78,-56,16,-75,-58,16,-71,-72,-59,-81,-82,-68,-70,-69,-83,-60,-61,-85,-84,]),'BREAK':([30,69,110,116,117,118,119,120,121,122,126,127,129,131,170,171,172,174,183,186,196,199,200,201,202,205,208,210,211,212,213,214,],[-6,130,-73,-76,-79,-77,-80,-74,-57,-78,-56,130,-75,-58,-71,-72,-59,-81,-82,-68,130,130,-70,-69,-83,-60,130,130,-61,130,-85,-84,]),'NOT':([26,30,38,42,45,46,50,51,53,54,55,59,69,78,81,82,86,91,92,93,94,95,96,97,98,99,100,101,102,103,110,111,114,116,117,118,119,120,121,122,126,127,129,131,133,134,135,136,137,138,139,146,148,165,166,168,169,170,171,172,173,174,176,180,183,186,189,196,197,199,200,201,202,204,205,206,208,210,211,212,213,214,],[59,-6,59,-44,-43,59,59,-42,59,59,-41,-45,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,-73,59,59,-76,-79,-77,-80,-74,-57,-78,-56,59,-75,-58,-102,-103,-104,-105,-101,59,-100,59,59,59,59,59,59,-71,-72,-59,59,-81,59,59,-82,-68,59,59,59,59,-70,-69,-83,59,-60,59,59,59,-61,59,-85,-84,]),'RBRACKET':([12,26,39,40,41,43,44,47,48,49,52,56,57,58,60,75,79,80,83,84,85,87,90,142,144,147,149,150,151,152,153,154,155,156,157,158,159,160,161,175,178,179,181,182,],[-36,-124,-94,-34,-54,-53,-106,-110,-55,-51,-28,-50,104,-52,-93,-34,-98,-29,-30,-109,-107,-91,-108,178,-31,-95,-122,-123,-116,-112,-120,-119,-111,-117,-114,-121,-118,-115,-113,-99,-33,-32,-35,-92,]),'OR':([12,39,40,41,43,44,47,48,52,56,60,75,79,80,83,84,85,90,144,147,149,150,151,152,153,154,155,156,157,158,159,160,161,178,179,181,],[-36,-94,-34,-54,-53,-106,-110,-55,-28,92,-93,-34,92,-29,-30,-109,-107,-108,-31,-95,-122,-123,-116,-112,-120,-119,-111,-117,-114,-121,-118,-115,-113,-33,-32,-35,]),'MOD':([12,39,40,41,43,44,47,48,52,56,60,75,79,80,83,84,85,90,144,147,149,150,151,152,153,154,155,156,157,158,159,160,161,178,179,181,],[-36,-94,-34,-54,-53,-106,-110,-55,-28,103,-93,-34,103,-29,-30,-109,-107,-108,-31,-95,103,103,103,-112,103,103,-111,103,103,103,103,103,-113,-33,-32,-35,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expression_statement':([69,127,196,199,208,210,212,],[110,110,110,110,110,110,110,]),'identifier_list_opt':([27,],[61,]),'constant':([26,38,46,50,53,54,69,78,81,82,86,91,92,93,94,95,96,97,98,99,100,101,102,103,111,114,127,138,146,148,165,166,168,169,173,176,180,189,196,197,199,204,206,208,210,212,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'unary_expression':([26,38,46,50,53,54,69,78,81,82,86,91,92,93,94,95,96,97,98,99,100,101,102,103,111,114,127,138,146,148,165,166,168,169,173,176,180,189,196,197,199,204,206,208,210,212,],[40,75,40,85,75,90,75,75,75,75,75,40,40,40,40,40,40,40,40,40,40,40,40,40,75,75,75,75,40,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,75,]),'initializer':([38,78,176,],[76,140,191,]),'init_declarator_list':([4,32,],[20,20,]),'init_declarator_list_opt':([4,32,],[21,21,]),'print_statement':([69,127,196,199,208,210,212,],[116,116,116,116,116,116,116,]),'pointer':([0,4,5,9,10,32,36,65,],[3,3,3,28,3,3,3,3,]),'argument_expression':([82,165,],[145,184,]),'type_specifier':([0,5,17,23,27,33,53,69,107,127,169,],[4,4,32,32,65,32,88,32,65,32,32,]),'assert_statement':([69,127,196,199,208,210,212,],[118,118,118,118,118,118,118,]),'compound_statement':([31,37,69,127,196,199,208,210,212,],[70,74,119,119,119,119,119,119,119,]),'iteration_statement':([69,127,196,199,208,210,212,],[117,117,117,117,117,117,117,]),'selection_statement':([69,127,196,199,208,210,212,],[120,120,120,120,120,120,120,]),'postfix_expression':([26,38,46,50,53,54,69,78,81,82,86,91,92,93,94,95,96,97,98,99,100,101,102,103,111,114,127,138,146,148,165,166,168,169,173,176,180,189,196,197,199,204,206,208,210,212,],[44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'global_declaration_list':([0,],[5,]),'program':([0,],[6,]),'statement':([69,127,196,199,208,210,212,],[121,121,202,205,211,213,214,]),'read_statement':([69,127,196,199,208,210,212,],[122,122,122,122,122,122,122,]),'cast_expression':([26,38,46,53,69,78,81,82,86,91,92,93,94,95,96,97,98,99,100,101,102,103,111,114,127,138,146,148,165,166,168,169,173,176,180,189,196,197,199,204,206,208,210,212,],[47,47,84,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,181,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'initializer_list':([78,],[141,]),'empty':([4,17,23,26,27,32,69,111,127,166,169,189,196,197,199,204,206,208,210,212,],[22,35,35,58,67,22,123,123,123,123,123,123,123,123,123,123,123,123,123,123,]),'assignment_operator':([75,],[138,]),'assignment_expression':([38,53,69,78,81,82,86,111,114,127,138,148,165,166,168,169,173,176,180,189,196,197,199,204,206,208,210,212,],[77,87,87,77,87,143,87,87,87,87,175,182,143,87,87,87,87,77,193,87,87,87,87,87,87,87,87,87,]),'parameter_declaration':([27,107,],[64,162,]),'direct_declarator':([0,3,4,5,10,32,36,65,],[8,19,8,8,8,8,8,8,]),'init_declarator':([4,32,36,],[24,24,73,]),'expression_opt':([69,111,127,166,169,189,196,197,199,204,206,208,210,212,],[125,164,125,185,188,198,125,203,125,207,209,125,125,125,]),'constant_expression':([26,],[49,]),'primary_expression':([26,38,46,50,53,54,69,78,81,82,86,91,92,93,94,95,96,97,98,99,100,101,102,103,111,114,127,138,146,148,165,166,168,169,173,176,180,189,196,197,199,204,206,208,210,212,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'global_declaration':([0,5,],[1,25,]),'declaration':([0,5,17,23,33,69,127,169,],[11,11,34,34,72,126,126,189,]),'identifier_list':([27,],[66,]),'block_item_list':([69,],[127,]),'jump_statement':([69,127,196,199,208,210,212,],[129,129,129,129,129,129,129,]),'declaration_list_opt':([17,23,],[31,37,]),'function_definition':([0,5,],[13,13,]),'binary_expression':([26,38,53,69,78,81,82,86,91,92,93,94,95,96,97,98,99,100,101,102,103,111,114,127,138,148,165,166,168,169,173,176,180,189,196,197,199,204,206,208,210,212,],[56,79,79,79,79,79,79,79,149,150,151,152,153,154,155,156,157,158,159,160,161,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,79,]),'parameter_list':([27,],[63,]),'decl_body':([0,5,17,23,33,69,127,169,],[15,15,15,15,15,15,15,15,]),'constant_expression_opt':([26,],[57,]),'declaration_list':([17,23,],[33,33,]),'block_item':([69,127,],[131,172,]),'unary_operator':([26,38,46,50,53,54,69,78,81,82,86,91,92,93,94,95,96,97,98,99,100,101,102,103,111,114,127,138,146,148,165,166,168,169,173,176,180,189,196,197,199,204,206,208,210,212,],[46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,46,]),'declarator':([0,4,5,10,32,36,65,],[17,23,17,29,71,71,108,]),'identifier':([0,3,4,5,10,26,27,32,36,38,46,50,53,54,65,69,78,81,82,86,91,92,93,94,95,96,97,98,99,100,101,102,103,109,111,114,127,138,146,148,165,166,168,169,173,176,180,189,196,197,199,204,206,208,210,212,],[18,18,18,18,18,60,62,18,18,60,60,60,60,60,18,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,163,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,]),'expression':([53,69,81,86,111,114,127,166,168,169,173,189,196,197,199,204,206,208,210,212,],[89,132,142,89,132,167,132,132,187,132,190,132,132,132,132,132,132,132,132,132,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> global_declaration_list','program',1,'p_program','parser.py',137),
  ('global_declaration_list -> global_declaration','global_declaration_list',1,'p_global_declaration_list','parser.py',143),
  ('global_declaration_list -> global_declaration_list global_declaration','global_declaration_list',2,'p_global_declaration_list','parser.py',144),
  ('global_declaration -> declaration','global_declaration',1,'p_global_declaration1','parser.py',149),
  ('global_declaration -> function_definition','global_declaration',1,'p_global_declaration2','parser.py',154),
  ('declaration -> decl_body SEMI','declaration',2,'p_declaration','parser.py',159),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','parser.py',164),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','parser.py',165),
  ('declaration_list_opt -> declaration_list','declaration_list_opt',1,'p_declaration_list_opt','parser.py',170),
  ('declaration_list_opt -> empty','declaration_list_opt',1,'p_declaration_list_opt','parser.py',171),
  ('decl_body -> type_specifier init_declarator_list_opt','decl_body',2,'p_decl_body','parser.py',176),
  ('declarator -> direct_declarator','declarator',1,'p_declarator','parser.py',185),
  ('declarator -> pointer direct_declarator','declarator',2,'p_declarator2','parser.py',190),
  ('init_declarator -> declarator','init_declarator',1,'p_init_declarator','parser.py',195),
  ('init_declarator -> declarator EQ initializer','init_declarator',3,'p_init_declarator','parser.py',196),
  ('init_declarator_list -> init_declarator','init_declarator_list',1,'p_init_declarator_list','parser.py',201),
  ('init_declarator_list -> init_declarator_list COMMA init_declarator','init_declarator_list',3,'p_init_declarator_list','parser.py',202),
  ('init_declarator_list_opt -> init_declarator_list','init_declarator_list_opt',1,'p_init_declarator_list_opt','parser.py',207),
  ('init_declarator_list_opt -> empty','init_declarator_list_opt',1,'p_init_declarator_list_opt','parser.py',208),
  ('direct_declarator -> identifier','direct_declarator',1,'p_direct_declarator1','parser.py',213),
  ('direct_declarator -> LPAREN declarator RPAREN','direct_declarator',3,'p_direct_declarator2','parser.py',218),
  ('direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET','direct_declarator',4,'p_direct_declarator3','parser.py',223),
  ('direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN','direct_declarator',4,'p_direct_declarator4','parser.py',230),
  ('direct_declarator -> direct_declarator LPAREN parameter_list RPAREN','direct_declarator',4,'p_direct_declarator4','parser.py',231),
  ('initializer -> assignment_expression','initializer',1,'p_initializer1','parser.py',237),
  ('initializer -> LBRACE initializer_list RBRACE','initializer',3,'p_initializer2','parser.py',242),
  ('initializer -> LBRACE initializer_list COMMA RBRACE','initializer',4,'p_initializer2','parser.py',243),
  ('postfix_expression -> primary_expression','postfix_expression',1,'p_postfix_expression1','parser.py',251),
  ('postfix_expression -> postfix_expression PLUSPLUS','postfix_expression',2,'p_postfix_expression2','parser.py',256),
  ('postfix_expression -> postfix_expression MINUSMINUS','postfix_expression',2,'p_postfix_expression2','parser.py',257),
  ('postfix_expression -> postfix_expression LPAREN RPAREN','postfix_expression',3,'p_postfix_expression3','parser.py',262),
  ('postfix_expression -> postfix_expression LPAREN argument_expression RPAREN','postfix_expression',4,'p_postfix_expression3','parser.py',263),
  ('postfix_expression -> postfix_expression LBRACKET expression RBRACKET','postfix_expression',4,'p_postfix_expression4','parser.py',269),
  ('cast_expression -> unary_expression','cast_expression',1,'p_cast_expression1','parser.py',274),
  ('cast_expression -> LPAREN type_specifier RPAREN cast_expression','cast_expression',4,'p_cast_expression2','parser.py',279),
  ('identifier -> ID','identifier',1,'p_identifier','parser.py',284),
  ('identifier_list_opt -> identifier_list','identifier_list_opt',1,'p_identifier_list_opt','parser.py',290),
  ('identifier_list_opt -> empty','identifier_list_opt',1,'p_identifier_list_opt','parser.py',291),
  ('identifier_list -> identifier','identifier_list',1,'p_identifier_list','parser.py',296),
  ('identifier_list -> identifier_list COMMA identifier','identifier_list',3,'p_identifier_list','parser.py',297),
  ('unary_operator -> EQ','unary_operator',1,'p_unary_operator','parser.py',306),
  ('unary_operator -> TIMES','unary_operator',1,'p_unary_operator','parser.py',307),
  ('unary_operator -> PLUS','unary_operator',1,'p_unary_operator','parser.py',308),
  ('unary_operator -> MINUS','unary_operator',1,'p_unary_operator','parser.py',309),
  ('unary_operator -> NOT','unary_operator',1,'p_unary_operator','parser.py',310),
  ('type_specifier -> VOID','type_specifier',1,'p_type_specifier','parser.py',315),
  ('type_specifier -> CHAR','type_specifier',1,'p_type_specifier','parser.py',316),
  ('type_specifier -> INT','type_specifier',1,'p_type_specifier','parser.py',317),
  ('type_specifier -> FLOAT','type_specifier',1,'p_type_specifier','parser.py',318),
  ('constant_expression -> binary_expression','constant_expression',1,'p_constant_expression','parser.py',324),
  ('constant_expression_opt -> constant_expression','constant_expression_opt',1,'p_constant_expression_opt','parser.py',329),
  ('constant_expression_opt -> empty','constant_expression_opt',1,'p_constant_expression_opt','parser.py',330),
  ('constant -> INT_CONST','constant',1,'p_constant1','parser.py',335),
  ('constant -> FLOAT_CONST','constant',1,'p_constant2','parser.py',341),
  ('constant -> STRING','constant',1,'p_constant3','parser.py',347),
  ('block_item -> declaration','block_item',1,'p_block_item','parser.py',353),
  ('block_item -> statement','block_item',1,'p_block_item','parser.py',354),
  ('block_item_list -> block_item','block_item_list',1,'p_block_item_list','parser.py',359),
  ('block_item_list -> block_item_list block_item','block_item_list',2,'p_block_item_list','parser.py',360),
  ('selection_statement -> IF LPAREN expression RPAREN statement','selection_statement',5,'p_selection_statement1','parser.py',365),
  ('selection_statement -> IF LPAREN expression RPAREN statement ELSE statement','selection_statement',7,'p_selection_statement2','parser.py',371),
  ('initializer_list -> initializer','initializer_list',1,'p_initializer_list','parser.py',376),
  ('initializer_list -> initializer_list COMMA initializer','initializer_list',3,'p_initializer_list','parser.py',377),
  ('argument_expression -> assignment_expression','argument_expression',1,'p_argument_expression','parser.py',386),
  ('argument_expression -> argument_expression COMMA assignment_expression','argument_expression',3,'p_argument_expression','parser.py',387),
  ('function_definition -> type_specifier declarator declaration_list_opt compound_statement','function_definition',4,'p_function_definition1','parser.py',398),
  ('function_definition -> declarator declaration_list_opt compound_statement','function_definition',3,'p_function_definition2','parser.py',405),
  ('assert_statement -> ASSERT expression SEMI','assert_statement',3,'p_assert_statement','parser.py',411),
  ('print_statement -> PRINT LPAREN expression_opt RPAREN SEMI','print_statement',5,'p_print_statement','parser.py',416),
  ('read_statement -> READ LPAREN argument_expression RPAREN SEMI','read_statement',5,'p_read_statement','parser.py',421),
  ('expression_statement -> expression_opt SEMI','expression_statement',2,'p_expression_statement','parser.py',426),
  ('compound_statement -> LBRACE block_item_list RBRACE','compound_statement',3,'p_compound_statement','parser.py',434),
  ('statement -> expression_statement','statement',1,'p_statement','parser.py',439),
  ('statement -> selection_statement','statement',1,'p_statement','parser.py',440),
  ('statement -> jump_statement','statement',1,'p_statement','parser.py',441),
  ('statement -> print_statement','statement',1,'p_statement','parser.py',442),
  ('statement -> assert_statement','statement',1,'p_statement','parser.py',443),
  ('statement -> read_statement','statement',1,'p_statement','parser.py',444),
  ('statement -> iteration_statement','statement',1,'p_statement','parser.py',445),
  ('statement -> compound_statement','statement',1,'p_statement','parser.py',446),
  ('jump_statement -> BREAK SEMI','jump_statement',2,'p_jump_statement1','parser.py',451),
  ('jump_statement -> RETURN expression_opt SEMI','jump_statement',3,'p_jump_statement2','parser.py',456),
  ('iteration_statement -> WHILE LPAREN expression RPAREN statement','iteration_statement',5,'p_iteration_statement1','parser.py',461),
  ('iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement','iteration_statement',9,'p_iteration_statement2','parser.py',466),
  ('iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement','iteration_statement',8,'p_iteration_statement3','parser.py',471),
  ('pointer -> TIMES','pointer',1,'p_pointer','parser.py',476),
  ('pointer -> TIMES pointer','pointer',2,'p_pointer','parser.py',477),
  ('parameter_declaration -> type_specifier declarator','parameter_declaration',2,'p_parameter_declaration','parser.py',492),
  ('parameter_list -> parameter_declaration','parameter_list',1,'p_parameter_list','parser.py',498),
  ('parameter_list -> parameter_list COMMA parameter_declaration','parameter_list',3,'p_parameter_list','parser.py',499),
  ('expression -> assignment_expression','expression',1,'p_expression1','parser.py',508),
  ('expression -> expression COMMA assignment_expression','expression',3,'p_expression2','parser.py',513),
  ('primary_expression -> identifier','primary_expression',1,'p_primary_expression1','parser.py',521),
  ('primary_expression -> constant','primary_expression',1,'p_primary_expression1','parser.py',522),
  ('primary_expression -> LPAREN expression RPAREN','primary_expression',3,'p_primary_expression2','parser.py',527),
  ('expression_opt -> expression','expression_opt',1,'p_expression_opt','parser.py',532),
  ('expression_opt -> empty','expression_opt',1,'p_expression_opt','parser.py',533),
  ('assignment_expression -> binary_expression','assignment_expression',1,'p_assignment_expression','parser.py',538),
  ('assignment_expression -> unary_expression assignment_operator assignment_expression','assignment_expression',3,'p_assignment_expression','parser.py',539),
  ('assignment_operator -> EQ','assignment_operator',1,'p_assignment_operator','parser.py',547),
  ('assignment_operator -> ASSIGN_TIMES','assignment_operator',1,'p_assignment_operator','parser.py',548),
  ('assignment_operator -> ASSIGN_DIVIDE','assignment_operator',1,'p_assignment_operator','parser.py',549),
  ('assignment_operator -> ASSIGN_MOD','assignment_operator',1,'p_assignment_operator','parser.py',550),
  ('assignment_operator -> ASSIGN_PLUS','assignment_operator',1,'p_assignment_operator','parser.py',551),
  ('assignment_operator -> ASSIGN_MINUS','assignment_operator',1,'p_assignment_operator','parser.py',552),
  ('unary_expression -> postfix_expression','unary_expression',1,'p_unary_expression1','parser.py',557),
  ('unary_expression -> PLUSPLUS unary_expression','unary_expression',2,'p_unary_expression2','parser.py',562),
  ('unary_expression -> MINUSMINUS unary_expression','unary_expression',2,'p_unary_expression2','parser.py',563),
  ('unary_expression -> unary_operator cast_expression','unary_expression',2,'p_unary_expression2','parser.py',564),
  ('binary_expression -> cast_expression','binary_expression',1,'p_binary_expression','parser.py',569),
  ('binary_expression -> binary_expression TIMES binary_expression','binary_expression',3,'p_binary_expression','parser.py',570),
  ('binary_expression -> binary_expression DIVIDE binary_expression','binary_expression',3,'p_binary_expression','parser.py',571),
  ('binary_expression -> binary_expression MOD binary_expression','binary_expression',3,'p_binary_expression','parser.py',572),
  ('binary_expression -> binary_expression PLUS binary_expression','binary_expression',3,'p_binary_expression','parser.py',573),
  ('binary_expression -> binary_expression MINUS binary_expression','binary_expression',3,'p_binary_expression','parser.py',574),
  ('binary_expression -> binary_expression LE binary_expression','binary_expression',3,'p_binary_expression','parser.py',575),
  ('binary_expression -> binary_expression LT binary_expression','binary_expression',3,'p_binary_expression','parser.py',576),
  ('binary_expression -> binary_expression HE binary_expression','binary_expression',3,'p_binary_expression','parser.py',577),
  ('binary_expression -> binary_expression HT binary_expression','binary_expression',3,'p_binary_expression','parser.py',578),
  ('binary_expression -> binary_expression EQUALS binary_expression','binary_expression',3,'p_binary_expression','parser.py',579),
  ('binary_expression -> binary_expression DIFF binary_expression','binary_expression',3,'p_binary_expression','parser.py',580),
  ('binary_expression -> binary_expression AND binary_expression','binary_expression',3,'p_binary_expression','parser.py',581),
  ('binary_expression -> binary_expression OR binary_expression','binary_expression',3,'p_binary_expression','parser.py',582),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',590),
]
