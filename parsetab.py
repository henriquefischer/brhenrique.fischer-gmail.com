
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'leftORleftANDEQUALSDIFFleftHTHELTLEleftPLUSMINUSleftTIMESDIVIDEMODADDRESS AND ASSERT ASSIGN_DIVIDE ASSIGN_MINUS ASSIGN_MOD ASSIGN_PLUS ASSIGN_TIMES BREAK CHAR COMMA DIFF DIVIDE ELSE EQ EQUALS FLOAT FLOAT_CONST FOR HE HT ID IF INT INT_CONST LBRACE LBRACKET LE LPAREN LT MINUS MINUSMINUS MOD NOT OR PLUS PLUSPLUS PRINT RBRACE RBRACKET READ RETURN RPAREN SEMI STRING TIMES VOID WHILE program  : global_declaration_list\n         global_declaration_list : global_declaration\n                                    | global_declaration_list global_declaration\n         global_declaration  : declaration\n         global_declaration  : function_definition\n         declaration : decl_body SEMI\n         declaration_list    : declaration\n                                | declaration_list declaration\n         declaration_list_opt    : declaration_list\n                                    | empty\n         decl_body  : type_specifier init_declarator_list_opt\n         declarator  : direct_declarator\n         declarator : pointer direct_declarator\n         init_declarator : declarator\n                            | declarator EQ initializer\n         init_declarator_list    : init_declarator\n                                    | init_declarator_list COMMA init_declarator\n         init_declarator_list_opt    : init_declarator_list\n                                        | empty\n         direct_declarator : identifier\n         direct_declarator :  LPAREN declarator RPAREN\n         direct_declarator : direct_declarator LBRACKET constant_expression_opt RBRACKET\n         direct_declarator : direct_declarator LPAREN identifier_list_opt RPAREN\n                              | direct_declarator LPAREN parameter_list RPAREN\n         initializer : assignment_expression\n         initializer : LBRACE initializer_list RBRACE\n                        | LBRACE initializer_list COMMA RBRACE\n         postfix_expression : primary_expression\n         postfix_expression : postfix_expression PLUSPLUS\n                               | postfix_expression MINUSMINUS\n         postfix_expression  : postfix_expression LPAREN RPAREN\n                                | postfix_expression LPAREN argument_expression RPAREN\n         postfix_expression  : postfix_expression LBRACKET expression RBRACKET\n         cast_expression : unary_expression\n         cast_expression : LPAREN type_specifier RPAREN cast_expression\n         identifier : ID\n         identifier_list_opt : identifier_list\n                                | empty\n         identifier_list : identifier\n                            | identifier_list COMMA identifier\n         unary_operator : EQ\n                           | TIMES\n                           | PLUS\n                           | MINUS\n                           | NOT\n         type_specifier : VOID\n                           | CHAR\n                           | INT\n                           | FLOAT\n         constant_expression : binary_expression\n         constant_expression_opt : constant_expression\n                                    | empty\n         constant : INT_CONST\n         constant : FLOAT_CONST\n         constant : STRING\n         block_item  : declaration\n                        | statement\n         block_item_list : block_item\n                            | block_item_list block_item\n         selection_statement : IF LPAREN expression RPAREN statement\n         selection_statement : IF LPAREN expression RPAREN statement ELSE statement\n         initializer_list : initializer\n                             | initializer_list COMMA initializer\n         argument_expression : assignment_expression\n                                | argument_expression COMMA assignment_expression\n         function_definition : type_specifier declarator declaration_list_opt compound_statement\n         function_definition : declarator declaration_list_opt compound_statement\n         assert_statement : ASSERT expression SEMI\n         print_statement : PRINT LPAREN expression_opt RPAREN SEMI\n         read_statement : READ LPAREN argument_expression RPAREN SEMI\n         expression_statement : expression_opt SEMI\n         compound_statement   : LBRACE block_item_list RBRACE\n         statement   : expression_statement\n                        | selection_statement\n                        | jump_statement\n                        | print_statement\n                        | assert_statement\n                        | read_statement\n                        | iteration_statement\n                        | compound_statement\n         jump_statement  : BREAK SEMI\n         jump_statement  : RETURN expression_opt SEMI\n         iteration_statement : WHILE LPAREN expression RPAREN statement\n         iteration_statement : FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement\n         iteration_statement : FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement\n         pointer : TIMES\n                    | TIMES pointer\n         parameter_declaration  : type_specifier declarator\n         parameter_list  : parameter_declaration\n                            | parameter_list COMMA parameter_declaration\n         expression  : assignment_expression\n         expression  : expression COMMA assignment_expression\n         primary_expression : identifier\n                               | constant\n         primary_expression : LPAREN expression RPAREN\n         expression_opt : expression\n                           | empty\n         assignment_expression   : binary_expression\n                                    | unary_expression assignment_operator assignment_expression\n         assignment_operator : EQ\n                                | ASSIGN_TIMES\n                                | ASSIGN_DIVIDE\n                                | ASSIGN_MOD\n                                | ASSIGN_PLUS\n                                | ASSIGN_MINUS\n         unary_expression : postfix_expression\n         unary_expression    : PLUSPLUS unary_expression\n                                | MINUSMINUS unary_expression\n                                | unary_operator cast_expression\n         binary_expression   : cast_expression\n                                | binary_expression TIMES binary_expression\n                                | binary_expression DIVIDE binary_expression\n                                | binary_expression MOD binary_expression\n                                | binary_expression PLUS binary_expression\n                                | binary_expression MINUS binary_expression\n                                | binary_expression LE binary_expression\n                                | binary_expression LT binary_expression\n                                | binary_expression HE binary_expression\n                                | binary_expression HT binary_expression\n                                | binary_expression EQUALS binary_expression\n                                | binary_expression DIFF binary_expression\n                                | binary_expression AND binary_expression\n                                | binary_expression OR binary_expression\n         empty :\n        '
    
_lr_action_items = {'VOID':([0,2,3,4,5,8,13,15,18,19,20,21,27,29,32,33,39,40,41,52,72,73,80,81,82,83,84,85,86,87,88,89,90,91,104,128,129,130,142,143,144,147,153,180,182,200,201,202,203,209,213,214,],[9,9,-2,-4,-5,9,-12,-20,-36,-3,-6,9,9,-7,9,-13,-67,9,-8,9,-21,-66,9,-58,-56,-57,-73,-74,-75,-76,-77,-78,-79,-80,-22,-23,-24,9,-72,-59,-71,-81,9,-82,-68,-60,-69,-70,-83,-61,-85,-84,]),'CHAR':([0,2,3,4,5,8,13,15,18,19,20,21,27,29,32,33,39,40,41,52,72,73,80,81,82,83,84,85,86,87,88,89,90,91,104,128,129,130,142,143,144,147,153,180,182,200,201,202,203,209,213,214,],[10,10,-2,-4,-5,10,-12,-20,-36,-3,-6,10,10,-7,10,-13,-67,10,-8,10,-21,-66,10,-58,-56,-57,-73,-74,-75,-76,-77,-78,-79,-80,-22,-23,-24,10,-72,-59,-71,-81,10,-82,-68,-60,-69,-70,-83,-61,-85,-84,]),'INT':([0,2,3,4,5,8,13,15,18,19,20,21,27,29,32,33,39,40,41,52,72,73,80,81,82,83,84,85,86,87,88,89,90,91,104,128,129,130,142,143,144,147,153,180,182,200,201,202,203,209,213,214,],[11,11,-2,-4,-5,11,-12,-20,-36,-3,-6,11,11,-7,11,-13,-67,11,-8,11,-21,-66,11,-58,-56,-57,-73,-74,-75,-76,-77,-78,-79,-80,-22,-23,-24,11,-72,-59,-71,-81,11,-82,-68,-60,-69,-70,-83,-61,-85,-84,]),'FLOAT':([0,2,3,4,5,8,13,15,18,19,20,21,27,29,32,33,39,40,41,52,72,73,80,81,82,83,84,85,86,87,88,89,90,91,104,128,129,130,142,143,144,147,153,180,182,200,201,202,203,209,213,214,],[12,12,-2,-4,-5,12,-12,-20,-36,-3,-6,12,12,-7,12,-13,-67,12,-8,12,-21,-66,12,-58,-56,-57,-73,-74,-75,-76,-77,-78,-79,-80,-22,-23,-24,12,-72,-59,-71,-81,12,-82,-68,-60,-69,-70,-83,-61,-85,-84,]),'LPAREN':([0,2,3,4,5,7,9,10,11,12,13,14,15,16,17,18,19,20,30,31,33,35,37,38,39,40,48,49,50,52,53,54,55,56,57,58,59,60,61,62,63,64,71,72,73,76,80,81,82,83,84,85,86,87,88,89,90,91,93,96,97,98,99,100,101,104,105,106,107,108,109,110,111,112,113,114,115,116,117,120,121,122,123,125,128,129,135,136,137,138,139,140,141,142,143,144,145,146,147,149,151,152,153,167,168,169,176,180,182,186,188,189,190,193,196,197,200,201,202,203,205,206,207,209,211,212,213,214,],[16,16,-2,-4,-5,16,-46,-47,-48,-49,32,16,-20,16,-86,-36,-3,-6,16,52,32,-87,52,16,-67,52,-42,-43,-44,52,122,125,125,52,-28,-41,-45,-93,-94,-53,-54,-55,16,-21,-66,52,52,-58,-56,-57,-73,-74,-75,-76,-77,-78,-79,-80,145,52,149,52,151,152,153,-22,52,52,52,52,52,52,52,52,52,52,52,52,52,-29,-30,52,52,52,-23,-24,52,-100,-101,-102,-103,-104,-105,-72,-59,-71,52,52,-81,52,52,52,52,52,-95,-31,52,-82,-68,52,-32,52,-33,52,52,52,-60,-69,-70,-83,52,52,52,-61,52,52,-85,-84,]),'TIMES':([0,2,3,4,5,7,9,10,11,12,16,17,18,19,20,30,31,37,38,39,40,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,71,73,76,77,78,80,81,82,83,84,85,86,87,88,89,90,91,96,98,105,106,107,108,109,110,111,112,113,114,115,116,117,120,121,122,123,124,125,126,127,135,136,137,138,139,140,141,142,143,144,145,146,147,149,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,176,180,182,186,187,188,189,190,193,196,197,200,201,202,203,205,206,207,209,211,212,213,214,],[17,17,-2,-4,-5,17,-46,-47,-48,-49,17,17,-36,-3,-6,17,48,48,17,-67,48,105,-110,-42,-43,-44,-34,48,-106,48,48,48,-28,-41,-45,-93,-94,-53,-54,-55,17,-66,48,105,-34,48,-58,-56,-57,-73,-74,-75,-76,-77,-78,-79,-80,48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-29,-30,48,48,-107,48,-108,-109,48,-100,-101,-102,-103,-104,-105,-72,-59,-71,48,48,-81,48,48,48,48,-111,-112,-113,105,105,105,105,105,105,105,105,105,105,48,-95,-31,48,-82,-68,48,-35,-32,48,-33,48,48,48,-60,-69,-70,-83,48,48,48,-61,48,48,-85,-84,]),'ID':([0,2,3,4,5,7,9,10,11,12,14,16,17,19,20,30,31,32,35,37,38,39,40,48,49,50,52,54,55,56,58,59,71,73,76,80,81,82,83,84,85,86,87,88,89,90,91,96,98,105,106,107,108,109,110,111,112,113,114,115,116,117,122,123,125,131,135,136,137,138,139,140,141,142,143,144,145,146,147,149,151,152,153,167,176,180,182,186,189,193,196,197,200,201,202,203,205,206,207,209,211,212,213,214,],[18,18,-2,-4,-5,18,-46,-47,-48,-49,18,18,-86,-3,-6,18,18,18,-87,18,18,-67,18,-42,-43,-44,18,18,18,18,-41,-45,18,-66,18,18,-58,-56,-57,-73,-74,-75,-76,-77,-78,-79,-80,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,18,-100,-101,-102,-103,-104,-105,-72,-59,-71,18,18,-81,18,18,18,18,18,18,-82,-68,18,18,18,18,18,-60,-69,-70,-83,18,18,18,-61,18,18,-85,-84,]),'$end':([1,2,3,4,5,19,20,39,73,142,],[0,-1,-2,-4,-5,-3,-6,-67,-66,-72,]),'SEMI':([6,7,9,10,11,12,13,15,18,20,21,22,23,24,25,30,33,40,42,47,51,53,57,60,61,62,63,64,72,74,75,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,94,95,96,102,103,104,120,121,124,126,127,128,129,142,143,144,147,148,150,153,154,155,156,157,158,159,160,161,162,163,164,165,166,168,169,175,177,179,180,182,185,186,187,188,190,191,193,194,195,196,197,198,200,201,202,203,204,206,209,211,212,213,214,],[20,-124,-46,-47,-48,-49,-12,-20,-36,-6,-14,-11,-18,-19,-16,-124,-13,-124,-14,-110,-34,-106,-28,-93,-94,-53,-54,-55,-21,-15,-25,-98,-34,-17,-124,-58,-56,-57,-73,-74,-75,-76,-77,-78,-79,-80,144,-96,147,-124,-97,-91,-22,-29,-30,-107,-108,-109,-23,-24,-72,-59,-71,-81,180,182,-124,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,-121,-122,-123,-95,-31,-26,-99,-92,-82,-68,197,-124,-35,-32,-33,-27,-124,201,202,-124,-124,205,-60,-69,-70,-83,207,-124,-61,-124,-124,-85,-84,]),'LBRACE':([8,13,15,18,20,21,26,27,28,29,33,36,37,40,41,72,76,80,81,82,83,84,85,86,87,88,89,90,91,104,128,129,142,143,144,147,176,180,182,193,196,200,201,202,203,206,209,211,212,213,214,],[-124,-12,-20,-36,-6,-124,40,-9,-10,-7,-13,40,76,40,-8,-21,76,40,-58,-56,-57,-73,-74,-75,-76,-77,-78,-79,-80,-22,-23,-24,-72,-59,-71,-81,76,-82,-68,40,40,-60,-69,-70,-83,40,-61,40,40,-85,-84,]),'RPAREN':([9,10,11,12,13,15,18,32,33,34,47,51,53,57,60,61,62,63,64,65,66,67,68,69,70,72,77,78,94,102,103,104,118,119,120,121,122,124,126,127,128,129,132,149,154,155,156,157,158,159,160,161,162,163,164,165,166,168,169,170,171,173,174,177,178,179,181,183,184,187,188,190,199,205,207,208,210,],[-46,-47,-48,-49,-12,-20,-36,-124,-13,72,-110,-34,-106,-28,-93,-94,-53,-54,-55,128,129,-37,-38,-89,-39,-21,-98,-34,-96,-97,-91,-22,167,168,-29,-30,169,-107,-108,-109,-23,-24,-88,-124,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,-121,-122,-123,-95,-31,188,-64,-90,-40,-99,193,-92,194,195,196,-35,-32,-33,-65,-124,-124,211,212,]),'EQ':([13,15,18,20,21,31,33,37,40,42,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,72,76,78,80,81,82,83,84,85,86,87,88,89,90,91,96,98,104,105,106,107,108,109,110,111,112,113,114,115,116,117,120,121,122,123,124,125,126,127,128,129,135,136,137,138,139,140,141,142,143,144,145,146,147,149,151,152,153,167,168,169,176,180,182,186,187,188,189,190,193,196,197,200,201,202,203,205,206,207,209,211,212,213,214,],[-12,-20,-36,-6,37,58,-13,58,58,37,-42,-43,-44,-34,58,-106,58,58,58,-28,-41,-45,-93,-94,-53,-54,-55,-21,58,136,58,-58,-56,-57,-73,-74,-75,-76,-77,-78,-79,-80,58,58,-22,58,58,58,58,58,58,58,58,58,58,58,58,58,-29,-30,58,58,-107,58,-108,-109,-23,-24,58,-100,-101,-102,-103,-104,-105,-72,-59,-71,58,58,-81,58,58,58,58,58,-95,-31,58,-82,-68,58,-35,-32,58,-33,58,58,58,-60,-69,-70,-83,58,58,58,-61,58,58,-85,-84,]),'COMMA':([13,15,18,21,23,25,33,42,47,51,53,57,60,61,62,63,64,66,67,69,70,72,74,75,77,78,79,94,103,104,119,120,121,124,126,127,128,129,132,133,134,150,154,155,156,157,158,159,160,161,162,163,164,165,166,168,169,170,171,172,173,174,175,177,178,179,183,184,187,188,190,191,192,199,],[-12,-20,-36,-14,38,-16,-13,-14,-110,-34,-106,-28,-93,-94,-53,-54,-55,130,131,-89,-39,-21,-15,-25,-98,-34,-17,146,-91,-22,146,-29,-30,-107,-108,-109,-23,-24,-88,176,-62,146,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,-121,-122,-123,-95,-31,189,-64,146,-90,-40,-26,-99,146,-92,189,146,-35,-32,-33,-27,-63,-65,]),'LBRACKET':([13,15,18,33,53,57,60,61,62,63,64,72,104,120,121,128,129,168,169,188,190,],[31,-20,-36,31,123,-28,-93,-94,-53,-54,-55,-21,-22,-29,-30,-23,-24,-95,-31,-32,-33,]),'PLUSPLUS':([18,20,31,37,40,48,49,50,52,53,54,55,56,57,58,59,60,61,62,63,64,76,80,81,82,83,84,85,86,87,88,89,90,91,96,98,105,106,107,108,109,110,111,112,113,114,115,116,117,120,121,122,123,125,135,136,137,138,139,140,141,142,143,144,145,146,147,149,151,152,153,167,168,169,176,180,182,186,188,189,190,193,196,197,200,201,202,203,205,206,207,209,211,212,213,214,],[-36,-6,54,54,54,-42,-43,-44,54,120,54,54,54,-28,-41,-45,-93,-94,-53,-54,-55,54,54,-58,-56,-57,-73,-74,-75,-76,-77,-78,-79,-80,54,54,54,54,54,54,54,54,54,54,54,54,54,54,54,-29,-30,54,54,54,54,-100,-101,-102,-103,-104,-105,-72,-59,-71,54,54,-81,54,54,54,54,54,-95,-31,54,-82,-68,54,-32,54,-33,54,54,54,-60,-69,-70,-83,54,54,54,-61,54,54,-85,-84,]),'MINUSMINUS':([18,20,31,37,40,48,49,50,52,53,54,55,56,57,58,59,60,61,62,63,64,76,80,81,82,83,84,85,86,87,88,89,90,91,96,98,105,106,107,108,109,110,111,112,113,114,115,116,117,120,121,122,123,125,135,136,137,138,139,140,141,142,143,144,145,146,147,149,151,152,153,167,168,169,176,180,182,186,188,189,190,193,196,197,200,201,202,203,205,206,207,209,211,212,213,214,],[-36,-6,55,55,55,-42,-43,-44,55,121,55,55,55,-28,-41,-45,-93,-94,-53,-54,-55,55,55,-58,-56,-57,-73,-74,-75,-76,-77,-78,-79,-80,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,-29,-30,55,55,55,55,-100,-101,-102,-103,-104,-105,-72,-59,-71,55,55,-81,55,55,55,55,55,-95,-31,55,-82,-68,55,-32,55,-33,55,55,55,-60,-69,-70,-83,55,55,55,-61,55,55,-85,-84,]),'DIVIDE':([18,46,47,51,53,57,60,61,62,63,64,77,78,120,121,124,126,127,154,155,156,157,158,159,160,161,162,163,164,165,166,168,169,187,188,190,],[-36,106,-110,-34,-106,-28,-93,-94,-53,-54,-55,106,-34,-29,-30,-107,-108,-109,-111,-112,-113,106,106,106,106,106,106,106,106,106,106,-95,-31,-35,-32,-33,]),'MOD':([18,46,47,51,53,57,60,61,62,63,64,77,78,120,121,124,126,127,154,155,156,157,158,159,160,161,162,163,164,165,166,168,169,187,188,190,],[-36,107,-110,-34,-106,-28,-93,-94,-53,-54,-55,107,-34,-29,-30,-107,-108,-109,-111,-112,-113,107,107,107,107,107,107,107,107,107,107,-95,-31,-35,-32,-33,]),'PLUS':([18,20,31,37,40,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,76,77,78,80,81,82,83,84,85,86,87,88,89,90,91,96,98,105,106,107,108,109,110,111,112,113,114,115,116,117,120,121,122,123,124,125,126,127,135,136,137,138,139,140,141,142,143,144,145,146,147,149,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,176,180,182,186,187,188,189,190,193,196,197,200,201,202,203,205,206,207,209,211,212,213,214,],[-36,-6,49,49,49,108,-110,-42,-43,-44,-34,49,-106,49,49,49,-28,-41,-45,-93,-94,-53,-54,-55,49,108,-34,49,-58,-56,-57,-73,-74,-75,-76,-77,-78,-79,-80,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,-29,-30,49,49,-107,49,-108,-109,49,-100,-101,-102,-103,-104,-105,-72,-59,-71,49,49,-81,49,49,49,49,-111,-112,-113,-114,-115,108,108,108,108,108,108,108,108,49,-95,-31,49,-82,-68,49,-35,-32,49,-33,49,49,49,-60,-69,-70,-83,49,49,49,-61,49,49,-85,-84,]),'MINUS':([18,20,31,37,40,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,76,77,78,80,81,82,83,84,85,86,87,88,89,90,91,96,98,105,106,107,108,109,110,111,112,113,114,115,116,117,120,121,122,123,124,125,126,127,135,136,137,138,139,140,141,142,143,144,145,146,147,149,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,176,180,182,186,187,188,189,190,193,196,197,200,201,202,203,205,206,207,209,211,212,213,214,],[-36,-6,50,50,50,109,-110,-42,-43,-44,-34,50,-106,50,50,50,-28,-41,-45,-93,-94,-53,-54,-55,50,109,-34,50,-58,-56,-57,-73,-74,-75,-76,-77,-78,-79,-80,50,50,50,50,50,50,50,50,50,50,50,50,50,50,50,-29,-30,50,50,-107,50,-108,-109,50,-100,-101,-102,-103,-104,-105,-72,-59,-71,50,50,-81,50,50,50,50,-111,-112,-113,-114,-115,109,109,109,109,109,109,109,109,50,-95,-31,50,-82,-68,50,-35,-32,50,-33,50,50,50,-60,-69,-70,-83,50,50,50,-61,50,50,-85,-84,]),'LE':([18,46,47,51,53,57,60,61,62,63,64,77,78,120,121,124,126,127,154,155,156,157,158,159,160,161,162,163,164,165,166,168,169,187,188,190,],[-36,110,-110,-34,-106,-28,-93,-94,-53,-54,-55,110,-34,-29,-30,-107,-108,-109,-111,-112,-113,-114,-115,-116,-117,-118,-119,110,110,110,110,-95,-31,-35,-32,-33,]),'LT':([18,46,47,51,53,57,60,61,62,63,64,77,78,120,121,124,126,127,154,155,156,157,158,159,160,161,162,163,164,165,166,168,169,187,188,190,],[-36,111,-110,-34,-106,-28,-93,-94,-53,-54,-55,111,-34,-29,-30,-107,-108,-109,-111,-112,-113,-114,-115,-116,-117,-118,-119,111,111,111,111,-95,-31,-35,-32,-33,]),'HE':([18,46,47,51,53,57,60,61,62,63,64,77,78,120,121,124,126,127,154,155,156,157,158,159,160,161,162,163,164,165,166,168,169,187,188,190,],[-36,112,-110,-34,-106,-28,-93,-94,-53,-54,-55,112,-34,-29,-30,-107,-108,-109,-111,-112,-113,-114,-115,-116,-117,-118,-119,112,112,112,112,-95,-31,-35,-32,-33,]),'HT':([18,46,47,51,53,57,60,61,62,63,64,77,78,120,121,124,126,127,154,155,156,157,158,159,160,161,162,163,164,165,166,168,169,187,188,190,],[-36,113,-110,-34,-106,-28,-93,-94,-53,-54,-55,113,-34,-29,-30,-107,-108,-109,-111,-112,-113,-114,-115,-116,-117,-118,-119,113,113,113,113,-95,-31,-35,-32,-33,]),'EQUALS':([18,46,47,51,53,57,60,61,62,63,64,77,78,120,121,124,126,127,154,155,156,157,158,159,160,161,162,163,164,165,166,168,169,187,188,190,],[-36,114,-110,-34,-106,-28,-93,-94,-53,-54,-55,114,-34,-29,-30,-107,-108,-109,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,-121,-122,114,-95,-31,-35,-32,-33,]),'DIFF':([18,46,47,51,53,57,60,61,62,63,64,77,78,120,121,124,126,127,154,155,156,157,158,159,160,161,162,163,164,165,166,168,169,187,188,190,],[-36,115,-110,-34,-106,-28,-93,-94,-53,-54,-55,115,-34,-29,-30,-107,-108,-109,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,-121,-122,115,-95,-31,-35,-32,-33,]),'AND':([18,46,47,51,53,57,60,61,62,63,64,77,78,120,121,124,126,127,154,155,156,157,158,159,160,161,162,163,164,165,166,168,169,187,188,190,],[-36,116,-110,-34,-106,-28,-93,-94,-53,-54,-55,116,-34,-29,-30,-107,-108,-109,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,-121,-122,116,-95,-31,-35,-32,-33,]),'OR':([18,46,47,51,53,57,60,61,62,63,64,77,78,120,121,124,126,127,154,155,156,157,158,159,160,161,162,163,164,165,166,168,169,187,188,190,],[-36,117,-110,-34,-106,-28,-93,-94,-53,-54,-55,117,-34,-29,-30,-107,-108,-109,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,-121,-122,-123,-95,-31,-35,-32,-33,]),'RBRACKET':([18,31,43,44,45,46,47,51,53,57,60,61,62,63,64,77,78,103,120,121,124,126,127,154,155,156,157,158,159,160,161,162,163,164,165,166,168,169,172,177,179,187,188,190,],[-36,-124,104,-51,-52,-50,-110,-34,-106,-28,-93,-94,-53,-54,-55,-98,-34,-91,-29,-30,-107,-108,-109,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,-121,-122,-123,-95,-31,190,-99,-92,-35,-32,-33,]),'ASSIGN_TIMES':([18,51,53,57,60,61,62,63,64,78,120,121,124,126,127,168,169,187,188,190,],[-36,-34,-106,-28,-93,-94,-53,-54,-55,137,-29,-30,-107,-108,-109,-95,-31,-35,-32,-33,]),'ASSIGN_DIVIDE':([18,51,53,57,60,61,62,63,64,78,120,121,124,126,127,168,169,187,188,190,],[-36,-34,-106,-28,-93,-94,-53,-54,-55,138,-29,-30,-107,-108,-109,-95,-31,-35,-32,-33,]),'ASSIGN_MOD':([18,51,53,57,60,61,62,63,64,78,120,121,124,126,127,168,169,187,188,190,],[-36,-34,-106,-28,-93,-94,-53,-54,-55,139,-29,-30,-107,-108,-109,-95,-31,-35,-32,-33,]),'ASSIGN_PLUS':([18,51,53,57,60,61,62,63,64,78,120,121,124,126,127,168,169,187,188,190,],[-36,-34,-106,-28,-93,-94,-53,-54,-55,140,-29,-30,-107,-108,-109,-95,-31,-35,-32,-33,]),'ASSIGN_MINUS':([18,51,53,57,60,61,62,63,64,78,120,121,124,126,127,168,169,187,188,190,],[-36,-34,-106,-28,-93,-94,-53,-54,-55,141,-29,-30,-107,-108,-109,-95,-31,-35,-32,-33,]),'RBRACE':([18,20,47,51,53,57,60,61,62,63,64,75,77,78,80,81,82,83,84,85,86,87,88,89,90,91,120,121,124,126,127,133,134,142,143,144,147,154,155,156,157,158,159,160,161,162,163,164,165,166,168,169,175,176,177,180,182,187,188,190,191,192,200,201,202,203,209,213,214,],[-36,-6,-110,-34,-106,-28,-93,-94,-53,-54,-55,-25,-98,-34,142,-58,-56,-57,-73,-74,-75,-76,-77,-78,-79,-80,-29,-30,-107,-108,-109,175,-62,-72,-59,-71,-81,-111,-112,-113,-114,-115,-116,-117,-118,-119,-120,-121,-122,-123,-95,-31,-26,191,-99,-82,-68,-35,-32,-33,-27,-63,-60,-69,-70,-83,-61,-85,-84,]),'IF':([20,40,80,81,82,83,84,85,86,87,88,89,90,91,142,143,144,147,180,182,193,196,200,201,202,203,206,209,211,212,213,214,],[-6,93,93,-58,-56,-57,-73,-74,-75,-76,-77,-78,-79,-80,-72,-59,-71,-81,-82,-68,93,93,-60,-69,-70,-83,93,-61,93,93,-85,-84,]),'BREAK':([20,40,80,81,82,83,84,85,86,87,88,89,90,91,142,143,144,147,180,182,193,196,200,201,202,203,206,209,211,212,213,214,],[-6,95,95,-58,-56,-57,-73,-74,-75,-76,-77,-78,-79,-80,-72,-59,-71,-81,-82,-68,95,95,-60,-69,-70,-83,95,-61,95,95,-85,-84,]),'RETURN':([20,40,80,81,82,83,84,85,86,87,88,89,90,91,142,143,144,147,180,182,193,196,200,201,202,203,206,209,211,212,213,214,],[-6,96,96,-58,-56,-57,-73,-74,-75,-76,-77,-78,-79,-80,-72,-59,-71,-81,-82,-68,96,96,-60,-69,-70,-83,96,-61,96,96,-85,-84,]),'PRINT':([20,40,80,81,82,83,84,85,86,87,88,89,90,91,142,143,144,147,180,182,193,196,200,201,202,203,206,209,211,212,213,214,],[-6,97,97,-58,-56,-57,-73,-74,-75,-76,-77,-78,-79,-80,-72,-59,-71,-81,-82,-68,97,97,-60,-69,-70,-83,97,-61,97,97,-85,-84,]),'ASSERT':([20,40,80,81,82,83,84,85,86,87,88,89,90,91,142,143,144,147,180,182,193,196,200,201,202,203,206,209,211,212,213,214,],[-6,98,98,-58,-56,-57,-73,-74,-75,-76,-77,-78,-79,-80,-72,-59,-71,-81,-82,-68,98,98,-60,-69,-70,-83,98,-61,98,98,-85,-84,]),'READ':([20,40,80,81,82,83,84,85,86,87,88,89,90,91,142,143,144,147,180,182,193,196,200,201,202,203,206,209,211,212,213,214,],[-6,99,99,-58,-56,-57,-73,-74,-75,-76,-77,-78,-79,-80,-72,-59,-71,-81,-82,-68,99,99,-60,-69,-70,-83,99,-61,99,99,-85,-84,]),'WHILE':([20,40,80,81,82,83,84,85,86,87,88,89,90,91,142,143,144,147,180,182,193,196,200,201,202,203,206,209,211,212,213,214,],[-6,100,100,-58,-56,-57,-73,-74,-75,-76,-77,-78,-79,-80,-72,-59,-71,-81,-82,-68,100,100,-60,-69,-70,-83,100,-61,100,100,-85,-84,]),'FOR':([20,40,80,81,82,83,84,85,86,87,88,89,90,91,142,143,144,147,180,182,193,196,200,201,202,203,206,209,211,212,213,214,],[-6,101,101,-58,-56,-57,-73,-74,-75,-76,-77,-78,-79,-80,-72,-59,-71,-81,-82,-68,101,101,-60,-69,-70,-83,101,-61,101,101,-85,-84,]),'NOT':([20,31,37,40,48,49,50,52,54,55,56,58,59,76,80,81,82,83,84,85,86,87,88,89,90,91,96,98,105,106,107,108,109,110,111,112,113,114,115,116,117,122,123,125,135,136,137,138,139,140,141,142,143,144,145,146,147,149,151,152,153,167,176,180,182,186,189,193,196,197,200,201,202,203,205,206,207,209,211,212,213,214,],[-6,59,59,59,-42,-43,-44,59,59,59,59,-41,-45,59,59,-58,-56,-57,-73,-74,-75,-76,-77,-78,-79,-80,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,59,-100,-101,-102,-103,-104,-105,-72,-59,-71,59,59,-81,59,59,59,59,59,59,-82,-68,59,59,59,59,59,-60,-69,-70,-83,59,59,59,-61,59,59,-85,-84,]),'INT_CONST':([20,31,37,40,48,49,50,52,54,55,56,58,59,76,80,81,82,83,84,85,86,87,88,89,90,91,96,98,105,106,107,108,109,110,111,112,113,114,115,116,117,122,123,125,135,136,137,138,139,140,141,142,143,144,145,146,147,149,151,152,153,167,176,180,182,186,189,193,196,197,200,201,202,203,205,206,207,209,211,212,213,214,],[-6,62,62,62,-42,-43,-44,62,62,62,62,-41,-45,62,62,-58,-56,-57,-73,-74,-75,-76,-77,-78,-79,-80,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,62,-100,-101,-102,-103,-104,-105,-72,-59,-71,62,62,-81,62,62,62,62,62,62,-82,-68,62,62,62,62,62,-60,-69,-70,-83,62,62,62,-61,62,62,-85,-84,]),'FLOAT_CONST':([20,31,37,40,48,49,50,52,54,55,56,58,59,76,80,81,82,83,84,85,86,87,88,89,90,91,96,98,105,106,107,108,109,110,111,112,113,114,115,116,117,122,123,125,135,136,137,138,139,140,141,142,143,144,145,146,147,149,151,152,153,167,176,180,182,186,189,193,196,197,200,201,202,203,205,206,207,209,211,212,213,214,],[-6,63,63,63,-42,-43,-44,63,63,63,63,-41,-45,63,63,-58,-56,-57,-73,-74,-75,-76,-77,-78,-79,-80,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,63,-100,-101,-102,-103,-104,-105,-72,-59,-71,63,63,-81,63,63,63,63,63,63,-82,-68,63,63,63,63,63,-60,-69,-70,-83,63,63,63,-61,63,63,-85,-84,]),'STRING':([20,31,37,40,48,49,50,52,54,55,56,58,59,76,80,81,82,83,84,85,86,87,88,89,90,91,96,98,105,106,107,108,109,110,111,112,113,114,115,116,117,122,123,125,135,136,137,138,139,140,141,142,143,144,145,146,147,149,151,152,153,167,176,180,182,186,189,193,196,197,200,201,202,203,205,206,207,209,211,212,213,214,],[-6,64,64,64,-42,-43,-44,64,64,64,64,-41,-45,64,64,-58,-56,-57,-73,-74,-75,-76,-77,-78,-79,-80,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,64,-100,-101,-102,-103,-104,-105,-72,-59,-71,64,64,-81,64,64,64,64,64,64,-82,-68,64,64,64,64,64,-60,-69,-70,-83,64,64,64,-61,64,64,-85,-84,]),'ELSE':([84,85,86,87,88,89,90,91,142,144,147,180,182,200,201,202,203,209,213,214,],[-73,-74,-75,-76,-77,-78,-79,-80,-72,-71,-81,-82,-68,206,-69,-70,-83,-61,-85,-84,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'global_declaration_list':([0,],[2,]),'global_declaration':([0,2,],[3,19,]),'declaration':([0,2,8,21,27,40,80,153,],[4,4,29,29,41,82,82,186,]),'function_definition':([0,2,],[5,5,]),'decl_body':([0,2,8,21,27,40,80,153,],[6,6,6,6,6,6,6,6,]),'type_specifier':([0,2,8,21,27,32,40,52,80,130,153,],[7,7,30,30,30,71,30,118,30,71,30,]),'declarator':([0,2,7,16,30,38,71,],[8,8,21,34,42,42,132,]),'direct_declarator':([0,2,7,14,16,30,38,71,],[13,13,13,33,13,13,13,13,]),'pointer':([0,2,7,16,17,30,38,71,],[14,14,14,14,35,14,14,14,]),'identifier':([0,2,7,14,16,30,31,32,37,38,40,52,54,55,56,71,76,80,96,98,105,106,107,108,109,110,111,112,113,114,115,116,117,122,123,125,131,135,145,146,149,151,152,153,167,176,186,189,193,196,197,205,206,207,211,212,],[15,15,15,15,15,15,60,70,60,15,60,60,60,60,60,15,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,174,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,60,]),'init_declarator_list_opt':([7,30,],[22,22,]),'init_declarator_list':([7,30,],[23,23,]),'empty':([7,8,21,30,31,32,40,80,96,149,153,186,193,196,197,205,206,207,211,212,],[24,28,28,24,45,68,102,102,102,102,102,102,102,102,102,102,102,102,102,102,]),'init_declarator':([7,30,38,],[25,25,79,]),'declaration_list_opt':([8,21,],[26,36,]),'declaration_list':([8,21,],[27,27,]),'compound_statement':([26,36,40,80,193,196,206,211,212,],[39,73,91,91,91,91,91,91,91,]),'constant_expression_opt':([31,],[43,]),'constant_expression':([31,],[44,]),'binary_expression':([31,37,40,52,76,80,96,98,105,106,107,108,109,110,111,112,113,114,115,116,117,122,123,125,135,145,146,149,151,152,153,176,186,189,193,196,197,205,206,207,211,212,],[46,77,77,77,77,77,77,77,154,155,156,157,158,159,160,161,162,163,164,165,166,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,77,]),'cast_expression':([31,37,40,52,56,76,80,96,98,105,106,107,108,109,110,111,112,113,114,115,116,117,122,123,125,135,145,146,149,151,152,153,167,176,186,189,193,196,197,205,206,207,211,212,],[47,47,47,47,127,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,187,47,47,47,47,47,47,47,47,47,47,47,]),'unary_expression':([31,37,40,52,54,55,56,76,80,96,98,105,106,107,108,109,110,111,112,113,114,115,116,117,122,123,125,135,145,146,149,151,152,153,167,176,186,189,193,196,197,205,206,207,211,212,],[51,78,78,78,124,126,51,78,78,78,78,51,51,51,51,51,51,51,51,51,51,51,51,51,78,78,78,78,78,78,78,78,78,78,51,78,78,78,78,78,78,78,78,78,78,78,]),'postfix_expression':([31,37,40,52,54,55,56,76,80,96,98,105,106,107,108,109,110,111,112,113,114,115,116,117,122,123,125,135,145,146,149,151,152,153,167,176,186,189,193,196,197,205,206,207,211,212,],[53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'unary_operator':([31,37,40,52,54,55,56,76,80,96,98,105,106,107,108,109,110,111,112,113,114,115,116,117,122,123,125,135,145,146,149,151,152,153,167,176,186,189,193,196,197,205,206,207,211,212,],[56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,56,]),'primary_expression':([31,37,40,52,54,55,56,76,80,96,98,105,106,107,108,109,110,111,112,113,114,115,116,117,122,123,125,135,145,146,149,151,152,153,167,176,186,189,193,196,197,205,206,207,211,212,],[57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,57,]),'constant':([31,37,40,52,54,55,56,76,80,96,98,105,106,107,108,109,110,111,112,113,114,115,116,117,122,123,125,135,145,146,149,151,152,153,167,176,186,189,193,196,197,205,206,207,211,212,],[61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,]),'identifier_list_opt':([32,],[65,]),'parameter_list':([32,],[66,]),'identifier_list':([32,],[67,]),'parameter_declaration':([32,130,],[69,173,]),'initializer':([37,76,176,],[74,134,192,]),'assignment_expression':([37,40,52,76,80,96,98,122,123,125,135,145,146,149,151,152,153,176,186,189,193,196,197,205,206,207,211,212,],[75,103,103,75,103,103,103,171,103,103,177,103,179,103,171,103,103,75,103,199,103,103,103,103,103,103,103,103,]),'block_item_list':([40,],[80,]),'block_item':([40,80,],[81,143,]),'statement':([40,80,193,196,206,211,212,],[83,83,200,203,209,213,214,]),'expression_statement':([40,80,193,196,206,211,212,],[84,84,84,84,84,84,84,]),'selection_statement':([40,80,193,196,206,211,212,],[85,85,85,85,85,85,85,]),'jump_statement':([40,80,193,196,206,211,212,],[86,86,86,86,86,86,86,]),'print_statement':([40,80,193,196,206,211,212,],[87,87,87,87,87,87,87,]),'assert_statement':([40,80,193,196,206,211,212,],[88,88,88,88,88,88,88,]),'read_statement':([40,80,193,196,206,211,212,],[89,89,89,89,89,89,89,]),'iteration_statement':([40,80,193,196,206,211,212,],[90,90,90,90,90,90,90,]),'expression_opt':([40,80,96,149,153,186,193,196,197,205,206,207,211,212,],[92,92,148,181,185,198,92,92,204,208,92,210,92,92,]),'expression':([40,52,80,96,98,123,125,145,149,152,153,186,193,196,197,205,206,207,211,212,],[94,119,94,94,150,172,119,178,94,184,94,94,94,94,94,94,94,94,94,94,]),'initializer_list':([76,],[133,]),'assignment_operator':([78,],[135,]),'argument_expression':([122,151,],[170,183,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> global_declaration_list','program',1,'p_program','parser.py',137),
  ('global_declaration_list -> global_declaration','global_declaration_list',1,'p_global_declaration_list','parser.py',143),
  ('global_declaration_list -> global_declaration_list global_declaration','global_declaration_list',2,'p_global_declaration_list','parser.py',144),
  ('global_declaration -> declaration','global_declaration',1,'p_global_declaration1','parser.py',149),
  ('global_declaration -> function_definition','global_declaration',1,'p_global_declaration2','parser.py',154),
  ('declaration -> decl_body SEMI','declaration',2,'p_declaration','parser.py',159),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','parser.py',164),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','parser.py',165),
  ('declaration_list_opt -> declaration_list','declaration_list_opt',1,'p_declaration_list_opt','parser.py',170),
  ('declaration_list_opt -> empty','declaration_list_opt',1,'p_declaration_list_opt','parser.py',171),
  ('decl_body -> type_specifier init_declarator_list_opt','decl_body',2,'p_decl_body','parser.py',176),
  ('declarator -> direct_declarator','declarator',1,'p_declarator','parser.py',185),
  ('declarator -> pointer direct_declarator','declarator',2,'p_declarator2','parser.py',190),
  ('init_declarator -> declarator','init_declarator',1,'p_init_declarator','parser.py',195),
  ('init_declarator -> declarator EQ initializer','init_declarator',3,'p_init_declarator','parser.py',196),
  ('init_declarator_list -> init_declarator','init_declarator_list',1,'p_init_declarator_list','parser.py',201),
  ('init_declarator_list -> init_declarator_list COMMA init_declarator','init_declarator_list',3,'p_init_declarator_list','parser.py',202),
  ('init_declarator_list_opt -> init_declarator_list','init_declarator_list_opt',1,'p_init_declarator_list_opt','parser.py',207),
  ('init_declarator_list_opt -> empty','init_declarator_list_opt',1,'p_init_declarator_list_opt','parser.py',208),
  ('direct_declarator -> identifier','direct_declarator',1,'p_direct_declarator1','parser.py',213),
  ('direct_declarator -> LPAREN declarator RPAREN','direct_declarator',3,'p_direct_declarator2','parser.py',218),
  ('direct_declarator -> direct_declarator LBRACKET constant_expression_opt RBRACKET','direct_declarator',4,'p_direct_declarator3','parser.py',223),
  ('direct_declarator -> direct_declarator LPAREN identifier_list_opt RPAREN','direct_declarator',4,'p_direct_declarator4','parser.py',230),
  ('direct_declarator -> direct_declarator LPAREN parameter_list RPAREN','direct_declarator',4,'p_direct_declarator4','parser.py',231),
  ('initializer -> assignment_expression','initializer',1,'p_initializer1','parser.py',237),
  ('initializer -> LBRACE initializer_list RBRACE','initializer',3,'p_initializer2','parser.py',242),
  ('initializer -> LBRACE initializer_list COMMA RBRACE','initializer',4,'p_initializer2','parser.py',243),
  ('postfix_expression -> primary_expression','postfix_expression',1,'p_postfix_expression1','parser.py',251),
  ('postfix_expression -> postfix_expression PLUSPLUS','postfix_expression',2,'p_postfix_expression2','parser.py',256),
  ('postfix_expression -> postfix_expression MINUSMINUS','postfix_expression',2,'p_postfix_expression2','parser.py',257),
  ('postfix_expression -> postfix_expression LPAREN RPAREN','postfix_expression',3,'p_postfix_expression3','parser.py',262),
  ('postfix_expression -> postfix_expression LPAREN argument_expression RPAREN','postfix_expression',4,'p_postfix_expression3','parser.py',263),
  ('postfix_expression -> postfix_expression LBRACKET expression RBRACKET','postfix_expression',4,'p_postfix_expression4','parser.py',269),
  ('cast_expression -> unary_expression','cast_expression',1,'p_cast_expression1','parser.py',274),
  ('cast_expression -> LPAREN type_specifier RPAREN cast_expression','cast_expression',4,'p_cast_expression2','parser.py',279),
  ('identifier -> ID','identifier',1,'p_identifier','parser.py',284),
  ('identifier_list_opt -> identifier_list','identifier_list_opt',1,'p_identifier_list_opt','parser.py',290),
  ('identifier_list_opt -> empty','identifier_list_opt',1,'p_identifier_list_opt','parser.py',291),
  ('identifier_list -> identifier','identifier_list',1,'p_identifier_list','parser.py',296),
  ('identifier_list -> identifier_list COMMA identifier','identifier_list',3,'p_identifier_list','parser.py',297),
  ('unary_operator -> EQ','unary_operator',1,'p_unary_operator','parser.py',306),
  ('unary_operator -> TIMES','unary_operator',1,'p_unary_operator','parser.py',307),
  ('unary_operator -> PLUS','unary_operator',1,'p_unary_operator','parser.py',308),
  ('unary_operator -> MINUS','unary_operator',1,'p_unary_operator','parser.py',309),
  ('unary_operator -> NOT','unary_operator',1,'p_unary_operator','parser.py',310),
  ('type_specifier -> VOID','type_specifier',1,'p_type_specifier','parser.py',315),
  ('type_specifier -> CHAR','type_specifier',1,'p_type_specifier','parser.py',316),
  ('type_specifier -> INT','type_specifier',1,'p_type_specifier','parser.py',317),
  ('type_specifier -> FLOAT','type_specifier',1,'p_type_specifier','parser.py',318),
  ('constant_expression -> binary_expression','constant_expression',1,'p_constant_expression','parser.py',324),
  ('constant_expression_opt -> constant_expression','constant_expression_opt',1,'p_constant_expression_opt','parser.py',329),
  ('constant_expression_opt -> empty','constant_expression_opt',1,'p_constant_expression_opt','parser.py',330),
  ('constant -> INT_CONST','constant',1,'p_constant1','parser.py',335),
  ('constant -> FLOAT_CONST','constant',1,'p_constant2','parser.py',341),
  ('constant -> STRING','constant',1,'p_constant3','parser.py',347),
  ('block_item -> declaration','block_item',1,'p_block_item','parser.py',353),
  ('block_item -> statement','block_item',1,'p_block_item','parser.py',354),
  ('block_item_list -> block_item','block_item_list',1,'p_block_item_list','parser.py',359),
  ('block_item_list -> block_item_list block_item','block_item_list',2,'p_block_item_list','parser.py',360),
  ('selection_statement -> IF LPAREN expression RPAREN statement','selection_statement',5,'p_selection_statement1','parser.py',365),
  ('selection_statement -> IF LPAREN expression RPAREN statement ELSE statement','selection_statement',7,'p_selection_statement2','parser.py',371),
  ('initializer_list -> initializer','initializer_list',1,'p_initializer_list','parser.py',376),
  ('initializer_list -> initializer_list COMMA initializer','initializer_list',3,'p_initializer_list','parser.py',377),
  ('argument_expression -> assignment_expression','argument_expression',1,'p_argument_expression','parser.py',386),
  ('argument_expression -> argument_expression COMMA assignment_expression','argument_expression',3,'p_argument_expression','parser.py',387),
  ('function_definition -> type_specifier declarator declaration_list_opt compound_statement','function_definition',4,'p_function_definition1','parser.py',398),
  ('function_definition -> declarator declaration_list_opt compound_statement','function_definition',3,'p_function_definition2','parser.py',405),
  ('assert_statement -> ASSERT expression SEMI','assert_statement',3,'p_assert_statement','parser.py',411),
  ('print_statement -> PRINT LPAREN expression_opt RPAREN SEMI','print_statement',5,'p_print_statement','parser.py',416),
  ('read_statement -> READ LPAREN argument_expression RPAREN SEMI','read_statement',5,'p_read_statement','parser.py',421),
  ('expression_statement -> expression_opt SEMI','expression_statement',2,'p_expression_statement','parser.py',426),
  ('compound_statement -> LBRACE block_item_list RBRACE','compound_statement',3,'p_compound_statement','parser.py',434),
  ('statement -> expression_statement','statement',1,'p_statement','parser.py',439),
  ('statement -> selection_statement','statement',1,'p_statement','parser.py',440),
  ('statement -> jump_statement','statement',1,'p_statement','parser.py',441),
  ('statement -> print_statement','statement',1,'p_statement','parser.py',442),
  ('statement -> assert_statement','statement',1,'p_statement','parser.py',443),
  ('statement -> read_statement','statement',1,'p_statement','parser.py',444),
  ('statement -> iteration_statement','statement',1,'p_statement','parser.py',445),
  ('statement -> compound_statement','statement',1,'p_statement','parser.py',446),
  ('jump_statement -> BREAK SEMI','jump_statement',2,'p_jump_statement1','parser.py',451),
  ('jump_statement -> RETURN expression_opt SEMI','jump_statement',3,'p_jump_statement2','parser.py',456),
  ('iteration_statement -> WHILE LPAREN expression RPAREN statement','iteration_statement',5,'p_iteration_statement1','parser.py',461),
  ('iteration_statement -> FOR LPAREN expression_opt SEMI expression_opt SEMI expression_opt RPAREN statement','iteration_statement',9,'p_iteration_statement2','parser.py',466),
  ('iteration_statement -> FOR LPAREN declaration expression_opt SEMI expression_opt RPAREN statement','iteration_statement',8,'p_iteration_statement3','parser.py',471),
  ('pointer -> TIMES','pointer',1,'p_pointer','parser.py',476),
  ('pointer -> TIMES pointer','pointer',2,'p_pointer','parser.py',477),
  ('parameter_declaration -> type_specifier declarator','parameter_declaration',2,'p_parameter_declaration','parser.py',492),
  ('parameter_list -> parameter_declaration','parameter_list',1,'p_parameter_list','parser.py',498),
  ('parameter_list -> parameter_list COMMA parameter_declaration','parameter_list',3,'p_parameter_list','parser.py',499),
  ('expression -> assignment_expression','expression',1,'p_expression1','parser.py',508),
  ('expression -> expression COMMA assignment_expression','expression',3,'p_expression2','parser.py',513),
  ('primary_expression -> identifier','primary_expression',1,'p_primary_expression1','parser.py',521),
  ('primary_expression -> constant','primary_expression',1,'p_primary_expression1','parser.py',522),
  ('primary_expression -> LPAREN expression RPAREN','primary_expression',3,'p_primary_expression2','parser.py',527),
  ('expression_opt -> expression','expression_opt',1,'p_expression_opt','parser.py',532),
  ('expression_opt -> empty','expression_opt',1,'p_expression_opt','parser.py',533),
  ('assignment_expression -> binary_expression','assignment_expression',1,'p_assignment_expression','parser.py',538),
  ('assignment_expression -> unary_expression assignment_operator assignment_expression','assignment_expression',3,'p_assignment_expression','parser.py',539),
  ('assignment_operator -> EQ','assignment_operator',1,'p_assignment_operator','parser.py',547),
  ('assignment_operator -> ASSIGN_TIMES','assignment_operator',1,'p_assignment_operator','parser.py',548),
  ('assignment_operator -> ASSIGN_DIVIDE','assignment_operator',1,'p_assignment_operator','parser.py',549),
  ('assignment_operator -> ASSIGN_MOD','assignment_operator',1,'p_assignment_operator','parser.py',550),
  ('assignment_operator -> ASSIGN_PLUS','assignment_operator',1,'p_assignment_operator','parser.py',551),
  ('assignment_operator -> ASSIGN_MINUS','assignment_operator',1,'p_assignment_operator','parser.py',552),
  ('unary_expression -> postfix_expression','unary_expression',1,'p_unary_expression1','parser.py',557),
  ('unary_expression -> PLUSPLUS unary_expression','unary_expression',2,'p_unary_expression2','parser.py',562),
  ('unary_expression -> MINUSMINUS unary_expression','unary_expression',2,'p_unary_expression2','parser.py',563),
  ('unary_expression -> unary_operator cast_expression','unary_expression',2,'p_unary_expression2','parser.py',564),
  ('binary_expression -> cast_expression','binary_expression',1,'p_binary_expression','parser.py',569),
  ('binary_expression -> binary_expression TIMES binary_expression','binary_expression',3,'p_binary_expression','parser.py',570),
  ('binary_expression -> binary_expression DIVIDE binary_expression','binary_expression',3,'p_binary_expression','parser.py',571),
  ('binary_expression -> binary_expression MOD binary_expression','binary_expression',3,'p_binary_expression','parser.py',572),
  ('binary_expression -> binary_expression PLUS binary_expression','binary_expression',3,'p_binary_expression','parser.py',573),
  ('binary_expression -> binary_expression MINUS binary_expression','binary_expression',3,'p_binary_expression','parser.py',574),
  ('binary_expression -> binary_expression LE binary_expression','binary_expression',3,'p_binary_expression','parser.py',575),
  ('binary_expression -> binary_expression LT binary_expression','binary_expression',3,'p_binary_expression','parser.py',576),
  ('binary_expression -> binary_expression HE binary_expression','binary_expression',3,'p_binary_expression','parser.py',577),
  ('binary_expression -> binary_expression HT binary_expression','binary_expression',3,'p_binary_expression','parser.py',578),
  ('binary_expression -> binary_expression EQUALS binary_expression','binary_expression',3,'p_binary_expression','parser.py',579),
  ('binary_expression -> binary_expression DIFF binary_expression','binary_expression',3,'p_binary_expression','parser.py',580),
  ('binary_expression -> binary_expression AND binary_expression','binary_expression',3,'p_binary_expression','parser.py',581),
  ('binary_expression -> binary_expression OR binary_expression','binary_expression',3,'p_binary_expression','parser.py',582),
  ('empty -> <empty>','empty',0,'p_empty','parser.py',590),
]
