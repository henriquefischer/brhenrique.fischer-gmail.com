
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'ADDRESS AND ASSERT ASSIGN_DIVIDE ASSIGN_MINUS ASSIGN_MOD ASSIGN_PLUS ASSIGN_TIMES BREAK CHAR COMMA DIFF DIVIDE ELSE EQ EQUALS FLOAT FLOAT_CONST FOR HE HT ID IF INT INT_CONST LBRACE LBRACKET LE LPAREN LT MINUS MINUSMINUS MOD NOT OR PLUS PLUSPLUS PRINT RBRACE RBRACKET READ RETURN RPAREN SEMI STRING TIMES VOID WHILE program  : global_declaration_list\n     global_declaration_list : global_declaration\n                                | global_declaration_list global_declaration\n     global_declaration  : function_definition\n                            | declaration function_definition : declarator compound_statement\n                            | declarator declaration_list compound_statement\n                            | type_specifier declarator compound_statement\n                            | type_specifier declarator declaration_list compound_statement\n     declaration_list    : declaration\n                            | declaration_list declaration\n     statement_list  : statement\n                        | statement_list statement\n     type_specifier  : VOID\n                        | CHAR\n                        | INT\n                        | FLOAT\n     identifier : ID  frase : STRING  int_const : INT_CONST  float_const : FLOAT_CONST  declarator  : identifier\n                    | LPAREN declarator RPAREN\n                    | declarator RBRACKET LBRACKET\n                    | declarator RBRACKET constant_expression LBRACKET\n                    | declarator LPAREN parameter_list RPAREN\n                    | declarator LPAREN RPAREN\n                    | declarator LPAREN identifier RPAREN\n     constant_expression : binary_expression\n     binary_expression   : cast_expression\n                            | binary_expression TIMES binary_expression\n                            | binary_expression DIVIDE binary_expression\n                            | binary_expression MOD binary_expression\n                            | binary_expression MINUS binary_expression\n                            | binary_expression PLUS binary_expression\n                            | binary_expression LT binary_expression\n                            | binary_expression LE binary_expression\n                            | binary_expression HT binary_expression\n                            | binary_expression HE binary_expression\n                            | binary_expression EQUALS binary_expression\n                            | binary_expression DIFF binary_expression\n                            | binary_expression AND binary_expression\n                            | binary_expression OR binary_expression\n     cast_expression : unary_expression\n                        | LPAREN type_specifier RPAREN cast_expression\n     unary_expression    : postfix_expression\n                            | PLUSPLUS unary_expression\n                            | MINUSMINUS unary_expression\n                            | unary_operator cast_expression\n     postfix_expression  : primary_expression\n                            | postfix_expression LBRACKET expression RBRACKET\n                            | postfix_expression LPAREN RPAREN\n                            | postfix_expression LPAREN assignment_expression_list RPAREN\n                            | postfix_expression PLUSPLUS\n                            | postfix_expression MINUSMINUS\n     primary_expression  : identifier\n                            | int_const\n                            | float_const\n                            | frase\n                            | LPAREN expression RPAREN\n     compound_statement  : LBRACE RBRACE\n                            | LBRACE declaration_list RBRACE\n                            | LBRACE statement_list RBRACE\n                            | LBRACE declaration_list statement_list RBRACE\n     assignment_expression_list  : assignment_expression\n                                    | assignment_expression_list assignment_expression\n     assignment_expression   : binary_expression\n                                | unary_expression assignment_operator assignment_expression\n     expression  : assignment_expression\n                    | expression COMMA assignment_expression\n     assignment_operator : EQ\n                            | ASSIGN_TIMES\n                            | ASSIGN_DIVIDE\n                            | ASSIGN_MOD\n                            | ASSIGN_PLUS\n                            | ASSIGN_MINUS\n     unary_operator  : ADDRESS\n                        | TIMES\n                        | PLUS\n                        | MINUS\n                        | NOT\n     parameter_list  : parameter_declaration\n                        | parameter_list COMMA parameter_declaration\n     parameter_declaration   : type_specifier declarator\n     declaration : type_specifier SEMI\n                    | type_specifier init_declarator SEMI\n     init_declarator : declarator\n                        | declarator EQ initializer\n     initializer : assignment_expression\n                    | LBRACE initializer_list RBRACE\n                    | LBRACE initializer_list COMMA RBRACE\n     initializer_list    : initializer\n                            | initializer_list COMMA initializer\n    statement    : expression_statement\n                    | iteration_statement\n                    | compound_statement\n                    | jump_statement\n                    | assert_statement\n                    | print_statement\n                    | selection_statement\n                    | read_statement expression_statement    : SEMI\n                                | expression SEMI selection_statement : IF LPAREN expression RPAREN statement\n                        | IF LPAREN expression RPAREN statement ELSE statement\n     iteration_statement : WHILE LPAREN expression RPAREN statement\n                            | FOR LPAREN SEMI SEMI RPAREN statement\n                            | FOR LPAREN expression SEMI SEMI RPAREN statement\n                            | FOR LPAREN SEMI expression SEMI RPAREN statement\n                            | FOR LPAREN SEMI SEMI expression RPAREN statement\n                            | FOR LPAREN expression SEMI expression SEMI RPAREN statement\n                            | FOR LPAREN expression SEMI SEMI expression RPAREN statement\n                            | FOR LPAREN SEMI expression SEMI expression RPAREN statement\n                            | FOR LPAREN expression SEMI expression SEMI expression RPAREN statement\n     jump_statement  : BREAK\n                        | RETURN\n                        | RETURN expression\n     assert_statement : ASSERT expression SEMI\n     print_statement : PRINT LPAREN expression RPAREN SEMI\n     read_statement : READ LPAREN declarator_list RPAREN SEMI declarator_list : declarator\n                        | declarator_list declarator\n    '
    
_lr_action_items = {'ASSIGN_DIVIDE':([9,34,38,43,48,49,54,61,68,70,74,84,103,106,107,109,113,148,154,179,180,185,],[-18,93,-58,-20,-21,-46,-19,-50,-57,-59,-56,-44,-54,-55,-49,-47,-48,-52,-60,-51,-53,-45,]),'DIVIDE':([9,34,38,43,48,49,53,54,61,68,69,70,74,84,87,103,106,107,109,113,148,154,157,158,159,160,161,162,163,164,165,166,167,168,169,179,180,185,],[-18,-44,-58,-20,-21,-46,-30,-19,-50,-57,119,-59,-56,-44,119,-54,-55,-49,-47,-48,-52,-60,119,119,119,119,119,119,119,119,119,119,119,119,119,-51,-53,-45,]),'RETURN':([9,15,20,22,30,32,33,34,38,39,40,42,43,44,45,46,47,48,49,51,52,53,54,56,61,66,68,69,70,71,72,73,74,77,84,92,103,106,107,109,113,129,130,131,132,134,142,148,154,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,178,179,180,185,186,189,190,191,192,197,198,199,200,202,205,206,207,208,209,210,211,213,214,215,216,217,218,],[-18,-85,33,-10,-86,-94,-116,-44,-58,-99,-95,-69,-20,-98,-102,-96,-100,-21,-46,-12,-101,-30,-19,-61,-50,-97,-57,-67,-59,33,-115,33,-56,-11,-44,-117,-54,-55,-49,-47,-48,-62,33,-13,-63,-103,-68,-52,-60,-118,-42,-43,-37,-32,-40,-38,-31,-36,-35,-41,-39,-34,-33,-64,-70,33,-51,-53,-45,33,-120,-119,-106,33,-104,-107,33,33,33,33,-110,-109,33,-108,33,33,-105,-113,-112,-111,33,-114,]),'READ':([9,15,20,22,30,32,33,34,38,39,40,42,43,44,45,46,47,48,49,51,52,53,54,56,61,66,68,69,70,71,72,73,74,77,84,92,103,106,107,109,113,129,130,131,132,134,142,148,154,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,178,179,180,185,186,189,190,191,192,197,198,199,200,202,205,206,207,208,209,210,211,213,214,215,216,217,218,],[-18,-85,35,-10,-86,-94,-116,-44,-58,-99,-95,-69,-20,-98,-102,-96,-100,-21,-46,-12,-101,-30,-19,-61,-50,-97,-57,-67,-59,35,-115,35,-56,-11,-44,-117,-54,-55,-49,-47,-48,-62,35,-13,-63,-103,-68,-52,-60,-118,-42,-43,-37,-32,-40,-38,-31,-36,-35,-41,-39,-34,-33,-64,-70,35,-51,-53,-45,35,-120,-119,-106,35,-104,-107,35,35,35,35,-110,-109,35,-108,35,35,-105,-113,-112,-111,35,-114,]),'VOID':([0,1,5,8,9,10,13,14,15,16,18,20,21,22,23,25,27,29,30,31,56,62,71,76,77,80,85,91,129,132,136,137,138,139,170,],[2,-2,2,-5,-18,-4,2,-22,-85,2,-3,2,-6,-10,2,2,-8,2,-86,-23,-61,2,2,-7,-11,-27,-24,-9,-62,-63,-26,2,-28,-25,-64,]),'HT':([9,34,38,43,48,49,53,54,61,68,69,70,74,84,87,103,106,107,109,113,148,154,157,158,159,160,161,162,163,164,165,166,167,168,169,179,180,185,],[-18,-44,-58,-20,-21,-46,-30,-19,-50,-57,121,-59,-56,-44,121,-54,-55,-49,-47,-48,-52,-60,121,121,121,121,121,121,121,121,121,121,121,121,121,-51,-53,-45,]),'LBRACKET':([9,26,38,43,48,49,53,54,61,68,70,74,84,86,87,103,106,107,109,113,148,154,157,158,159,160,161,162,163,164,165,166,167,168,169,179,180,185,],[-18,85,-58,-20,-21,104,-30,-19,-50,-57,-59,-56,-44,139,-29,-54,-55,-49,-47,-48,-52,-60,-42,-43,-37,-32,-40,-38,-31,-36,-35,-41,-39,-34,-33,-51,-53,-45,]),'WHILE':([9,15,20,22,30,32,33,34,38,39,40,42,43,44,45,46,47,48,49,51,52,53,54,56,61,66,68,69,70,71,72,73,74,77,84,92,103,106,107,109,113,129,130,131,132,134,142,148,154,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,178,179,180,185,186,189,190,191,192,197,198,199,200,202,205,206,207,208,209,210,211,213,214,215,216,217,218,],[-18,-85,37,-10,-86,-94,-116,-44,-58,-99,-95,-69,-20,-98,-102,-96,-100,-21,-46,-12,-101,-30,-19,-61,-50,-97,-57,-67,-59,37,-115,37,-56,-11,-44,-117,-54,-55,-49,-47,-48,-62,37,-13,-63,-103,-68,-52,-60,-118,-42,-43,-37,-32,-40,-38,-31,-36,-35,-41,-39,-34,-33,-64,-70,37,-51,-53,-45,37,-120,-119,-106,37,-104,-107,37,37,37,37,-110,-109,37,-108,37,37,-105,-113,-112,-111,37,-114,]),'FLOAT_CONST':([9,15,20,22,26,28,30,32,33,34,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,58,59,60,61,62,63,64,66,67,68,69,70,71,72,73,74,77,84,90,92,93,94,95,96,97,98,99,101,102,103,104,105,106,107,108,109,110,113,114,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,142,148,149,150,151,153,154,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,173,178,179,180,181,182,184,185,186,189,190,191,192,194,195,197,198,199,200,202,204,205,206,207,208,209,210,211,213,214,215,216,217,218,],[-18,-85,48,-10,48,48,-86,-94,48,-44,-58,-99,-95,-80,-69,-20,-98,-102,-96,-100,-21,-46,-79,-12,-101,-30,-19,48,-61,48,-77,-81,-50,48,48,-78,-97,48,-57,-67,-59,48,-115,48,-56,-11,-44,48,-117,-73,-74,-75,-76,-72,48,-71,48,48,-54,48,48,-55,-49,48,-47,48,-48,48,48,48,48,48,48,48,48,48,48,48,48,48,48,-62,48,-13,-63,48,-103,-68,-52,48,-65,48,48,-60,-118,-42,-43,-37,-32,-40,-38,-31,-36,-35,-41,-39,-34,-33,-64,-70,48,48,-51,-53,-66,48,48,-45,48,-120,-119,-106,48,48,48,-104,-107,48,48,48,48,48,-110,-109,48,-108,48,48,-105,-113,-112,-111,48,-114,]),'PRINT':([9,15,20,22,30,32,33,34,38,39,40,42,43,44,45,46,47,48,49,51,52,53,54,56,61,66,68,69,70,71,72,73,74,77,84,92,103,106,107,109,113,129,130,131,132,134,142,148,154,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,178,179,180,185,186,189,190,191,192,197,198,199,200,202,205,206,207,208,209,210,211,213,214,215,216,217,218,],[-18,-85,36,-10,-86,-94,-116,-44,-58,-99,-95,-69,-20,-98,-102,-96,-100,-21,-46,-12,-101,-30,-19,-61,-50,-97,-57,-67,-59,36,-115,36,-56,-11,-44,-117,-54,-55,-49,-47,-48,-62,36,-13,-63,-103,-68,-52,-60,-118,-42,-43,-37,-32,-40,-38,-31,-36,-35,-41,-39,-34,-33,-64,-70,36,-51,-53,-45,36,-120,-119,-106,36,-104,-107,36,36,36,36,-110,-109,36,-108,36,36,-105,-113,-112,-111,36,-114,]),'DIFF':([9,34,38,43,48,49,53,54,61,68,69,70,74,84,87,103,106,107,109,113,148,154,157,158,159,160,161,162,163,164,165,166,167,168,169,179,180,185,],[-18,-44,-58,-20,-21,-46,-30,-19,-50,-57,125,-59,-56,-44,125,-54,-55,-49,-47,-48,-52,-60,125,125,125,125,125,125,125,125,125,125,125,125,125,-51,-53,-45,]),'MINUS':([9,15,20,22,26,28,30,32,33,34,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,58,59,60,61,62,63,64,66,67,68,69,70,71,72,73,74,77,84,87,90,92,93,94,95,96,97,98,99,101,102,103,104,105,106,107,108,109,110,113,114,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,142,148,149,150,151,153,154,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,173,178,179,180,181,182,184,185,186,189,190,191,192,194,195,197,198,199,200,202,204,205,206,207,208,209,210,211,213,214,215,216,217,218,],[-18,-85,41,-10,41,41,-86,-94,41,-44,-58,-99,-95,-80,-69,-20,-98,-102,-96,-100,-21,-46,-79,-12,-101,-30,-19,41,-61,41,-77,-81,-50,41,41,-78,-97,41,-57,127,-59,41,-115,41,-56,-11,-44,127,41,-117,-73,-74,-75,-76,-72,41,-71,41,41,-54,41,41,-55,-49,41,-47,41,-48,41,41,41,41,41,41,41,41,41,41,41,41,41,41,-62,41,-13,-63,41,-103,-68,-52,41,-65,41,41,-60,-118,127,127,127,127,127,127,127,127,127,127,127,127,127,-64,-70,41,41,-51,-53,-66,41,41,-45,41,-120,-119,-106,41,41,41,-104,-107,41,41,41,41,41,-110,-109,41,-108,41,41,-105,-113,-112,-111,41,-114,]),'HE':([9,34,38,43,48,49,53,54,61,68,69,70,74,84,87,103,106,107,109,113,148,154,157,158,159,160,161,162,163,164,165,166,167,168,169,179,180,185,],[-18,-44,-58,-20,-21,-46,-30,-19,-50,-57,126,-59,-56,-44,126,-54,-55,-49,-47,-48,-52,-60,126,126,126,126,126,126,126,126,126,126,126,126,126,-51,-53,-45,]),'ASSIGN_PLUS':([9,34,38,43,48,49,54,61,68,70,74,84,103,106,107,109,113,148,154,179,180,185,],[-18,95,-58,-20,-21,-46,-19,-50,-57,-59,-56,-44,-54,-55,-49,-47,-48,-52,-60,-51,-53,-45,]),'INT_CONST':([9,15,20,22,26,28,30,32,33,34,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,58,59,60,61,62,63,64,66,67,68,69,70,71,72,73,74,77,84,90,92,93,94,95,96,97,98,99,101,102,103,104,105,106,107,108,109,110,113,114,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,142,148,149,150,151,153,154,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,173,178,179,180,181,182,184,185,186,189,190,191,192,194,195,197,198,199,200,202,204,205,206,207,208,209,210,211,213,214,215,216,217,218,],[-18,-85,43,-10,43,43,-86,-94,43,-44,-58,-99,-95,-80,-69,-20,-98,-102,-96,-100,-21,-46,-79,-12,-101,-30,-19,43,-61,43,-77,-81,-50,43,43,-78,-97,43,-57,-67,-59,43,-115,43,-56,-11,-44,43,-117,-73,-74,-75,-76,-72,43,-71,43,43,-54,43,43,-55,-49,43,-47,43,-48,43,43,43,43,43,43,43,43,43,43,43,43,43,43,-62,43,-13,-63,43,-103,-68,-52,43,-65,43,43,-60,-118,-42,-43,-37,-32,-40,-38,-31,-36,-35,-41,-39,-34,-33,-64,-70,43,43,-51,-53,-66,43,43,-45,43,-120,-119,-106,43,43,43,-104,-107,43,43,43,43,43,-110,-109,43,-108,43,43,-105,-113,-112,-111,43,-114,]),'LE':([9,34,38,43,48,49,53,54,61,68,69,70,74,84,87,103,106,107,109,113,148,154,157,158,159,160,161,162,163,164,165,166,167,168,169,179,180,185,],[-18,-44,-58,-20,-21,-46,-30,-19,-50,-57,118,-59,-56,-44,118,-54,-55,-49,-47,-48,-52,-60,118,118,118,118,118,118,118,118,118,118,118,118,118,-51,-53,-45,]),'RPAREN':([2,3,9,11,12,14,19,25,31,34,38,42,43,48,49,53,54,61,68,69,70,74,80,81,82,83,84,85,103,105,106,107,109,111,112,113,135,136,138,139,142,143,144,145,146,148,149,150,154,155,157,158,159,160,161,162,163,164,165,166,167,168,169,171,172,176,179,180,181,182,185,193,194,195,201,203,204,212,],[-14,-15,-18,-16,-17,-22,31,80,-23,-44,-58,-69,-20,-21,-46,-30,-19,-50,-57,-67,-59,-56,-27,136,-82,138,-44,-24,-54,148,-55,-49,-47,153,154,-48,-84,-26,-28,-25,-68,-121,175,177,178,-52,180,-65,-60,186,-42,-43,-37,-32,-40,-38,-31,-36,-35,-41,-39,-34,-33,-70,-83,-122,-51,-53,-66,192,-45,199,200,202,208,210,211,217,]),'SEMI':([2,3,4,9,11,12,14,15,16,17,20,22,24,30,31,32,33,34,38,39,40,42,43,44,45,46,47,48,49,51,52,53,54,56,61,66,68,69,70,71,72,73,74,75,77,78,80,84,85,88,89,92,103,106,107,108,109,113,115,129,130,131,132,134,136,138,139,142,148,151,152,154,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,174,175,177,178,179,180,183,184,185,186,188,189,190,191,192,196,197,198,199,200,202,205,206,207,208,209,210,211,213,214,215,216,217,218,],[-14,-15,15,-18,-16,-17,-22,-85,-87,30,45,-10,15,-86,-23,-94,-116,-44,-58,-99,-95,-69,-20,-98,-102,-96,-100,-21,-46,-12,-101,-30,-19,-61,-50,-97,-57,-67,-59,45,-115,45,-56,134,-11,-87,-27,-44,-24,-88,-89,-117,-54,-55,-49,151,-47,-48,156,-62,45,-13,-63,-103,-26,-28,-25,-68,-52,182,184,-60,-118,-42,-43,-37,-32,-40,-38,-31,-36,-35,-41,-39,-34,-33,-64,-70,-90,189,190,45,-51,-53,194,195,-45,45,-91,-120,-119,-106,45,204,-104,-107,45,45,45,45,-110,-109,45,-108,45,45,-105,-113,-112,-111,45,-114,]),'LT':([9,34,38,43,48,49,53,54,61,68,69,70,74,84,87,103,106,107,109,113,148,154,157,158,159,160,161,162,163,164,165,166,167,168,169,179,180,185,],[-18,-44,-58,-20,-21,-46,-30,-19,-50,-57,123,-59,-56,-44,123,-54,-55,-49,-47,-48,-52,-60,123,123,123,123,123,123,123,123,123,123,123,123,123,-51,-53,-45,]),'PLUS':([9,15,20,22,26,28,30,32,33,34,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,58,59,60,61,62,63,64,66,67,68,69,70,71,72,73,74,77,84,87,90,92,93,94,95,96,97,98,99,101,102,103,104,105,106,107,108,109,110,113,114,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,142,148,149,150,151,153,154,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,173,178,179,180,181,182,184,185,186,189,190,191,192,194,195,197,198,199,200,202,204,205,206,207,208,209,210,211,213,214,215,216,217,218,],[-18,-85,50,-10,50,50,-86,-94,50,-44,-58,-99,-95,-80,-69,-20,-98,-102,-96,-100,-21,-46,-79,-12,-101,-30,-19,50,-61,50,-77,-81,-50,50,50,-78,-97,50,-57,124,-59,50,-115,50,-56,-11,-44,124,50,-117,-73,-74,-75,-76,-72,50,-71,50,50,-54,50,50,-55,-49,50,-47,50,-48,50,50,50,50,50,50,50,50,50,50,50,50,50,50,-62,50,-13,-63,50,-103,-68,-52,50,-65,50,50,-60,-118,124,124,124,124,124,124,124,124,124,124,124,124,124,-64,-70,50,50,-51,-53,-66,50,50,-45,50,-120,-119,-106,50,50,50,-104,-107,50,50,50,50,50,-110,-109,50,-108,50,50,-105,-113,-112,-111,50,-114,]),'COMMA':([9,14,31,34,38,42,43,48,49,53,54,61,68,69,70,74,75,80,81,82,84,85,89,92,103,106,107,109,112,113,115,135,136,138,139,140,141,142,145,146,147,148,152,154,155,157,158,159,160,161,162,163,164,165,166,167,168,169,171,172,174,179,180,183,185,187,188,193,196,201,203,212,],[-18,-22,-23,-44,-58,-69,-20,-21,-46,-30,-19,-50,-57,-67,-59,-56,133,-27,137,-82,-44,-24,-89,133,-54,-55,-49,-47,133,-48,133,-84,-26,-28,-25,-92,173,-68,133,133,133,-52,133,-60,133,-42,-43,-37,-32,-40,-38,-31,-36,-35,-41,-39,-34,-33,-70,-83,-90,-51,-53,133,-45,-93,-91,133,133,133,133,133,]),'$end':([1,5,6,8,10,15,18,21,27,30,56,76,91,129,132,170,],[-2,-1,0,-5,-4,-85,-3,-6,-8,-86,-61,-7,-9,-62,-63,-64,]),'ASSIGN_MOD':([9,34,38,43,48,49,54,61,68,70,74,84,103,106,107,109,113,148,154,179,180,185,],[-18,94,-58,-20,-21,-46,-19,-50,-57,-59,-56,-44,-54,-55,-49,-47,-48,-52,-60,-51,-53,-45,]),'STRING':([9,15,20,22,26,28,30,32,33,34,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,58,59,60,61,62,63,64,66,67,68,69,70,71,72,73,74,77,84,90,92,93,94,95,96,97,98,99,101,102,103,104,105,106,107,108,109,110,113,114,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,142,148,149,150,151,153,154,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,173,178,179,180,181,182,184,185,186,189,190,191,192,194,195,197,198,199,200,202,204,205,206,207,208,209,210,211,213,214,215,216,217,218,],[-18,-85,54,-10,54,54,-86,-94,54,-44,-58,-99,-95,-80,-69,-20,-98,-102,-96,-100,-21,-46,-79,-12,-101,-30,-19,54,-61,54,-77,-81,-50,54,54,-78,-97,54,-57,-67,-59,54,-115,54,-56,-11,-44,54,-117,-73,-74,-75,-76,-72,54,-71,54,54,-54,54,54,-55,-49,54,-47,54,-48,54,54,54,54,54,54,54,54,54,54,54,54,54,54,-62,54,-13,-63,54,-103,-68,-52,54,-65,54,54,-60,-118,-42,-43,-37,-32,-40,-38,-31,-36,-35,-41,-39,-34,-33,-64,-70,54,54,-51,-53,-66,54,54,-45,54,-120,-119,-106,54,54,54,-104,-107,54,54,54,54,54,-110,-109,54,-108,54,54,-105,-113,-112,-111,54,-114,]),'FOR':([9,15,20,22,30,32,33,34,38,39,40,42,43,44,45,46,47,48,49,51,52,53,54,56,61,66,68,69,70,71,72,73,74,77,84,92,103,106,107,109,113,129,130,131,132,134,142,148,154,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,178,179,180,185,186,189,190,191,192,197,198,199,200,202,205,206,207,208,209,210,211,213,214,215,216,217,218,],[-18,-85,57,-10,-86,-94,-116,-44,-58,-99,-95,-69,-20,-98,-102,-96,-100,-21,-46,-12,-101,-30,-19,-61,-50,-97,-57,-67,-59,57,-115,57,-56,-11,-44,-117,-54,-55,-49,-47,-48,-62,57,-13,-63,-103,-68,-52,-60,-118,-42,-43,-37,-32,-40,-38,-31,-36,-35,-41,-39,-34,-33,-64,-70,57,-51,-53,-45,57,-120,-119,-106,57,-104,-107,57,57,57,57,-110,-109,57,-108,57,57,-105,-113,-112,-111,57,-114,]),'PLUSPLUS':([9,15,20,22,26,28,30,32,33,34,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,58,59,60,61,62,63,64,66,67,68,69,70,71,72,73,74,77,84,90,92,93,94,95,96,97,98,99,101,102,103,104,105,106,107,108,109,110,113,114,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,142,148,149,150,151,153,154,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,173,178,179,180,181,182,184,185,186,189,190,191,192,194,195,197,198,199,200,202,204,205,206,207,208,209,210,211,213,214,215,216,217,218,],[-18,-85,58,-10,58,58,-86,-94,58,-44,-58,-99,-95,-80,-69,-20,-98,-102,-96,-100,-21,103,-79,-12,-101,-30,-19,58,-61,58,-77,-81,-50,58,58,-78,-97,58,-57,-67,-59,58,-115,58,-56,-11,-44,58,-117,-73,-74,-75,-76,-72,58,-71,58,58,-54,58,58,-55,-49,58,-47,58,-48,58,58,58,58,58,58,58,58,58,58,58,58,58,58,-62,58,-13,-63,58,-103,-68,-52,58,-65,58,58,-60,-118,-42,-43,-37,-32,-40,-38,-31,-36,-35,-41,-39,-34,-33,-64,-70,58,58,-51,-53,-66,58,58,-45,58,-120,-119,-106,58,58,58,-104,-107,58,58,58,58,58,-110,-109,58,-108,58,58,-105,-113,-112,-111,58,-114,]),'EQUALS':([9,34,38,43,48,49,53,54,61,68,69,70,74,84,87,103,106,107,109,113,148,154,157,158,159,160,161,162,163,164,165,166,167,168,169,179,180,185,],[-18,-44,-58,-20,-21,-46,-30,-19,-50,-57,120,-59,-56,-44,120,-54,-55,-49,-47,-48,-52,-60,120,120,120,120,120,120,120,120,120,120,120,120,120,-51,-53,-45,]),'RBRACE':([9,15,20,22,30,32,33,34,38,39,40,42,43,44,45,46,47,48,49,51,52,53,54,56,61,66,68,69,70,71,72,73,74,77,84,89,92,103,106,107,109,113,129,130,131,132,134,140,141,142,148,154,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,173,174,179,180,185,187,188,189,190,191,197,198,206,207,209,213,214,215,216,218,],[-18,-85,56,-10,-86,-94,-116,-44,-58,-99,-95,-69,-20,-98,-102,-96,-100,-21,-46,-12,-101,-30,-19,-61,-50,-97,-57,-67,-59,129,-115,132,-56,-11,-44,-89,-117,-54,-55,-49,-47,-48,-62,170,-13,-63,-103,-92,174,-68,-52,-60,-118,-42,-43,-37,-32,-40,-38,-31,-36,-35,-41,-39,-34,-33,-64,-70,188,-90,-51,-53,-45,-93,-91,-120,-119,-106,-104,-107,-110,-109,-108,-105,-113,-112,-111,-114,]),'TIMES':([9,15,20,22,26,28,30,32,33,34,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,58,59,60,61,62,63,64,66,67,68,69,70,71,72,73,74,77,84,87,90,92,93,94,95,96,97,98,99,101,102,103,104,105,106,107,108,109,110,113,114,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,142,148,149,150,151,153,154,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,173,178,179,180,181,182,184,185,186,189,190,191,192,194,195,197,198,199,200,202,204,205,206,207,208,209,210,211,213,214,215,216,217,218,],[-18,-85,64,-10,64,64,-86,-94,64,-44,-58,-99,-95,-80,-69,-20,-98,-102,-96,-100,-21,-46,-79,-12,-101,-30,-19,64,-61,64,-77,-81,-50,64,64,-78,-97,64,-57,122,-59,64,-115,64,-56,-11,-44,122,64,-117,-73,-74,-75,-76,-72,64,-71,64,64,-54,64,64,-55,-49,64,-47,64,-48,64,64,64,64,64,64,64,64,64,64,64,64,64,64,-62,64,-13,-63,64,-103,-68,-52,64,-65,64,64,-60,-118,122,122,122,122,122,122,122,122,122,122,122,122,122,-64,-70,64,64,-51,-53,-66,64,64,-45,64,-120,-119,-106,64,64,64,-104,-107,64,64,64,64,64,-110,-109,64,-108,64,64,-105,-113,-112,-111,64,-114,]),'ASSERT':([9,15,20,22,30,32,33,34,38,39,40,42,43,44,45,46,47,48,49,51,52,53,54,56,61,66,68,69,70,71,72,73,74,77,84,92,103,106,107,109,113,129,130,131,132,134,142,148,154,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,178,179,180,185,186,189,190,191,192,197,198,199,200,202,205,206,207,208,209,210,211,213,214,215,216,217,218,],[-18,-85,67,-10,-86,-94,-116,-44,-58,-99,-95,-69,-20,-98,-102,-96,-100,-21,-46,-12,-101,-30,-19,-61,-50,-97,-57,-67,-59,67,-115,67,-56,-11,-44,-117,-54,-55,-49,-47,-48,-62,67,-13,-63,-103,-68,-52,-60,-118,-42,-43,-37,-32,-40,-38,-31,-36,-35,-41,-39,-34,-33,-64,-70,67,-51,-53,-45,67,-120,-119,-106,67,-104,-107,67,67,67,67,-110,-109,67,-108,67,67,-105,-113,-112,-111,67,-114,]),'ASSIGN_TIMES':([9,34,38,43,48,49,54,61,68,70,74,84,103,106,107,109,113,148,154,179,180,185,],[-18,97,-58,-20,-21,-46,-19,-50,-57,-59,-56,-44,-54,-55,-49,-47,-48,-52,-60,-51,-53,-45,]),'ASSIGN_MINUS':([9,34,38,43,48,49,54,61,68,70,74,84,103,106,107,109,113,148,154,179,180,185,],[-18,96,-58,-20,-21,-46,-19,-50,-57,-59,-56,-44,-54,-55,-49,-47,-48,-52,-60,-51,-53,-45,]),'LPAREN':([0,1,2,3,4,5,7,8,9,10,11,12,13,14,15,16,18,19,20,21,22,24,26,27,28,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,76,77,78,79,80,84,85,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,113,114,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,138,139,142,143,144,148,149,150,151,153,154,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,173,176,178,179,180,181,182,184,185,186,189,190,191,192,194,195,197,198,199,200,202,204,205,206,207,208,209,210,211,213,214,215,216,217,218,],[7,-2,-14,-15,7,7,7,-5,-18,-4,-16,-17,25,-22,-85,25,-3,25,62,-6,-10,7,62,-8,62,-86,-23,-94,62,-44,100,101,102,-58,-99,-95,-80,-69,-20,-98,-102,-96,-100,-21,105,-79,-12,-101,-30,-19,62,-61,108,110,-77,-81,-50,62,110,-78,114,-97,62,-57,-67,-59,62,-115,62,-56,-7,-11,25,7,-27,-44,-24,62,-9,-117,-73,-74,-75,-76,-72,62,-71,7,62,62,-54,62,62,-55,-49,62,-47,62,-48,62,62,62,62,62,62,62,62,62,62,62,62,62,62,-62,62,-13,-63,62,-103,25,-26,-28,-25,-68,25,7,-52,62,-65,62,62,-60,-118,-42,-43,-37,-32,-40,-38,-31,-36,-35,-41,-39,-34,-33,-64,-70,62,25,62,-51,-53,-66,62,62,-45,62,-120,-119,-106,62,62,62,-104,-107,62,62,62,62,62,-110,-109,62,-108,62,62,-105,-113,-112,-111,62,-114,]),'MINUSMINUS':([9,15,20,22,26,28,30,32,33,34,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,58,59,60,61,62,63,64,66,67,68,69,70,71,72,73,74,77,84,90,92,93,94,95,96,97,98,99,101,102,103,104,105,106,107,108,109,110,113,114,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,142,148,149,150,151,153,154,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,173,178,179,180,181,182,184,185,186,189,190,191,192,194,195,197,198,199,200,202,204,205,206,207,208,209,210,211,213,214,215,216,217,218,],[-18,-85,63,-10,63,63,-86,-94,63,-44,-58,-99,-95,-80,-69,-20,-98,-102,-96,-100,-21,106,-79,-12,-101,-30,-19,63,-61,63,-77,-81,-50,63,63,-78,-97,63,-57,-67,-59,63,-115,63,-56,-11,-44,63,-117,-73,-74,-75,-76,-72,63,-71,63,63,-54,63,63,-55,-49,63,-47,63,-48,63,63,63,63,63,63,63,63,63,63,63,63,63,63,-62,63,-13,-63,63,-103,-68,-52,63,-65,63,63,-60,-118,-42,-43,-37,-32,-40,-38,-31,-36,-35,-41,-39,-34,-33,-64,-70,63,63,-51,-53,-66,63,63,-45,63,-120,-119,-106,63,63,63,-104,-107,63,63,63,63,63,-110,-109,63,-108,63,63,-105,-113,-112,-111,63,-114,]),'ELSE':([9,32,33,34,38,39,40,42,43,44,45,46,47,48,49,52,53,54,56,61,66,68,69,70,72,74,84,92,103,106,107,109,113,129,132,134,142,148,154,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,179,180,185,189,190,191,197,198,206,207,209,213,214,215,216,218,],[-18,-94,-116,-44,-58,-99,-95,-69,-20,-98,-102,-96,-100,-21,-46,-101,-30,-19,-61,-50,-97,-57,-67,-59,-115,-56,-44,-117,-54,-55,-49,-47,-48,-62,-63,-103,-68,-52,-60,-118,-42,-43,-37,-32,-40,-38,-31,-36,-35,-41,-39,-34,-33,-64,-70,-51,-53,-45,-120,-119,-106,205,-107,-110,-109,-108,-105,-113,-112,-111,-114,]),'EQ':([9,14,16,31,34,38,43,48,49,54,61,68,70,74,78,80,84,85,103,106,107,109,113,136,138,139,148,154,179,180,185,],[-18,-22,28,-23,99,-58,-20,-21,-46,-19,-50,-57,-59,-56,28,-27,-44,-24,-54,-55,-49,-47,-48,-26,-28,-25,-52,-60,-51,-53,-45,]),'ID':([0,1,2,3,4,5,7,8,9,10,11,12,14,15,18,20,21,22,24,25,26,27,28,30,31,32,33,34,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,58,59,60,61,62,63,64,66,67,68,69,70,71,72,73,74,76,77,79,80,84,85,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,113,114,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,136,138,139,142,143,144,148,149,150,151,153,154,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,173,176,178,179,180,181,182,184,185,186,189,190,191,192,194,195,197,198,199,200,202,204,205,206,207,208,209,210,211,213,214,215,216,217,218,],[9,-2,-14,-15,9,9,9,-5,-18,-4,-16,-17,-22,-85,-3,9,-6,-10,9,9,9,-8,9,-86,-23,-94,9,-44,-58,-99,-95,-80,-69,-20,-98,-102,-96,-100,-21,-46,-79,-12,-101,-30,-19,9,-61,9,-77,-81,-50,9,9,-78,-97,9,-57,-67,-59,9,-115,9,-56,-7,-11,9,-27,-44,-24,9,-9,-117,-73,-74,-75,-76,-72,9,-71,9,9,9,-54,9,9,-55,-49,9,-47,9,-48,9,9,9,9,9,9,9,9,9,9,9,9,9,9,-62,9,-13,-63,9,-103,-26,-28,-25,-68,-121,9,-52,9,-65,9,9,-60,-118,-42,-43,-37,-32,-40,-38,-31,-36,-35,-41,-39,-34,-33,-64,-70,9,-122,9,-51,-53,-66,9,9,-45,9,-120,-119,-106,9,9,9,-104,-107,9,9,9,9,9,-110,-109,9,-108,9,9,-105,-113,-112,-111,9,-114,]),'IF':([9,15,20,22,30,32,33,34,38,39,40,42,43,44,45,46,47,48,49,51,52,53,54,56,61,66,68,69,70,71,72,73,74,77,84,92,103,106,107,109,113,129,130,131,132,134,142,148,154,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,178,179,180,185,186,189,190,191,192,197,198,199,200,202,205,206,207,208,209,210,211,213,214,215,216,217,218,],[-18,-85,65,-10,-86,-94,-116,-44,-58,-99,-95,-69,-20,-98,-102,-96,-100,-21,-46,-12,-101,-30,-19,-61,-50,-97,-57,-67,-59,65,-115,65,-56,-11,-44,-117,-54,-55,-49,-47,-48,-62,65,-13,-63,-103,-68,-52,-60,-118,-42,-43,-37,-32,-40,-38,-31,-36,-35,-41,-39,-34,-33,-64,-70,65,-51,-53,-45,65,-120,-119,-106,65,-104,-107,65,65,65,65,-110,-109,65,-108,65,65,-105,-113,-112,-111,65,-114,]),'AND':([9,34,38,43,48,49,53,54,61,68,69,70,74,84,87,103,106,107,109,113,148,154,157,158,159,160,161,162,163,164,165,166,167,168,169,179,180,185,],[-18,-44,-58,-20,-21,-46,-30,-19,-50,-57,116,-59,-56,-44,116,-54,-55,-49,-47,-48,-52,-60,116,116,116,116,116,116,116,116,116,116,116,116,116,-51,-53,-45,]),'CHAR':([0,1,5,8,9,10,13,14,15,16,18,20,21,22,23,25,27,29,30,31,56,62,71,76,77,80,85,91,129,132,136,137,138,139,170,],[3,-2,3,-5,-18,-4,3,-22,-85,3,-3,3,-6,-10,3,3,-8,3,-86,-23,-61,3,3,-7,-11,-27,-24,-9,-62,-63,-26,3,-28,-25,-64,]),'LBRACE':([9,13,14,15,16,20,22,23,28,29,30,31,32,33,34,38,39,40,42,43,44,45,46,47,48,49,51,52,53,54,56,61,66,68,69,70,71,72,73,74,77,80,84,85,90,92,103,106,107,109,113,129,130,131,132,134,136,138,139,142,148,154,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,173,178,179,180,185,186,189,190,191,192,197,198,199,200,202,205,206,207,208,209,210,211,213,214,215,216,217,218,],[-18,20,-22,-85,20,20,-10,20,90,20,-86,-23,-94,-116,-44,-58,-99,-95,-69,-20,-98,-102,-96,-100,-21,-46,-12,-101,-30,-19,-61,-50,-97,-57,-67,-59,20,-115,20,-56,-11,-27,-44,-24,90,-117,-54,-55,-49,-47,-48,-62,20,-13,-63,-103,-26,-28,-25,-68,-52,-60,-118,-42,-43,-37,-32,-40,-38,-31,-36,-35,-41,-39,-34,-33,-64,-70,90,20,-51,-53,-45,20,-120,-119,-106,20,-104,-107,20,20,20,20,-110,-109,20,-108,20,20,-105,-113,-112,-111,20,-114,]),'INT':([0,1,5,8,9,10,13,14,15,16,18,20,21,22,23,25,27,29,30,31,56,62,71,76,77,80,85,91,129,132,136,137,138,139,170,],[11,-2,11,-5,-18,-4,11,-22,-85,11,-3,11,-6,-10,11,11,-8,11,-86,-23,-61,11,11,-7,-11,-27,-24,-9,-62,-63,-26,11,-28,-25,-64,]),'FLOAT':([0,1,5,8,9,10,13,14,15,16,18,20,21,22,23,25,27,29,30,31,56,62,71,76,77,80,85,91,129,132,136,137,138,139,170,],[12,-2,12,-5,-18,-4,12,-22,-85,12,-3,12,-6,-10,12,12,-8,12,-86,-23,-61,12,12,-7,-11,-27,-24,-9,-62,-63,-26,12,-28,-25,-64,]),'BREAK':([9,15,20,22,30,32,33,34,38,39,40,42,43,44,45,46,47,48,49,51,52,53,54,56,61,66,68,69,70,71,72,73,74,77,84,92,103,106,107,109,113,129,130,131,132,134,142,148,154,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,178,179,180,185,186,189,190,191,192,197,198,199,200,202,205,206,207,208,209,210,211,213,214,215,216,217,218,],[-18,-85,72,-10,-86,-94,-116,-44,-58,-99,-95,-69,-20,-98,-102,-96,-100,-21,-46,-12,-101,-30,-19,-61,-50,-97,-57,-67,-59,72,-115,72,-56,-11,-44,-117,-54,-55,-49,-47,-48,-62,72,-13,-63,-103,-68,-52,-60,-118,-42,-43,-37,-32,-40,-38,-31,-36,-35,-41,-39,-34,-33,-64,-70,72,-51,-53,-45,72,-120,-119,-106,72,-104,-107,72,72,72,72,-110,-109,72,-108,72,72,-105,-113,-112,-111,72,-114,]),'ADDRESS':([9,15,20,22,26,28,30,32,33,34,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,58,59,60,61,62,63,64,66,67,68,69,70,71,72,73,74,77,84,90,92,93,94,95,96,97,98,99,101,102,103,104,105,106,107,108,109,110,113,114,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,142,148,149,150,151,153,154,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,173,178,179,180,181,182,184,185,186,189,190,191,192,194,195,197,198,199,200,202,204,205,206,207,208,209,210,211,213,214,215,216,217,218,],[-18,-85,59,-10,59,59,-86,-94,59,-44,-58,-99,-95,-80,-69,-20,-98,-102,-96,-100,-21,-46,-79,-12,-101,-30,-19,59,-61,59,-77,-81,-50,59,59,-78,-97,59,-57,-67,-59,59,-115,59,-56,-11,-44,59,-117,-73,-74,-75,-76,-72,59,-71,59,59,-54,59,59,-55,-49,59,-47,59,-48,59,59,59,59,59,59,59,59,59,59,59,59,59,59,-62,59,-13,-63,59,-103,-68,-52,59,-65,59,59,-60,-118,-42,-43,-37,-32,-40,-38,-31,-36,-35,-41,-39,-34,-33,-64,-70,59,59,-51,-53,-66,59,59,-45,59,-120,-119,-106,59,59,59,-104,-107,59,59,59,59,59,-110,-109,59,-108,59,59,-105,-113,-112,-111,59,-114,]),'NOT':([9,15,20,22,26,28,30,32,33,34,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,58,59,60,61,62,63,64,66,67,68,69,70,71,72,73,74,77,84,90,92,93,94,95,96,97,98,99,101,102,103,104,105,106,107,108,109,110,113,114,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,142,148,149,150,151,153,154,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,173,178,179,180,181,182,184,185,186,189,190,191,192,194,195,197,198,199,200,202,204,205,206,207,208,209,210,211,213,214,215,216,217,218,],[-18,-85,60,-10,60,60,-86,-94,60,-44,-58,-99,-95,-80,-69,-20,-98,-102,-96,-100,-21,-46,-79,-12,-101,-30,-19,60,-61,60,-77,-81,-50,60,60,-78,-97,60,-57,-67,-59,60,-115,60,-56,-11,-44,60,-117,-73,-74,-75,-76,-72,60,-71,60,60,-54,60,60,-55,-49,60,-47,60,-48,60,60,60,60,60,60,60,60,60,60,60,60,60,60,-62,60,-13,-63,60,-103,-68,-52,60,-65,60,60,-60,-118,-42,-43,-37,-32,-40,-38,-31,-36,-35,-41,-39,-34,-33,-64,-70,60,60,-51,-53,-66,60,60,-45,60,-120,-119,-106,60,60,60,-104,-107,60,60,60,60,60,-110,-109,60,-108,60,60,-105,-113,-112,-111,60,-114,]),'RBRACKET':([9,13,14,16,19,31,34,38,42,43,48,49,53,54,61,68,69,70,74,78,80,84,85,103,106,107,109,113,135,136,138,139,142,143,147,148,154,157,158,159,160,161,162,163,164,165,166,167,168,169,171,176,179,180,185,],[-18,26,-22,26,26,-23,-44,-58,-69,-20,-21,-46,-30,-19,-50,-57,-67,-59,-56,26,-27,-44,-24,-54,-55,-49,-47,-48,26,-26,-28,-25,-68,26,179,-52,-60,-42,-43,-37,-32,-40,-38,-31,-36,-35,-41,-39,-34,-33,-70,26,-51,-53,-45,]),'OR':([9,34,38,43,48,49,53,54,61,68,69,70,74,84,87,103,106,107,109,113,148,154,157,158,159,160,161,162,163,164,165,166,167,168,169,179,180,185,],[-18,-44,-58,-20,-21,-46,-30,-19,-50,-57,117,-59,-56,-44,117,-54,-55,-49,-47,-48,-52,-60,117,117,117,117,117,117,117,117,117,117,117,117,117,-51,-53,-45,]),'MOD':([9,34,38,43,48,49,53,54,61,68,69,70,74,84,87,103,106,107,109,113,148,154,157,158,159,160,161,162,163,164,165,166,167,168,169,179,180,185,],[-18,-44,-58,-20,-21,-46,-30,-19,-50,-57,128,-59,-56,-44,128,-54,-55,-49,-47,-48,-52,-60,128,128,128,128,128,128,128,128,128,128,128,128,128,-51,-53,-45,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'expression_statement':([20,71,73,130,178,186,192,199,200,202,205,208,210,211,217,],[32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'unary_expression':([20,26,28,33,55,58,62,63,67,71,73,90,98,101,102,104,105,108,110,114,116,117,118,119,120,121,122,123,124,125,126,127,128,130,133,149,151,153,173,178,182,184,186,192,194,195,199,200,202,204,205,208,210,211,217,],[34,84,34,34,84,109,34,113,34,34,34,34,34,34,34,34,34,34,34,34,84,84,84,84,84,84,84,84,84,84,84,84,84,34,34,34,34,84,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'initializer':([28,90,173,],[88,140,187,]),'frase':([20,26,28,33,55,58,62,63,67,71,73,90,98,101,102,104,105,108,110,114,116,117,118,119,120,121,122,123,124,125,126,127,128,130,133,149,151,153,173,178,182,184,186,192,194,195,199,200,202,204,205,208,210,211,217,],[70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,70,]),'float_const':([20,26,28,33,55,58,62,63,67,71,73,90,98,101,102,104,105,108,110,114,116,117,118,119,120,121,122,123,124,125,126,127,128,130,133,149,151,153,173,178,182,184,186,192,194,195,199,200,202,204,205,208,210,211,217,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'print_statement':([20,71,73,130,178,186,192,199,200,202,205,208,210,211,217,],[39,39,39,39,39,39,39,39,39,39,39,39,39,39,39,]),'iteration_statement':([20,71,73,130,178,186,192,199,200,202,205,208,210,211,217,],[40,40,40,40,40,40,40,40,40,40,40,40,40,40,40,]),'type_specifier':([0,5,13,16,20,23,25,29,62,71,137,],[4,4,24,24,24,24,79,24,111,24,79,]),'assert_statement':([20,71,73,130,178,186,192,199,200,202,205,208,210,211,217,],[44,44,44,44,44,44,44,44,44,44,44,44,44,44,44,]),'compound_statement':([13,16,20,23,29,71,73,130,178,186,192,199,200,202,205,208,210,211,217,],[21,27,46,76,91,46,46,46,46,46,46,46,46,46,46,46,46,46,46,]),'assignment_expression_list':([105,],[149,]),'selection_statement':([20,71,73,130,178,186,192,199,200,202,205,208,210,211,217,],[47,47,47,47,47,47,47,47,47,47,47,47,47,47,47,]),'postfix_expression':([20,26,28,33,55,58,62,63,67,71,73,90,98,101,102,104,105,108,110,114,116,117,118,119,120,121,122,123,124,125,126,127,128,130,133,149,151,153,173,178,182,184,186,192,194,195,199,200,202,204,205,208,210,211,217,],[49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,49,]),'global_declaration_list':([0,],[5,]),'program':([0,],[6,]),'statement':([20,71,73,130,178,186,192,199,200,202,205,208,210,211,217,],[51,51,131,131,191,197,198,206,207,209,213,214,215,216,218,]),'read_statement':([20,71,73,130,178,186,192,199,200,202,205,208,210,211,217,],[52,52,52,52,52,52,52,52,52,52,52,52,52,52,52,]),'cast_expression':([20,26,28,33,55,62,67,71,73,90,98,101,102,104,105,108,110,114,116,117,118,119,120,121,122,123,124,125,126,127,128,130,133,149,151,153,173,178,182,184,186,192,194,195,199,200,202,204,205,208,210,211,217,],[53,53,53,53,107,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,185,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,53,]),'initializer_list':([90,],[141,]),'unary_operator':([20,26,28,33,55,58,62,63,67,71,73,90,98,101,102,104,105,108,110,114,116,117,118,119,120,121,122,123,124,125,126,127,128,130,133,149,151,153,173,178,182,184,186,192,194,195,199,200,202,204,205,208,210,211,217,],[55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,55,]),'assignment_operator':([34,],[98,]),'assignment_expression':([20,28,33,62,67,71,73,90,98,101,102,104,105,108,110,114,130,133,149,151,173,178,182,184,186,192,194,195,199,200,202,204,205,208,210,211,217,],[42,89,42,42,42,42,42,89,142,42,42,42,150,42,42,42,42,171,181,42,89,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,42,]),'parameter_declaration':([25,137,],[82,172,]),'declarator':([0,4,5,7,24,79,100,144,],[13,16,13,19,78,135,143,176,]),'primary_expression':([20,26,28,33,55,58,62,63,67,71,73,90,98,101,102,104,105,108,110,114,116,117,118,119,120,121,122,123,124,125,126,127,128,130,133,149,151,153,173,178,182,184,186,192,194,195,199,200,202,204,205,208,210,211,217,],[61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,61,]),'global_declaration':([0,5,],[1,18,]),'declaration':([0,5,13,16,20,23,29,71,],[8,8,22,22,22,77,77,77,]),'declarator_list':([100,],[144,]),'jump_statement':([20,71,73,130,178,186,192,199,200,202,205,208,210,211,217,],[66,66,66,66,66,66,66,66,66,66,66,66,66,66,66,]),'int_const':([20,26,28,33,55,58,62,63,67,71,73,90,98,101,102,104,105,108,110,114,116,117,118,119,120,121,122,123,124,125,126,127,128,130,133,149,151,153,173,178,182,184,186,192,194,195,199,200,202,204,205,208,210,211,217,],[68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,68,]),'function_definition':([0,5,],[10,10,]),'binary_expression':([20,26,28,33,62,67,71,73,90,98,101,102,104,105,108,110,114,116,117,118,119,120,121,122,123,124,125,126,127,128,130,133,149,151,173,178,182,184,186,192,194,195,199,200,202,204,205,208,210,211,217,],[69,87,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,157,158,159,160,161,162,163,164,165,166,167,168,169,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,69,]),'parameter_list':([25,],[81,]),'declaration_list':([13,16,20,],[23,29,71,]),'constant_expression':([26,],[86,]),'init_declarator':([4,24,],[17,17,]),'statement_list':([20,71,],[73,130,]),'identifier':([0,4,5,7,20,24,25,26,28,33,55,58,62,63,67,71,73,79,90,98,100,101,102,104,105,108,110,114,116,117,118,119,120,121,122,123,124,125,126,127,128,130,133,144,149,151,153,173,178,182,184,186,192,194,195,199,200,202,204,205,208,210,211,217,],[14,14,14,14,74,14,83,74,74,74,74,74,74,74,74,74,74,14,74,74,14,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,14,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,74,]),'expression':([20,33,62,67,71,73,101,102,104,108,110,114,130,151,178,182,184,186,192,194,195,199,200,202,204,205,208,210,211,217,],[75,92,112,115,75,75,145,146,147,152,112,155,75,183,75,193,196,75,75,201,203,75,75,75,212,75,75,75,75,75,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> global_declaration_list','program',1,'p_program','parser.py',7),
  ('global_declaration_list -> global_declaration','global_declaration_list',1,'p_global_declaration_list','parser.py',13),
  ('global_declaration_list -> global_declaration_list global_declaration','global_declaration_list',2,'p_global_declaration_list','parser.py',14),
  ('global_declaration -> function_definition','global_declaration',1,'p_global_declaration','parser.py',20),
  ('global_declaration -> declaration','global_declaration',1,'p_global_declaration','parser.py',21),
  ('function_definition -> declarator compound_statement','function_definition',2,'p_function_definition','parser.py',25),
  ('function_definition -> declarator declaration_list compound_statement','function_definition',3,'p_function_definition','parser.py',26),
  ('function_definition -> type_specifier declarator compound_statement','function_definition',3,'p_function_definition','parser.py',27),
  ('function_definition -> type_specifier declarator declaration_list compound_statement','function_definition',4,'p_function_definition','parser.py',28),
  ('declaration_list -> declaration','declaration_list',1,'p_declaration_list','parser.py',33),
  ('declaration_list -> declaration_list declaration','declaration_list',2,'p_declaration_list','parser.py',34),
  ('statement_list -> statement','statement_list',1,'p_statement_list','parser.py',39),
  ('statement_list -> statement_list statement','statement_list',2,'p_statement_list','parser.py',40),
  ('type_specifier -> VOID','type_specifier',1,'p_type_specifier','parser.py',45),
  ('type_specifier -> CHAR','type_specifier',1,'p_type_specifier','parser.py',46),
  ('type_specifier -> INT','type_specifier',1,'p_type_specifier','parser.py',47),
  ('type_specifier -> FLOAT','type_specifier',1,'p_type_specifier','parser.py',48),
  ('identifier -> ID','identifier',1,'p_identifier','parser.py',53),
  ('frase -> STRING','frase',1,'p_frase','parser.py',57),
  ('int_const -> INT_CONST','int_const',1,'p_int_const','parser.py',61),
  ('float_const -> FLOAT_CONST','float_const',1,'p_float_const','parser.py',65),
  ('declarator -> identifier','declarator',1,'p_declarator','parser.py',70),
  ('declarator -> LPAREN declarator RPAREN','declarator',3,'p_declarator','parser.py',71),
  ('declarator -> declarator RBRACKET LBRACKET','declarator',3,'p_declarator','parser.py',72),
  ('declarator -> declarator RBRACKET constant_expression LBRACKET','declarator',4,'p_declarator','parser.py',73),
  ('declarator -> declarator LPAREN parameter_list RPAREN','declarator',4,'p_declarator','parser.py',74),
  ('declarator -> declarator LPAREN RPAREN','declarator',3,'p_declarator','parser.py',75),
  ('declarator -> declarator LPAREN identifier RPAREN','declarator',4,'p_declarator','parser.py',76),
  ('constant_expression -> binary_expression','constant_expression',1,'p_constant_expression','parser.py',81),
  ('binary_expression -> cast_expression','binary_expression',1,'p_binary_expression','parser.py',86),
  ('binary_expression -> binary_expression TIMES binary_expression','binary_expression',3,'p_binary_expression','parser.py',87),
  ('binary_expression -> binary_expression DIVIDE binary_expression','binary_expression',3,'p_binary_expression','parser.py',88),
  ('binary_expression -> binary_expression MOD binary_expression','binary_expression',3,'p_binary_expression','parser.py',89),
  ('binary_expression -> binary_expression MINUS binary_expression','binary_expression',3,'p_binary_expression','parser.py',90),
  ('binary_expression -> binary_expression PLUS binary_expression','binary_expression',3,'p_binary_expression','parser.py',91),
  ('binary_expression -> binary_expression LT binary_expression','binary_expression',3,'p_binary_expression','parser.py',92),
  ('binary_expression -> binary_expression LE binary_expression','binary_expression',3,'p_binary_expression','parser.py',93),
  ('binary_expression -> binary_expression HT binary_expression','binary_expression',3,'p_binary_expression','parser.py',94),
  ('binary_expression -> binary_expression HE binary_expression','binary_expression',3,'p_binary_expression','parser.py',95),
  ('binary_expression -> binary_expression EQUALS binary_expression','binary_expression',3,'p_binary_expression','parser.py',96),
  ('binary_expression -> binary_expression DIFF binary_expression','binary_expression',3,'p_binary_expression','parser.py',97),
  ('binary_expression -> binary_expression AND binary_expression','binary_expression',3,'p_binary_expression','parser.py',98),
  ('binary_expression -> binary_expression OR binary_expression','binary_expression',3,'p_binary_expression','parser.py',99),
  ('cast_expression -> unary_expression','cast_expression',1,'p_cast_expression','parser.py',104),
  ('cast_expression -> LPAREN type_specifier RPAREN cast_expression','cast_expression',4,'p_cast_expression','parser.py',105),
  ('unary_expression -> postfix_expression','unary_expression',1,'p_unary_expression','parser.py',110),
  ('unary_expression -> PLUSPLUS unary_expression','unary_expression',2,'p_unary_expression','parser.py',111),
  ('unary_expression -> MINUSMINUS unary_expression','unary_expression',2,'p_unary_expression','parser.py',112),
  ('unary_expression -> unary_operator cast_expression','unary_expression',2,'p_unary_expression','parser.py',113),
  ('postfix_expression -> primary_expression','postfix_expression',1,'p_postfix_expression','parser.py',118),
  ('postfix_expression -> postfix_expression LBRACKET expression RBRACKET','postfix_expression',4,'p_postfix_expression','parser.py',119),
  ('postfix_expression -> postfix_expression LPAREN RPAREN','postfix_expression',3,'p_postfix_expression','parser.py',120),
  ('postfix_expression -> postfix_expression LPAREN assignment_expression_list RPAREN','postfix_expression',4,'p_postfix_expression','parser.py',121),
  ('postfix_expression -> postfix_expression PLUSPLUS','postfix_expression',2,'p_postfix_expression','parser.py',122),
  ('postfix_expression -> postfix_expression MINUSMINUS','postfix_expression',2,'p_postfix_expression','parser.py',123),
  ('primary_expression -> identifier','primary_expression',1,'p_primary_expression','parser.py',128),
  ('primary_expression -> int_const','primary_expression',1,'p_primary_expression','parser.py',129),
  ('primary_expression -> float_const','primary_expression',1,'p_primary_expression','parser.py',130),
  ('primary_expression -> frase','primary_expression',1,'p_primary_expression','parser.py',131),
  ('primary_expression -> LPAREN expression RPAREN','primary_expression',3,'p_primary_expression','parser.py',132),
  ('compound_statement -> LBRACE RBRACE','compound_statement',2,'p_compound_statement','parser.py',137),
  ('compound_statement -> LBRACE declaration_list RBRACE','compound_statement',3,'p_compound_statement','parser.py',138),
  ('compound_statement -> LBRACE statement_list RBRACE','compound_statement',3,'p_compound_statement','parser.py',139),
  ('compound_statement -> LBRACE declaration_list statement_list RBRACE','compound_statement',4,'p_compound_statement','parser.py',140),
  ('assignment_expression_list -> assignment_expression','assignment_expression_list',1,'p_assignment_expression_list','parser.py',146),
  ('assignment_expression_list -> assignment_expression_list assignment_expression','assignment_expression_list',2,'p_assignment_expression_list','parser.py',147),
  ('assignment_expression -> binary_expression','assignment_expression',1,'p_assignment_expression','parser.py',152),
  ('assignment_expression -> unary_expression assignment_operator assignment_expression','assignment_expression',3,'p_assignment_expression','parser.py',153),
  ('expression -> assignment_expression','expression',1,'p_expression','parser.py',158),
  ('expression -> expression COMMA assignment_expression','expression',3,'p_expression','parser.py',159),
  ('assignment_operator -> EQ','assignment_operator',1,'p_assignment_operator','parser.py',164),
  ('assignment_operator -> ASSIGN_TIMES','assignment_operator',1,'p_assignment_operator','parser.py',165),
  ('assignment_operator -> ASSIGN_DIVIDE','assignment_operator',1,'p_assignment_operator','parser.py',166),
  ('assignment_operator -> ASSIGN_MOD','assignment_operator',1,'p_assignment_operator','parser.py',167),
  ('assignment_operator -> ASSIGN_PLUS','assignment_operator',1,'p_assignment_operator','parser.py',168),
  ('assignment_operator -> ASSIGN_MINUS','assignment_operator',1,'p_assignment_operator','parser.py',169),
  ('unary_operator -> ADDRESS','unary_operator',1,'p_unary_operator','parser.py',174),
  ('unary_operator -> TIMES','unary_operator',1,'p_unary_operator','parser.py',175),
  ('unary_operator -> PLUS','unary_operator',1,'p_unary_operator','parser.py',176),
  ('unary_operator -> MINUS','unary_operator',1,'p_unary_operator','parser.py',177),
  ('unary_operator -> NOT','unary_operator',1,'p_unary_operator','parser.py',178),
  ('parameter_list -> parameter_declaration','parameter_list',1,'p_parameter_list','parser.py',183),
  ('parameter_list -> parameter_list COMMA parameter_declaration','parameter_list',3,'p_parameter_list','parser.py',184),
  ('parameter_declaration -> type_specifier declarator','parameter_declaration',2,'p_parameter_declaration','parser.py',189),
  ('declaration -> type_specifier SEMI','declaration',2,'p_declaration','parser.py',194),
  ('declaration -> type_specifier init_declarator SEMI','declaration',3,'p_declaration','parser.py',195),
  ('init_declarator -> declarator','init_declarator',1,'p_init_declarator','parser.py',200),
  ('init_declarator -> declarator EQ initializer','init_declarator',3,'p_init_declarator','parser.py',201),
  ('initializer -> assignment_expression','initializer',1,'p_initializer','parser.py',206),
  ('initializer -> LBRACE initializer_list RBRACE','initializer',3,'p_initializer','parser.py',207),
  ('initializer -> LBRACE initializer_list COMMA RBRACE','initializer',4,'p_initializer','parser.py',208),
  ('initializer_list -> initializer','initializer_list',1,'p_initializer_list','parser.py',213),
  ('initializer_list -> initializer_list COMMA initializer','initializer_list',3,'p_initializer_list','parser.py',214),
  ('statement -> expression_statement','statement',1,'p_statement','parser.py',219),
  ('statement -> iteration_statement','statement',1,'p_statement','parser.py',220),
  ('statement -> compound_statement','statement',1,'p_statement','parser.py',221),
  ('statement -> jump_statement','statement',1,'p_statement','parser.py',222),
  ('statement -> assert_statement','statement',1,'p_statement','parser.py',223),
  ('statement -> print_statement','statement',1,'p_statement','parser.py',224),
  ('statement -> selection_statement','statement',1,'p_statement','parser.py',225),
  ('statement -> read_statement','statement',1,'p_statement','parser.py',226),
  ('expression_statement -> SEMI','expression_statement',1,'p_expression_statement','parser.py',242),
  ('expression_statement -> expression SEMI','expression_statement',2,'p_expression_statement','parser.py',243),
  ('selection_statement -> IF LPAREN expression RPAREN statement','selection_statement',5,'p_selection_statement','parser.py',247),
  ('selection_statement -> IF LPAREN expression RPAREN statement ELSE statement','selection_statement',7,'p_selection_statement','parser.py',248),
  ('iteration_statement -> WHILE LPAREN expression RPAREN statement','iteration_statement',5,'p_iteration_statement','parser.py',253),
  ('iteration_statement -> FOR LPAREN SEMI SEMI RPAREN statement','iteration_statement',6,'p_iteration_statement','parser.py',254),
  ('iteration_statement -> FOR LPAREN expression SEMI SEMI RPAREN statement','iteration_statement',7,'p_iteration_statement','parser.py',255),
  ('iteration_statement -> FOR LPAREN SEMI expression SEMI RPAREN statement','iteration_statement',7,'p_iteration_statement','parser.py',256),
  ('iteration_statement -> FOR LPAREN SEMI SEMI expression RPAREN statement','iteration_statement',7,'p_iteration_statement','parser.py',257),
  ('iteration_statement -> FOR LPAREN expression SEMI expression SEMI RPAREN statement','iteration_statement',8,'p_iteration_statement','parser.py',258),
  ('iteration_statement -> FOR LPAREN expression SEMI SEMI expression RPAREN statement','iteration_statement',8,'p_iteration_statement','parser.py',259),
  ('iteration_statement -> FOR LPAREN SEMI expression SEMI expression RPAREN statement','iteration_statement',8,'p_iteration_statement','parser.py',260),
  ('iteration_statement -> FOR LPAREN expression SEMI expression SEMI expression RPAREN statement','iteration_statement',9,'p_iteration_statement','parser.py',261),
  ('jump_statement -> BREAK','jump_statement',1,'p_jump_statement','parser.py',266),
  ('jump_statement -> RETURN','jump_statement',1,'p_jump_statement','parser.py',267),
  ('jump_statement -> RETURN expression','jump_statement',2,'p_jump_statement','parser.py',268),
  ('assert_statement -> ASSERT expression SEMI','assert_statement',3,'p_assert_statement','parser.py',277),
  ('print_statement -> PRINT LPAREN expression RPAREN SEMI','print_statement',5,'p_print_statement','parser.py',282),
  ('read_statement -> READ LPAREN declarator_list RPAREN SEMI','read_statement',5,'p_read_statement','parser.py',287),
  ('declarator_list -> declarator','declarator_list',1,'p_declarator_list','parser.py',291),
  ('declarator_list -> declarator_list declarator','declarator_list',2,'p_declarator_list','parser.py',292),
]
